{"version":3,"sources":["types.ts","services/lists.tsx","constants.ts","services/users.tsx","state/reducer.tsx","state/state.tsx","components/AddNewList.tsx","components/ShoppingLists.tsx","components/LogInOut.tsx","components/Register.tsx","components/NavBar.tsx","components/EditListModal/DeleteListModal.tsx","components/FieldForm.tsx","components/EditListModal/InviteGuestForm.tsx","components/EditListModal/InvitedGuests.tsx","components/EditListModal/Guests.tsx","components/EditListModal/index.tsx","components/AddItemModal/AddItemForm.tsx","components/AddItemModal/index.tsx","components/EditItemModal/EditItemForm.tsx","components/EditItemModal/index.tsx","components/Item.tsx","components/ActiveList.tsx","components/AddListModal/AddListForm.tsx","components/AddListModal/index.tsx","components/PromptModal/ModalForm.tsx","components/PromptModal/index.tsx","components/ProfilePage/DataChanged.tsx","components/ProfilePage/Name.tsx","components/ProfilePage/Email.tsx","components/PasswordChangeModal/ModalForm.tsx","components/PasswordChangeModal/index.tsx","components/ProfilePage/Password.tsx","components/ProfilePage/ListInvitations.tsx","components/ProfilePage/index.tsx","components/ResetPassword/ResetForm.tsx","components/ButtonLink.tsx","components/ResetPassword/index.tsx","components/Home.tsx","components/LoginModal/LoginForm.tsx","components/LoginModal/index.tsx","components/RegisterModal/RegisterForm.tsx","components/RegisterModal/index.tsx","components/RecoveryModal/RecoveryForm.tsx","components/RecoveryModal/index.tsx","components/LoadingIndicator.tsx","App.tsx","index.tsx"],"names":["ModalType","token","config","headers","Authorization","getListsByUser","a","axios","get","listsFromApi","data","addList","name","post","addedList","editList","id","items","put","deleteList","listID","delete","addItem","item","addedItem","deleteItem","itemId","editItem","patch","markItem","inviteGuest","guestName","editedList","uninviteGuest","guestId","acceptInvitation","user","declineInvitation","leaveList","removeGuest","setToken","newToken","login","password","response","register","email","getUser","listService","getUserByEmail","setActiveList","userId","listId","clearActiveList","changeName","changeEmail","changePassword","oldPassword","newPassword","validateToken","requestReset","resetPassword","setDesktop","desktop","type","payload","setLists","lists","dispatch","userService","userFromApi","list","activeList","guests","map","g","includes","changeActiveList","itemName","newName","newItem","editedItem","markedItem","strikethrough","getUserFromLocal","loggedUserJSON","window","localStorage","getItem","JSON","parse","listInvitations","setItem","stringify","resetActiveList","editedUser","guest","changeUserName","storedUser","changeUserEmail","setOpenModalType","modalType","modal","initialState","listModalOpen","None","isDesktop","StateContext","createContext","StateProvider","reducer","children","useReducer","state","Provider","value","useStateValue","useContext","AddNewList","Menu","Item","as","onClick","Icon","size","ShoppingLists","history","useHistory","location","useLocation","promiseInProgress","usePromiseTracker","useEffect","fetchLists","trackPromise","console","error","setActive","push","showActiveList","pathname","Dropdown","text","style","minWidth","length","key","Divider","Header","LogInOut","removeItem","discardUser","color","LoginModal","Register","RegisterModal","NavBar","getNameCapitalized","firstChar","charAt","toLowerCase","toUpperCase","slice","borderless","inverted","minHeight","Container","position","header","className","top","left","DeleteListModal","open","onConfirm","onClose","Modal","centered","closeIcon","Content","Grid","Column","floated","width","Button","TextField","field","label","placeholder","autoFocus","Field","PasswordField","useState","showPassword","setShowPassword","Input","icon","link","InviteGuestForm","onSubmit","initialValues","isValid","dirty","component","disabled","InvitedGuests","removeInvitation","log","contStyle","padding","invitedGuests","fontWeight","fontSize","Segment","verticalAlign","Guests","isGuest","removeGuestUser","normalStyle","boldStyle","EditListModal","deleteModalOpen","setDeleteModalOpen","removeList","addInvitation","values","action","setErrors","resetForm","leaveGuestList","Actions","AddItemForm","onCancel","validate","errors","AddItemModal","addNewItem","e","EditItemForm","EditItemModal","EditItem","onRemove","onEdit","index","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","textDecoration","ActiveList","editListModalOpen","setEditListModalOpen","setEditedItem","addItemModalOpen","setAddItemModalOpen","refContainer","useRef","focusAddButton","current","focus","clickItem","onDragEnd","result","destination","source","droppableId","newItems","draggedItem","find","i","splice","paddingRight","marginBottom","droppableProps","stopPropagation","marginTop","textAlign","to","AddListForm","l","AddListModal","addNewList","ModalForm","placeHolder","initialValue","test","validateOnChange","PromptModal","DataChanged","marginLeft","Name","nameModalOpen","setNameModalOpen","nameChanged","setNameChanged","showSuccess","setShowSuccess","nameChangedTimer","setTimeout","clearTimeout","status","Table","Row","Cell","paddingTop","paddingBottom","display","gridTemplateColumns","textJustify","lineHeight","justifySelf","Email","emailModalOpen","setEmailModalOpen","emailChanged","setEmailChanged","toggleShowPassword","PasswordChangeModal","Password","passwordModalOpen","setPasswordModalOpen","passwordChanged","setPasswordChanged","validatePassword","ListInvitations","setListInvitations","acceptListInvitation","declineListInvitation","dividerStyle","horizontal","Body","inv","positive","negative","ProfilePage","userProp","setUserProp","isMounted","userToReturn","definition","ResetForm","validateOnBlur","ButtonLink","props","basic","join","ResetPassword","useParams","undefined","validatedUserId","setValidatedUser","resetSuccessful","setResetSuccessful","validateUser","adviceStyle","RecoveryModal","secondary","content","Home","marginRight","LoginForm","loginFailed","Message","setLoginFailed","Login","RegisterForm","closeModal","RecoveryForm","emailFound","emailNotFound","resetMessage","info","setEmailFound","setEmailNotFound","sendMail","LoadingIndicator","height","justifyContent","alignItems","App","useMediaQuery","minDeviceWidth","matches","path","ReactDOM","render","filter","document","getElementById"],"mappings":"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","file":"static/js/main.1a6fad93.chunk.js","sourcesContent":["export interface ItemType extends Document {\r\n    id: string;\r\n    name: string;\r\n    strikethrough: boolean;\r\n}\r\n\r\nexport interface ItemList {\r\n    id: string;\r\n    name: string;\r\n    items: ItemType[];\r\n    user: User;\r\n    invitedGuests: User[];\r\n    guests: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    name: string;\r\n    email: string | null;\r\n    token: string;\r\n    listInvitations: ItemList[];\r\n    activeList: ItemList;\r\n}\r\n\r\nexport enum ModalType {\r\n    None,\r\n    TestModal,\r\n    LoginModal,\r\n    RegisterModal,\r\n    RecoveryModal\r\n}","import { ItemList, ItemType } from '../types';\r\nimport axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\n\r\nlet token: string | null = null;\r\n\r\nconst config = () => ({ headers: { Authorization: token } });\r\n\r\nconst setToken = (newToken: string) => {\r\n    token = `bearer ${newToken}`;\r\n};\r\n\r\nconst getListsByUser = async () => {\r\n    const { data: listsFromApi } = await axios.get<ItemList[]>(\r\n        `${apiBaseUrl}/lists`, config()\r\n    );\r\n\r\n    return listsFromApi;\r\n};\r\n\r\nconst addList = async (name: string) => {\r\n    const { data: addedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists`, { name }, config()\r\n    );\r\n\r\n    return addedList;\r\n};\r\n\r\nconst editList = async (id: string, items: ItemType[]) => {\r\n    return await axios.put<ItemList>(\r\n        `${apiBaseUrl}/lists/${id}/update`, { items }, config()\r\n    );\r\n};\r\n\r\nconst deleteList = async (listID: string) => {\r\n    await axios.delete(`${apiBaseUrl}/lists/${listID}`, config());\r\n};\r\n\r\nconst addItem = async (listID: string, item: string) => {\r\n    const addedItem = await axios.post<ItemType>(\r\n        `${apiBaseUrl}/lists/${listID}/add-item`, { name: item }, config()\r\n    );\r\n    return addedItem;\r\n};\r\n\r\nconst deleteItem = async (listID: string, itemId: string) => {\r\n    await axios.delete<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/delete-item/${itemId}`, config()\r\n    );\r\n};\r\n\r\nconst editItem = async (listID: string, item: ItemType) => {\r\n    await axios.patch<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/edit-item`, { item }, config()\r\n    );\r\n};\r\n\r\nconst markItem = async (listID: string, item: ItemType) => {\r\n    await axios.patch<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/mark-item`, { item }, config()\r\n    );\r\n};\r\n\r\nconst inviteGuest = async (listID: string, guestName: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/invite-guest`, { guestName }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst uninviteGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/uninvite-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst acceptInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/accept-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst declineInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/decline-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst leaveList = async (listID: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/leave-list`, {}, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst removeGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/remove-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nexport default {\r\n    config,\r\n    setToken,\r\n    getListsByUser,\r\n    addList,\r\n    addItem,\r\n    deleteItem,\r\n    editItem,\r\n    markItem,\r\n    deleteList,\r\n    editList,\r\n    inviteGuest,\r\n    uninviteGuest,\r\n    acceptInvitation,\r\n    declineInvitation,\r\n    leaveList,\r\n    removeGuest\r\n};","export const apiBaseUrl = '/api';\r\n// export const apiBaseUrl = 'http://localhost:3001/api';","import axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\nimport listService from './lists';\r\n\r\nconst login = async (name: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/login`, { name, password });\r\n    return response.data;\r\n};\r\n\r\nconst register = async (name: string, email: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/users`, { name, email, password });\r\n    return response.data;\r\n};\r\n\r\nconst getUser = async (id: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/${id}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst getUserByEmail = async (email: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/find-email/${email}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst setActiveList = async (userId: string, listId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/set-active-list`, { listId }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst clearActiveList = async (userId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/clear-active-list`, {}, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeName = async (userId: string, name: string, password: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-name`, { name, password }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeEmail = async (userId: string, email: string, password: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-email`, { email, password }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changePassword = async (userId: string, oldPassword: string, newPassword: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-password`, { oldPassword, newPassword }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst validateToken = async (token: string) => {\r\n    try {\r\n        const response = await axios.post(`${apiBaseUrl}/users/validate-token`, { token }, listService.config());\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n\r\nconst requestReset = async (email: string) => {\r\n    try {\r\n        const response = await axios.post(`${apiBaseUrl}/users/send-reset-email`, { email }, listService.config());\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n\r\nconst resetPassword = async (email: string, password: string) => {\r\n    try {\r\n        const response = await axios.post(`${apiBaseUrl}/users/reset-password`, { email, password }, listService.config());\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n\r\nexport default { login, register, getUser, getUserByEmail, setActiveList, clearActiveList, changeName, changeEmail, changePassword, requestReset, validateToken, resetPassword };","import React from 'react';\r\nimport { State } from \"./state\";\r\nimport { ItemList, ItemType, User } from \"../types\";\r\nimport listService from '../services/lists';\r\nimport userService from '../services/users';\r\nimport { ModalType } from '../types';\r\n\r\nexport type Action =\r\n    | {\r\n        type: \"SET_DEVICE_TO_DESKTOP\";\r\n        payload: boolean;\r\n    }\r\n    | {\r\n        type: \"SET_LISTS\";\r\n        payload: ItemList[];\r\n    }\r\n    | {\r\n        type: \"SET_ACTIVE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"CLEAR_ACTIVE_LIST\";\r\n    }\r\n    | {\r\n        type: \"ADD_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"EDIT_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"DELETE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"OPEN_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"CLOSE_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"ADD_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"DELETE_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"EDIT_ITEM\";\r\n        payload: { list: ItemList; editedItem: ItemType };\r\n    }\r\n    | {\r\n        type: \"MARK_ITEM\";\r\n        payload: { list: ItemList; editedItem: ItemType };\r\n    }\r\n    | {\r\n        type: \"SET_USER\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"DISCARD_USER\";\r\n    }\r\n    | {\r\n        type: \"INVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"UNINVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"ACCEPT_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"DECLINE_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"LEAVE_LIST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"REMOVE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_NAME\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_EMAIL\";\r\n        payload: { user: User };\r\n    } | {\r\n        type: \"SET_OPEN_MODAL_TYPE\";\r\n        payload: { modal: ModalType };\r\n    };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case \"SET_DEVICE_TO_DESKTOP\":\r\n            return {\r\n                ...state,\r\n                isDesktop: action.payload\r\n            };\r\n        case \"SET_LISTS\":\r\n            return {\r\n                ...state,\r\n                lists: action.payload\r\n            };\r\n        case \"SET_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"CLEAR_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: null\r\n            };\r\n        case \"OPEN_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: true\r\n            };\r\n        case \"CLOSE_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: false\r\n            };\r\n        case \"ADD_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, action.payload]\r\n            };\r\n        case \"EDIT_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"DELETE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(l => l.id !== action.payload.id),\r\n                activeList: null\r\n            };\r\n        case \"ADD_ITEM\":\r\n            action.payload.list.items.push(action.payload.item);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"DELETE_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.filter(i => i.id !== action.payload.item.id);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"EDIT_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.map(i => i.id === action.payload.editedItem.id ? action.payload.editedItem : i);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"MARK_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.map(i => i.id === action.payload.editedItem.id ? action.payload.editedItem : i);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"SET_USER\":\r\n            // window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(action.payload.user));\r\n            listService.setToken(action.payload.user.token);\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"DISCARD_USER\":\r\n            return {\r\n                ...state,\r\n                user: null\r\n            };\r\n        case \"INVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"UNINVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"ACCEPT_INVITATION\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"DECLINE_INVITATION\":\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"LEAVE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n            };\r\n        case \"REMOVE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                activeList: action.payload.list\r\n            };\r\n        case \"CHANGE_USER_NAME\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"CHANGE_USER_EMAIL\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"SET_OPEN_MODAL_TYPE\":\r\n            return {\r\n                ...state,\r\n                modalType: action.payload.modal\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setDesktop = (desktop: boolean) => {\r\n    return (\r\n        {\r\n            type: \"SET_DEVICE_TO_DESKTOP\" as \"SET_DEVICE_TO_DESKTOP\",\r\n            payload: desktop\r\n        }\r\n    );\r\n};\r\n\r\nexport const setLists = (lists: ItemList[]) => {\r\n    return (\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const setActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    const list = userFromApi.activeList;\r\n\r\n    if (list) {\r\n        if (list.guests.map(g => g.id).includes(userFromApi.id) || list.user.id === userFromApi.id) {\r\n            dispatch(\r\n                {\r\n                    type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n                    payload: list\r\n                }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport const changeActiveList = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.setActiveList(user.id, list.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: userFromApi.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const openListModal = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_LIST_MODAL\" as \"OPEN_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeListModal = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_LIST_MODAL\" as \"CLOSE_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const addList = async (name: string, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const addedList = await listService.addList(name);\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    await userService.setActiveList(userFromApi.id, addedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"ADD_LIST\" as \"ADD_LIST\",\r\n            payload: addedList\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: addedList\r\n        }\r\n    );\r\n};\r\n\r\nexport const editList = async (list: ItemList, items: ItemType[], dispatch: React.Dispatch<Action>) => {\r\n    await listService.editList(list.id, items);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_LIST\" as \"EDIT_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteList(list.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_LIST\" as \"DELETE_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const addItem = async (list: ItemList, itemName: string, dispatch: React.Dispatch<Action>) => {\r\n    const item = (await listService.addItem(list.id, itemName)).data;\r\n    dispatch(\r\n        {\r\n            type: \"ADD_ITEM\" as \"ADD_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteItem = async (list: ItemList, item: ItemType, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteItem(list.id, item.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_ITEM\" as \"DELETE_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const editItem = async (list: ItemList, item: ItemType, newName: string, dispatch: React.Dispatch<Action>) => {\r\n    const newItem = { ...item, name: newName };\r\n    await listService.editItem(list.id, newItem);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_ITEM\" as \"EDIT_ITEM\",\r\n            payload: { list, editedItem: newItem }\r\n        }\r\n    );\r\n};\r\n\r\nexport const markItem = async (list: ItemList, item: ItemType, dispatch: React.Dispatch<Action>) => {\r\n    const markedItem = { ...item, strikethrough: !item.strikethrough };\r\n    await listService.markItem(list.id, item);\r\n    dispatch(\r\n        {\r\n            type: \"MARK_ITEM\" as \"MARK_ITEM\",\r\n            payload: { list, editedItem: markedItem }\r\n        }\r\n    );\r\n};\r\n\r\nexport const getUserFromLocal = async (dispatch: React.Dispatch<Action>) => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const user = JSON.parse(loggedUserJSON);\r\n        const userFromApi = await userService.getUser(user.id);\r\n        user.listInvitations = userFromApi.listInvitations;\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const discardUser = (dispatch: React.Dispatch<Action>) => {\r\n    window.localStorage.removeItem('loggedShoppingListAppUser');\r\n    listService.setToken(\"\");\r\n    dispatch(\r\n        {\r\n            type: \"DISCARD_USER\" as \"DISCARD_USER\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const login = async (name: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    const user = await userService.login(name, password);\r\n    window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(user));\r\n    const userFromApi = await userService.getUser(user.id);\r\n    user.listInvitations = userFromApi.listInvitations;\r\n    if (user) {\r\n        dispatch(\r\n            {\r\n                type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n            }\r\n        );\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const register = async (name: string, email: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    await userService.register(name, email, password);\r\n    const user = await userService.login(name, password);\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_USER\" as \"SET_USER\",\r\n            payload: { user }\r\n        }\r\n    );\r\n};\r\n\r\nexport const openProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_PROFILE_PAGE\" as \"OPEN_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_PROFILE_PAGE\" as \"CLOSE_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const clearActiveList = () => {\r\n    return (\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const resetActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    await userService.clearActiveList(user.id);\r\n    const lists = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const inviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"INVITE_GUEST\" as \"INVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const uninviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"UNINVITE_GUEST\" as \"UNINVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const acceptInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.acceptInvitation(list.id, user.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    const lists: ItemList[] = await listService.getListsByUser();\r\n    const editedUser: User = await userService.setActiveList(user.id, editedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"ACCEPT_INVITATION\" as \"ACCEPT_INVITATION\",\r\n            payload: { list: editedList, user: editedUser }\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: editedUser.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const declineInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.declineInvitation(list.id, user.id);\r\n    const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"DECLINE_INVITATION\" as \"DECLINE_INVITATION\",\r\n            payload: { list: editedList, user: editedUser }\r\n        }\r\n    );\r\n};\r\n\r\nexport const leaveList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.leaveList(list.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"LEAVE_LIST\" as \"LEAVE_LIST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const removeGuest = async (list: ItemList, guest: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.removeGuest(list.id, guest.id);\r\n    dispatch(\r\n        {\r\n            type: \"REMOVE_GUEST\" as \"REMOVE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeUserName = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_NAME\" as \"CHANGE_USER_NAME\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.name = editedUser.name;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const changeUserEmail = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_EMAIL\" as \"CHANGE_USER_EMAIL\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.email = editedUser.email;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const setOpenModalType = (modalType: ModalType) => {\r\n    return (\r\n        {\r\n            type: \"SET_OPEN_MODAL_TYPE\" as \"SET_OPEN_MODAL_TYPE\",\r\n            payload: { modal: modalType }\r\n        }\r\n    );\r\n};\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { ItemList, User, ModalType } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n    lists: ItemList[];\r\n    activeList: ItemList | null;\r\n    listModalOpen: boolean;\r\n    user: null | User;\r\n    modalType: ModalType;\r\n    isDesktop: boolean;\r\n};\r\n\r\nconst initialState: State = {\r\n    lists: [],\r\n    activeList: null,\r\n    listModalOpen: false,\r\n    user: null,\r\n    modalType: ModalType.None,\r\n    isDesktop: true,\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n    initialState,\r\n    () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n    reducer: React.Reducer<State, Action>;\r\n    children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n    reducer,\r\n    children\r\n}: StateProviderProps) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react';\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { useStateValue, openListModal } from '../state';\r\n\r\nconst AddNewList: React.FC = () => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Menu.Item name='newList' as='a' onClick={() => dispatch(openListModal())}>\r\n            <Icon name='add' size='tiny' />\r\n        Add List\r\n        </Menu.Item>\r\n    );\r\n};\r\n\r\nexport default AddNewList;","import React, { useEffect, Fragment } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport AddNewList from './AddNewList';\r\nimport { useStateValue, setActiveList, setLists, changeActiveList } from '../state';\r\nimport { ItemList } from '../types';\r\nimport { Dropdown, Icon } from 'semantic-ui-react';\r\nimport listService from '../services/lists';\r\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker';\r\n\r\nconst ShoppingLists: React.FC = () => {\r\n    const [{ lists, activeList, user, isDesktop }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    useEffect(() => {\r\n        const fetchLists = async () => {\r\n            // const waitFor = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\r\n            // await waitFor(2000);\r\n            try {\r\n                const listsFromApi = await listService.getListsByUser();\r\n                dispatch(setLists(listsFromApi));\r\n                if (user) {\r\n                    trackPromise(setActiveList(user, dispatch));\r\n                }\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n        trackPromise(fetchLists());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    const setActive = (list: ItemList) => {\r\n        if (user) {\r\n            trackPromise(changeActiveList(list, user, dispatch));\r\n            history.push('/list');\r\n        }\r\n    };\r\n\r\n    const showActiveList = () => {\r\n        if (location.pathname === '/profile' || !activeList) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    if (promiseInProgress) {\r\n        return (\r\n            <Dropdown item text={(showActiveList()) ? activeList?.name : 'Select list'} style={{ minWidth: \"11rem\" }}></Dropdown >\r\n        );\r\n    }\r\n\r\n    if (lists.length === 0) {\r\n        return <AddNewList />;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Dropdown item text={(showActiveList()) ? activeList?.name : 'Select list'} style={{ minWidth: \"11rem\" }}>\r\n                <Dropdown.Menu>\r\n                    {lists.map(list => (\r\n                        <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                            {activeList && activeList.id === list.id ?\r\n                                <Icon name=\"selected radio\" size=\"mini\" />\r\n                                :\r\n                                <Icon name=\"circle outline\" size=\"mini\" />\r\n                            }\r\n\r\n                            {list.name}\r\n                        </Dropdown.Item>\r\n                    ))}\r\n                    <Dropdown.Divider />\r\n                    <AddNewList />\r\n                </Dropdown.Menu>\r\n            </Dropdown >\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Dropdown.Header text={'Lists'} style={{ minWidth: \"11rem\" }}>Lists</Dropdown.Header>\r\n\r\n                {lists.map(list => (\r\n                    <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                        {activeList && activeList.id === list.id ?\r\n                            <Icon name=\"selected radio\" size=\"mini\" />\r\n                            :\r\n                            <Icon name=\"circle outline\" size=\"mini\" />\r\n                        }\r\n\r\n                        {list.name}\r\n                    </Dropdown.Item>\r\n                ))}\r\n                <AddNewList />\r\n                <Dropdown.Divider />\r\n            </Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ShoppingLists;","import React, { Fragment, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStateValue, getUserFromLocal, discardUser, setOpenModalType } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport { ModalType } from '../types';\r\n\r\nconst LogInOut: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    const Logout = () => {\r\n        discardUser(dispatch);\r\n        dispatch(setOpenModalType(ModalType.None));\r\n        history.push('/');\r\n    };\r\n\r\n    useEffect(() => {\r\n        trackPromise(getUserFromLocal(dispatch));\r\n\r\n    }, []);// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <Fragment>\r\n            {user ?\r\n                <Menu.Item type=\"button\" onClick={Logout} color=\"grey\">\r\n                    Logout\r\n                </Menu.Item>\r\n                :\r\n                <Menu.Item type=\"button\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} color=\"grey\">\r\n                    Login\r\n                </Menu.Item>\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default LogInOut;","import React, { Fragment } from 'react';\r\nimport { useStateValue, setOpenModalType } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { ModalType } from '../types';\r\n\r\nconst Register: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    return (\r\n        <Fragment>\r\n            {!user ?\r\n                <Menu.Item type=\"button\" onClick={() => dispatch(setOpenModalType(ModalType.RegisterModal))} color=\"grey\">\r\n                    Register\r\n                </Menu.Item>\r\n                :\r\n                null\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Register;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ShoppingLists from './ShoppingLists';\r\nimport { Menu, Container, Icon, Dropdown } from 'semantic-ui-react';\r\nimport LogInOut from './LogInOut';\r\nimport Register from './Register';\r\nimport { useStateValue } from '../state';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const [{ user, isDesktop }] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    const getNameCapitalized = () => {\r\n        if (!user) {\r\n            return null;\r\n        }\r\n\r\n        const firstChar = user.name.charAt(0);\r\n\r\n        // eslint-disable-next-line\r\n        if (firstChar.toLowerCase() != firstChar.toUpperCase()) {\r\n            return user.name.charAt(0).toUpperCase() + user.name.slice(1);\r\n        } else {\r\n            return user.name;\r\n        }\r\n    };\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Menu borderless inverted size=\"massive\" style={{ minHeight: \"4.315rem\" }}>\r\n                <Container>\r\n                    <Menu.Item position='left' header>\r\n                        {/* <Icon color=\"black\" name=\"list alternate outline\" size=\"large\" /> */}\r\n                    Kauppalappu\r\n                </Menu.Item>\r\n                    <Menu.Menu position='right'>\r\n                        {user && <ShoppingLists />}\r\n                        {user &&\r\n                            <Menu.Item type=\"button\" onClick={() => history.push('/profile')} color=\"grey\">\r\n                                <Icon name=\"user\" size=\"large\" />\r\n                                {user.listInvitations && user.listInvitations.length > 0 &&\r\n                                    <div className=\"ui floating circular red label\" style={{ top: \"0.3rem\", left: \"4.4rem\" }}>{user.listInvitations.length}</div>}\r\n                                {getNameCapitalized()}\r\n                            </Menu.Item>\r\n                        }\r\n                        <LogInOut />\r\n                        <Register />\r\n                    </Menu.Menu>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    } else {\r\n        return (\r\n            <Menu borderless inverted size=\"huge\" style={{ minHeight: \"4.077rem\" }}>\r\n                <Container>\r\n                    <Menu.Item header className=\"mobile-logo\" >\r\n                        {/* <Icon name=\"list alternate outline\" size=\"large\" /> */}\r\n                        Kauppalappu\r\n                    </Menu.Item>\r\n                    <Dropdown item text=\"Menu\" className=\"mobile-menu\">\r\n                        <Dropdown.Menu>\r\n                            {user && <ShoppingLists />}\r\n                            {user &&\r\n                                <Dropdown.Item type=\"button\" onClick={() => history.push('/profile')} color=\"grey\">\r\n                                    <Icon name=\"user\" size=\"large\" />\r\n                                    {getNameCapitalized()}\r\n                                </Dropdown.Item>\r\n                            }\r\n                            <LogInOut />\r\n                            <Register />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Container>\r\n            </Menu >\r\n        );\r\n    }\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { Modal, Button, Grid } from 'semantic-ui-react';\r\nimport { ItemList } from '../../types';\r\n\r\nconst DeleteListModal: React.FC<{ open: boolean; list: ItemList; onConfirm: () => void; onClose: () => void }> = ({ open, onConfirm, onClose, list }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Really delete list {list.name}?</Modal.Header>\r\n            <Modal.Content>\r\n                <Grid>\r\n                    <Grid.Column floated=\"left\" width={5}>\r\n                        <Button type=\"button\" onClick={onConfirm} color=\"red\">\r\n                            Yes\r\n                    </Button>\r\n                    </Grid.Column>\r\n                    <Grid.Column floated=\"right\" width={5}>\r\n                        <Button floated=\"right\" type=\"button\" onClick={onClose} color=\"grey\">\r\n                            No\r\n                    </Button>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeleteListModal;","import React, { useState } from \"react\";\r\nimport { Form as UIForm, Input, Icon } from \"semantic-ui-react\";\r\nimport { Field, ErrorMessage, FieldProps } from \"formik\";\r\n\r\ninterface TextProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    autoFocus: boolean;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            <Field placeholder={placeholder} {...field} autoFocus={autoFocus} />\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field>\r\n    );\r\n\r\ninterface PasswordProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    autoFocus: boolean;\r\n    type: string;\r\n}\r\n\r\nexport const PasswordField: React.FC<PasswordProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    return (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            {/* <Field type={type} placeholder={placeholder} {...field} autoFocus={autoFocus} /> */}\r\n            <Input\r\n                autoFocus={autoFocus}\r\n                placeholder={placeholder}\r\n                type={showPassword ? 'text' : 'password'}\r\n                {...field}\r\n                icon={\r\n                    <Icon name={showPassword ? 'eye slash' : 'eye'} size=\"large\" link onClick={() => setShowPassword(!showPassword)} />}\r\n            />\r\n            {/* <div style={{ color: 'red', minHeight: \"1.3571rem\" }}></div> */}\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field >);\r\n};\r\n\r\ninterface CheckboxProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    type: string;\r\n    checked: boolean;\r\n    onChange: () => void;\r\n}\r\n\r\nexport const Checkbox: React.FC<CheckboxProps> = ({ field, type, checked, onChange }) => {\r\n    return (\r\n        <label>\r\n            {/* remove {...field} to see changes not propagated */}\r\n            <input {...field} type={type} checked={checked} onChange={onChange} />\r\n            {field.name}\r\n        </label>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: any;\r\n}\r\n\r\nexport const InviteGuestForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        // validate={values => {\r\n        //     const requiredError = \"Field is required\";\r\n        //     const errors: { [field: string]: string } = {};\r\n        //     if (!values.name) {\r\n        //         errors.name = requiredError;\r\n        //     }\r\n        //     return errors;\r\n        // }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Invite a user\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            {/* <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column> */}\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"left\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Invite\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default InviteGuestForm;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport listService from '../../services/lists';\r\nimport { uninviteGuest, changeActiveList, useStateValue } from '../../state';\r\n\r\nconst InvitedGuests: React.FC<{ list: ItemList }> = ({ list }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeInvitation = async (guest: User) => {\r\n        try {\r\n            const editedList = await listService.uninviteGuest(list.id, guest.id);\r\n            dispatch(uninviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n\r\n    if (list.invitedGuests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n                <p style={normalStyle}>List has no pending invitations.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n            {list.invitedGuests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeInvitation(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default InvitedGuests;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport { removeGuest, useStateValue } from '../../state';\r\n\r\nconst Guests: React.FC<{ list: ItemList; isGuest: boolean }> = ({ list, isGuest }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeGuestUser = async (guest: User) => {\r\n        try {\r\n            removeGuest(list, guest, dispatch);\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n    const boldStyle = {\r\n        fontSize: \"1rem\",\r\n        fontWeight: \"bold\"\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (list.guests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                <p style={normalStyle}>List has no guest users.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    // user is guest on the said list\r\n    if (isGuest) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                {list.guests.map(g =>\r\n                    <Segment size=\"mini\" key={g.id}>\r\n                        <span style={g.id === user.id ? boldStyle : normalStyle}>{g.name}</span>\r\n                    </Segment>\r\n                )\r\n                }\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n            {list.guests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeGuestUser(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Guests;","import React, { useState, Fragment } from 'react';\r\nimport { Modal, Button, Icon, Divider, Segment } from 'semantic-ui-react';\r\nimport { useStateValue, deleteList, inviteGuest, changeActiveList, leaveList, resetActiveList } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport DeleteListModal from './DeleteListModal';\r\nimport InviteGuestForm from './InviteGuestForm';\r\nimport InvitedGuests from './InvitedGuests';\r\nimport Guests from './Guests';\r\nimport listService from '../../services/lists';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditListModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeList = async () => {\r\n        setDeleteModalOpen(false);\r\n        onClose();\r\n        try {\r\n            deleteList(list, dispatch);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const addInvitation = async (values: { name: string }, action: any) => {\r\n        if (list.guests.map(g => g.name).includes(values.name) ||\r\n            list.invitedGuests.map(g => g.name).includes(values.name)) {\r\n            return action.setErrors({ name: \"User is already invited to the list.\" });\r\n        }\r\n        try {\r\n            const editedList = await listService.inviteGuest(list.id, values.name);\r\n            dispatch(inviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n            action.resetForm();\r\n        } catch (error) {\r\n            action.setErrors({ name: \"User does not exist.\" });\r\n        }\r\n    };\r\n    const leaveGuestList = async () => {\r\n        try {\r\n\r\n            if (user) {\r\n                leaveList(list, dispatch);\r\n                resetActiveList(user, dispatch);\r\n                onClose();\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const usersModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: \"bold\" }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\", fontWeight: \"bold\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={false} />\r\n                <Divider />\r\n                <InvitedGuests list={list} />\r\n                <Divider />\r\n                <InviteGuestForm onSubmit={addInvitation} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    const guestsModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={true} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    if (user) {\r\n        if (list.guests.map(g => g.id).includes(user.id)) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {guestsModal()}\r\n                        <Button color=\"orange\" onClick={leaveGuestList}>\r\n                            <Icon name='delete' />Leave list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        } else if (list.user.id === user.id) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {usersModal()}\r\n                        <Button color=\"red\" onClick={() => setDeleteModalOpen(true)}>\r\n                            <Icon name='delete' />Delete list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n            <Modal.Header>Login to edit the list</Modal.Header>\r\n            <Modal.Actions>\r\n                <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                    Cancel\r\n            </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddItemForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Item\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, addItem } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport AddItemForm from './AddItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst AddItemModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const addNewItem = async (values: { name: string }) => {\r\n        try {\r\n            addItem(list, values.name, dispatch);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add item</Modal.Header>\r\n            <Modal.Content>\r\n                <AddItemForm onSubmit={addNewItem} onCancel={onClose} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default AddItemModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { ItemType } from '../../types';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n    item: ItemType | null;\r\n}\r\n\r\nexport const EditItemForm: React.FC<Props> = ({ onSubmit, onCancel, item }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: item ? item.name : \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default EditItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, editItem } from '../../state';\r\nimport { ItemList, ItemType } from '../../types';\r\nimport EditItemForm from './EditItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    item: ItemType | null;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditItemModal: React.FC<Props> = ({ open, onClose, item, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const EditItem = async (values: { name: string }) => {\r\n        try {\r\n            if (item) {\r\n                editItem(list, item, values.name, dispatch);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Edit item</Modal.Header>\r\n            <Modal.Content>\r\n                <EditItemForm onSubmit={EditItem} onCancel={onClose} item={item} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default EditItemModal;\r\n","import React from 'react';\r\nimport { Button, Icon, Segment, Grid } from 'semantic-ui-react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ItemType } from '../types';\r\nimport { useStateValue } from '../state';\r\n\r\ninterface Props {\r\n    item: ItemType;\r\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    onRemove: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    onEdit: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    index: number;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ item, onClick, onRemove, onEdit, index }) => {\r\n    const [{ isDesktop }] = useStateValue();\r\n    return (\r\n        <Draggable draggableId={item.id} index={index} >\r\n            {(provided) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}>\r\n                    <Segment onClick={onClick}>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                                <span style={item.strikethrough ? { textDecoration: \"line-through\", color: \"grey\" } : {}}>{item.name}</span>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={10} className={!isDesktop ? \"item-button-container-mobile\" : \"\"}>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"red\" onClick={onRemove} icon>\r\n                                    <Icon name=\"delete\" />\r\n                                </Button>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"olive\" onClick={onEdit} icon>\r\n                                    <Icon name=\"edit\" />\r\n                                </Button>\r\n                                {/* <Button basic floated=\"right\" size=\"tiny\" color=\"black\" onClick={onMark} icon>\r\n                                    <Icon name=\"strikethrough\" />\r\n                                </Button> */}\r\n                            </Grid.Column>\r\n\r\n                        </Grid>\r\n\r\n                    </Segment>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Item;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useStateValue, markItem, deleteItem, editList } from '../state';\r\nimport { Container, Header, Divider, Button, Icon } from 'semantic-ui-react';\r\nimport EditListModal from './EditListModal';\r\nimport AddItemModal from './AddItemModal';\r\nimport EditItemModal from './EditItemModal';\r\nimport Item from './Item';\r\nimport { ItemType } from '../types';\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst ActiveList: React.FC = () => {\r\n    const [editListModalOpen, setEditListModalOpen] = useState<boolean>(false);\r\n    const [editedItem, setEditedItem] = useState<ItemType | null>(null);\r\n    const [addItemModalOpen, setAddItemModalOpen] = useState<boolean>(false);\r\n    const [{ activeList, isDesktop, user }, dispatch] = useStateValue();\r\n    const refContainer = useRef<Button>(null);\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const focusAddButton = () => {\r\n        if (refContainer && refContainer.current) {\r\n            refContainer.current.focus();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        focusAddButton();\r\n    }, [activeList]);\r\n\r\n    const clickItem = async (item: ItemType) => {\r\n        if (activeList) {\r\n            try {\r\n                await markItem(activeList, item, dispatch);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeItem = async (item: ItemType) => {\r\n        if (activeList) {\r\n            try {\r\n                deleteItem(activeList, item, dispatch);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDragEnd = async (result: DropResult) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        const items = activeList?.items;\r\n        if (items && activeList) {\r\n            const newItems = [...items];\r\n            const draggedItem = newItems.find(i => i.id === draggableId);\r\n            if (draggedItem) {\r\n                newItems.splice(source.index, 1);\r\n                newItems.splice(destination.index, 0, draggedItem);\r\n                activeList.items = newItems;\r\n            }\r\n\r\n            try {\r\n                editList(activeList, newItems, dispatch);\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"4rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    if (!user) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if (promiseInProgress) {\r\n        return null;\r\n    }\r\n\r\n    if (!activeList) {\r\n        return (\r\n            <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n                <Header as=\"h2\" style={adviceStyle}>Create or select a list.</Header>\r\n            </Container>\r\n        );\r\n        // } else if ((!activeList.items)) {\r\n        //     return null;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            {<Header as=\"h3\" style={{ paddingRight: \"1rem\", marginBottom: 0 }}>{activeList.name}</Header>}\r\n            <Divider />\r\n            {activeList.items.length === 0 ? 'List has no items' :\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId={activeList.id}>\r\n                        {(provided) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}>\r\n                                {activeList.items.map((item, index) => (\r\n                                    <Item\r\n                                        index={index}\r\n                                        key={item.id}\r\n                                        item={item}\r\n                                        onClick={() => clickItem(item)}\r\n                                        onRemove={(e) => { removeItem(item); e.stopPropagation(); }}\r\n                                        onEdit={(e) => { setEditedItem(item); e.stopPropagation(); }}\r\n                                    />))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>}\r\n            <EditListModal open={editListModalOpen} onClose={() => setEditListModalOpen(false)} list={activeList} />\r\n            <AddItemModal open={addItemModalOpen} onClose={() => { setAddItemModalOpen(false); focusAddButton(); }} list={activeList} />\r\n            <EditItemModal open={editedItem ? true : false} onClose={() => setEditedItem(null)} list={activeList} item={editedItem} />\r\n            <Divider />\r\n            <Button style={{ marginBottom: \"1rem\" }} floated=\"left\" color='olive' onClick={() => setEditListModalOpen(true)}>\r\n                <Icon name='edit' />Edit\r\n            </Button>\r\n            <Button style={{ marginBottom: \"1rem\" }} color=\"green\" floated=\"right\" onClick={() => setAddItemModalOpen(true)} ref={refContainer}>\r\n                <Icon name=\"add\" />Add Item\r\n            </Button>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default ActiveList;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { useStateValue } from '../../state';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddListForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    const [{ lists }] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const uniqueViolationError = 'List with that name already exists';\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (lists.map(l => l.name).includes(values.name)) {\r\n                    errors.name = uniqueViolationError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the list\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddListForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport AddListForm from './AddListForm';\r\nimport { useStateValue, closeListModal, addList } from '../../state';\r\nimport { trackPromise } from 'react-promise-tracker';\r\n\r\nconst AddListModal: React.FC = () => {\r\n    const [{ listModalOpen, user }, dispatch] = useStateValue();\r\n\r\n    const addNewList = async (values: { name: string }) => {\r\n        dispatch(closeListModal());\r\n        try {\r\n            if (user) {\r\n                trackPromise(addList(values.name, user, dispatch));\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={listModalOpen} onClose={() => dispatch(closeListModal())} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add a new list</Modal.Header>\r\n            <Modal.Content>\r\n                <AddListForm onSubmit={addNewList} onCancel={() => dispatch(closeListModal())} />\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => void;\r\n    onCancel: () => void;\r\n    label: string;\r\n    placeHolder: string;\r\n    initialValue: string;\r\n    type: string;\r\n}\r\n\r\nexport const ModalForm: React.FC<Props> = ({ onSubmit, onCancel, label, placeHolder, initialValue, type }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: initialValue,\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = \"Field is required\";\r\n                }\r\n\r\n                if (values.name === initialValue) {\r\n                    if (type === 'text') {\r\n                        errors.name = \"Choose a new name.\";\r\n                    } else if (type === 'email') {\r\n                        errors.name = \"Choose another email address.\";\r\n                    }\r\n                }\r\n\r\n                if (!values.password) {\r\n                    errors.password = \"Field is required.\";\r\n                }\r\n\r\n                if (type === 'email' && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.name)) {\r\n                    errors.name = \"Invalid email address.\";\r\n                }\r\n                // resetMessage();\r\n                return errors;\r\n\r\n            }}\r\n            validateOnChange={true}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label={label}\r\n                            placeholder={placeHolder}\r\n                            name=\"name\"\r\n                            type={type}\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                            autoFocus={false}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => void;\r\n    onClose: () => void;\r\n    label: string;\r\n    header: string;\r\n    placeHolder: string;\r\n    initialValue: string;\r\n    type: string;\r\n}\r\n\r\nconst PromptModal: React.FC<Props> = ({ open, onSubmit, onClose, label, header, placeHolder, initialValue, type }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={onClose} label={label} type={type} placeHolder={placeHolder} initialValue={initialValue} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PromptModal;\r\n","import React, { Fragment } from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    text?: string;\r\n}\r\n\r\nconst DataChanged: React.FC<Props> = ({ text = \"Changed!\" }) => {\r\n    return (\r\n        <Fragment>\r\n            <Icon style={{ marginLeft: \"1rem\" }} name=\"check\" color=\"green\" />\r\n            <span style={{ color: \"#21ba45\" }}>{text}</span>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default DataChanged;","import React, { useState, useEffect } from 'react';\r\nimport { useStateValue, changeUserName } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\nimport DataChanged from './DataChanged';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst Name: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [nameModalOpen, setNameModalOpen] = useState<boolean>(false);\r\n    const [nameChanged, setNameChanged] = useState<boolean>(false);\r\n    const [showSuccess, setShowSuccess] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        let nameChangedTimer: ReturnType<typeof setTimeout>;\r\n        if (nameChanged) {\r\n            setShowSuccess(true);\r\n            nameChangedTimer = setTimeout(() => {\r\n                setShowSuccess(false);\r\n                setNameChanged(false);\r\n            }, 7500);\r\n        }\r\n        return () => clearTimeout(nameChangedTimer);\r\n    }, [nameChanged]);\r\n\r\n    const changeName = async (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeName(user.id, values.name, values.password);\r\n                changeUserName(editedUser, dispatch);\r\n\r\n                setNameModalOpen(false);\r\n                setNameChanged(true);\r\n            } catch (error) {\r\n                if (error.response.status === 400) {\r\n                    action.setErrors({ name: \"Username already taken.\" });\r\n                } else {\r\n                    action.setErrors({ password: \"Invalid password.\" });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Username</Table.Cell>\r\n                <Table.Cell>\r\n                    {user.name}\r\n                    {showSuccess &&\r\n                        <DataChanged />\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PromptModal open={nameModalOpen}\r\n                    onSubmit={changeName}\r\n                    onClose={() => setNameModalOpen(false)}\r\n                    label=\"Enter new name\"\r\n                    header=\"Change username\"\r\n                    placeHolder=\"Name\"\r\n                    type=\"text\"\r\n                    initialValue={user.name}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell>Username\r\n                    {showSuccess &&\r\n                        <DataChanged />\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}> {user.name}</p>\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n                <PromptModal open={nameModalOpen}\r\n                    onSubmit={changeName}\r\n                    onClose={() => setNameModalOpen(false)}\r\n                    label=\"Enter new name\"\r\n                    header=\"Change username\"\r\n                    placeHolder=\"Name\"\r\n                    type=\"text\"\r\n                    initialValue={user.name}\r\n                />\r\n            </Table.Row >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Name;","import React, { useState, useEffect } from 'react';\r\nimport { useStateValue, changeUserEmail } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\nimport DataChanged from './DataChanged';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst Email: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [emailModalOpen, setEmailModalOpen] = useState<boolean>(false);\r\n    const [emailChanged, setEmailChanged] = useState<boolean>(false);\r\n    const [showSuccess, setShowSuccess] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        let nameChangedTimer: ReturnType<typeof setTimeout>;\r\n        if (emailChanged) {\r\n            setShowSuccess(true);\r\n            nameChangedTimer = setTimeout(() => {\r\n                setShowSuccess(false);\r\n                setEmailChanged(false);\r\n            }, 7500);\r\n        }\r\n        return () => clearTimeout(nameChangedTimer);\r\n    }, [emailChanged]);\r\n\r\n    const changeEmail = async (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeEmail(user.id, values.name, values.password);\r\n                changeUserEmail(editedUser, dispatch);\r\n\r\n                setEmailModalOpen(false);\r\n                setEmailChanged(true);\r\n            } catch (error) {\r\n                if (error.response.status === 400) {\r\n                    action.setErrors({ name: error.response.data });\r\n                } else {\r\n                    action.setErrors({ password: \"Invalid password.\" });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Email</Table.Cell>\r\n                <Table.Cell>{user.email ? user.email : \"\"}\r\n                    {showSuccess &&\r\n                        <DataChanged />\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PromptModal\r\n                    open={emailModalOpen}\r\n                    onSubmit={changeEmail}\r\n                    onClose={() => setEmailModalOpen(false)}\r\n                    label=\"Email adress\"\r\n                    type=\"email\"\r\n                    header=\"Change email\"\r\n                    placeHolder=\"Email\"\r\n                    initialValue={user.email ? user.email : \"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell width={1}>Email\r\n                    {showSuccess &&\r\n                        <DataChanged />\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}>{user.email ? user.email : \"\"}</p>\r\n\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n\r\n                <PromptModal\r\n                    open={emailModalOpen}\r\n                    onSubmit={changeEmail}\r\n                    onClose={() => setEmailModalOpen(false)}\r\n                    label=\"Email address\"\r\n                    type=\"email\"\r\n                    header=\"Change email\"\r\n                    placeHolder=\"Email\"\r\n                    initialValue={user.email ? user.email : \"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Email;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => void;\r\n    onCancel: () => void;\r\n    showPassword: boolean;\r\n    toggleShowPassword: () => void;\r\n    validate: any;\r\n}\r\n\r\nexport const ModalForm: React.FC<Props> = ({ onSubmit, onCancel, showPassword, toggleShowPassword, validate }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                oldPassword: \"\",\r\n                newPassword: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Current password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"oldPassword\"\r\n                            component={PasswordField}\r\n                            autoFocus={true}\r\n\r\n                        />\r\n                        <Field\r\n                            label=\"New password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"newPassword\"\r\n                            component={PasswordField}\r\n                            autoFocus={false}\r\n                            validate={validate}\r\n                        />\r\n\r\n                        {/* <Field\r\n                            name=\"Show password\"\r\n                            type=\"checkbox\"\r\n                            checked={showPassword}\r\n                            component={Checkbox}\r\n                            onChange={toggleShowPassword}\r\n                        /> */}\r\n                        <Grid style={{ paddingTop: \"1rem\" }}>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ModalForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => void;\r\n    onClose: () => void;\r\n    header: string;\r\n    validate: any;\r\n    initialValue: string;\r\n}\r\n\r\nconst PasswordChangeModal: React.FC<Props> = ({ open, onSubmit, onClose, header, validate }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const toggleShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={() => { onClose(); setShowPassword(false); }} showPassword={showPassword} toggleShowPassword={toggleShowPassword} validate={validate} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PasswordChangeModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useStateValue } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PasswordChangeModal from '../PasswordChangeModal';\r\nimport { User } from '../../types';\r\nimport DataChanged from './DataChanged';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\n\r\nconst Password: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }] = useStateValue();\r\n    const [passwordModalOpen, setPasswordModalOpen] = useState<boolean>(false);\r\n    const [passwordChanged, setPasswordChanged] = useState<boolean>(false);\r\n    const [showSuccess, setShowSuccess] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        let nameChangedTimer: ReturnType<typeof setTimeout>;\r\n        if (passwordChanged) {\r\n            setShowSuccess(true);\r\n            nameChangedTimer = setTimeout(() => {\r\n                setShowSuccess(false);\r\n                setPasswordChanged(false);\r\n            }, 7500);\r\n        }\r\n        return () => clearTimeout(nameChangedTimer);\r\n    }, [passwordChanged]);\r\n\r\n    const changePassword = async (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => {\r\n\r\n        if (user) {\r\n            try {\r\n                await userService.changePassword(user.id, values.oldPassword, values.newPassword);\r\n\r\n                setPasswordModalOpen(false);\r\n                setPasswordChanged(true);\r\n            } catch (error) {\r\n                if (error.response.status === 401) {\r\n                    action.setErrors({ oldPassword: \"Invalid password.\" });\r\n                } else {\r\n                    action.setErrors({ newPassword: \"Password is too short. Please use at least 5 characters.\" });\r\n                }\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    const validatePassword = (password: string) => {\r\n        if (password.length < 5) {\r\n            return \"Password is too short. Please use at least 5 characters.\";\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Password</Table.Cell>\r\n                <Table.Cell>{\"********\"}\r\n                    {showSuccess &&\r\n                        <DataChanged />\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setPasswordModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PasswordChangeModal open={passwordModalOpen}\r\n                    onSubmit={changePassword}\r\n                    onClose={() => setPasswordModalOpen(false)}\r\n                    header=\"Change password\"\r\n                    validate={validatePassword}\r\n                    initialValue={\"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell>Password\r\n                    {showSuccess &&\r\n                        <DataChanged />\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}> {\"********\"}</p>\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setPasswordModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n                <PasswordChangeModal open={passwordModalOpen}\r\n                    onSubmit={changePassword}\r\n                    onClose={() => setPasswordModalOpen(false)}\r\n                    header=\"Change password\"\r\n                    validate={validatePassword}\r\n                    initialValue={\"\"}\r\n                />\r\n            </Table.Row >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Password;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStateValue, acceptInvitation, declineInvitation } from '../../state';\r\nimport { Icon, Table, Button, Divider, Header } from 'semantic-ui-react';\r\nimport { ItemList, User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst ListInvitations: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [listInvitations, setListInvitations] = useState<ItemList[]>();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        setListInvitations(user.listInvitations);\r\n\r\n    }, [user]);\r\n\r\n    const acceptListInvitation = async (list: ItemList) => {\r\n        if (user) {\r\n            await acceptInvitation(list, user, dispatch);\r\n            history.push('/list');\r\n        }\r\n    };\r\n\r\n    const declineListInvitation = (list: ItemList) => {\r\n        if (user) {\r\n            declineInvitation(list, user, dispatch);\r\n        }\r\n    };\r\n\r\n    if (!user || !listInvitations) {\r\n        return null;\r\n    }\r\n\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Fragment>\r\n                <Divider style={dividerStyle} horizontal>\r\n                    <Header as='h4'>\r\n                        List Invitations\r\n            </Header>\r\n                </Divider>\r\n                {listInvitations && listInvitations.length === 0 ?\r\n                    <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                    :\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {listInvitations && listInvitations.map((inv) =>\r\n                                <Table.Row key={inv.id}>\r\n                                    <Table.Cell>{inv.name} by {inv.user.name}</Table.Cell>\r\n                                    <Table.Cell textAlign='right'>\r\n                                        <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                            <Icon name='check' />Accept\r\n                                        </Button>\r\n                                        <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)}>\r\n                                            <Icon name='delete' />Decline\r\n                                        </Button>\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>}\r\n            </Fragment>\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Divider style={dividerStyle} horizontal>\r\n                    <Header as='h4'>\r\n                        List Invitations\r\n            </Header>\r\n                </Divider>\r\n                {listInvitations && listInvitations.length === 0 ?\r\n                    <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                    :\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {listInvitations && listInvitations.map((inv) =>\r\n                                <Table.Row key={inv.id}>\r\n                                    <Table.Cell>\r\n                                        <p>{inv.name} by {inv.user.name}</p>\r\n                                        <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                            <Icon name='check' />Accept\r\n                                        </Button>\r\n                                        <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)} floated=\"right\">\r\n                                            <Icon name='delete' />Decline\r\n                                        </Button>\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default ListInvitations;","import React, { useEffect, useState } from 'react';\r\nimport { useStateValue, clearActiveList } from '../../state';\r\nimport { Container, Header, Divider, Table } from 'semantic-ui-react';\r\nimport Name from './Name';\r\nimport Email from './Email';\r\nimport Password from './Password';\r\nimport ListInvitations from './ListInvitations';\r\nimport userService from '../../services/users';\r\nimport { User } from '../../types';\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\n\r\nconst ProfilePage: React.FC = () => {\r\n    const [{ user, isDesktop, activeList }, dispatch] = useStateValue();\r\n    const [userProp, setUserProp] = useState<User>();\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n    const { promiseInProgress } = usePromiseTracker();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        dispatch(clearActiveList());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, user?.listInvitations]);\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        const getUser = async () => {\r\n            if (user) {\r\n                const userToReturn: User = await userService.getUser(user.id);\r\n                if (isMounted) {\r\n                    setUserProp(userToReturn);\r\n                }\r\n            }\r\n        };\r\n        getUser();\r\n        return () => { isMounted = false; };\r\n    }, [user]);\r\n\r\n    if (!user) {\r\n        history.push('/');\r\n    }\r\n    if (!user || !userProp || promiseInProgress) {\r\n        return null;\r\n    }\r\n\r\n    if (activeList) {\r\n        return <Redirect to=\"/list\" />;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            <Divider style={dividerStyle} horizontal>\r\n                <Header as='h4'>\r\n                    Account information\r\n                </Header>\r\n            </Divider>\r\n            <Table definition>\r\n                <Table.Body>\r\n                    <Name user={userProp} />\r\n                    <Email user={userProp} />\r\n                    <Password user={userProp} />\r\n                </Table.Body>\r\n            </Table>\r\n            <ListInvitations user={userProp} />\r\n\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { email: string; password: string }) => void;\r\n}\r\n\r\nexport const ResetForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={true}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.password) {\r\n                    errors.password = \"Field is required.\";\r\n                } else if (values.password.length < 5) {\r\n                    errors.password = \"Password is too short. Please use at least 5 characters.\";\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                            autoFocus={false}\r\n                        />\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                {/* <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button> */}\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default ResetForm;\r\n","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ButtonLink = ({\r\n    className = '',\r\n    ...props\r\n}) => <Button\r\n        basic\r\n        color='blue'\r\n        className={['link', className].join(' ')}\r\n        type=\"button\"\r\n        {...props}\r\n    />;\r\n\r\nButtonLink.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default ButtonLink;","import React, { useState, useEffect } from 'react';\r\nimport { useStateValue, setOpenModalType } from '../../state';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ModalType } from '../../types';\r\nimport ResetForm from './ResetForm';\r\nimport userService from '../../services/users';\r\nimport { Container, Header, Button } from 'semantic-ui-react';\r\nimport ButtonLink from '../ButtonLink';\r\n\r\nconst ResetPassword: React.FC<{}> = () => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const { token } = useParams<{ token: string }>();\r\n    const [validatedUserId, setValidatedUser] = useState<string | undefined>(undefined);\r\n    const [resetSuccessful, setResetSuccessful] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        const validateUser = async () => {\r\n            const response = await userService.validateToken(token);\r\n            setValidatedUser(response.data);\r\n        };\r\n\r\n        validateUser();\r\n    }, [token]);\r\n\r\n    const resetPassword = async (values: { email: string; password: string }) => {\r\n        if (validatedUserId) {\r\n            userService.resetPassword(values.email, values.password);\r\n            setResetSuccessful(true);\r\n        } else {\r\n            // Add error telling about no user found\r\n        }\r\n\r\n    };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"2rem\",\r\n        marginBottom: \"1rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    if (validatedUserId === \"\") {\r\n        return <Container className={isDesktop ? \"cont-style\" : 'cont-style-mobile'} style={isDesktop ? { width: \"60%\" } : {}}>\r\n            <Header as=\"h2\" style={adviceStyle}>Password reset link expired.</Header>\r\n            <div className=\"center-container\">\r\n                <ButtonLink\r\n                    onClick={() => dispatch(setOpenModalType(ModalType.RecoveryModal))}>\r\n                    Click here to request a new one.\r\n                </ButtonLink>\r\n            </div>\r\n        </Container>;\r\n    }\r\n\r\n    if (resetSuccessful) {\r\n        return <Container className={isDesktop ? \"cont-style\" : 'cont-style-mobile'} style={isDesktop ? { width: \"60%\" } : {}}>\r\n            <Header as=\"h2\" style={adviceStyle}>Password changed.</Header>\r\n            <div className=\"center-container\">\r\n                <Button secondary content=\"Login\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} />\r\n            </div>\r\n        </Container>;\r\n    }\r\n\r\n    return <Container className={isDesktop ? \"cont-style\" : 'cont-style-mobile'} style={isDesktop ? { width: \"60%\" } : {}}>\r\n        <Header as=\"h2\" style={adviceStyle}>Set new password</Header>\r\n        <ResetForm\r\n            onSubmit={resetPassword}\r\n        />\r\n    </Container>;\r\n};\r\n\r\n\r\nexport default ResetPassword;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useStateValue, setOpenModalType } from '../state';\r\nimport { Container, Header, Button, Segment } from 'semantic-ui-react';\r\nimport { ModalType } from '../types';\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\n\r\nconst Home: React.FC = () => {\r\n    const [{ user, isDesktop }, dispatch] = useStateValue();\r\n    const contStyle = { padding: \"0 4.6rem\" };\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"4rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    const loginButtonStyle = () => {\r\n        if (isDesktop) {\r\n            return { marginRight: \"1rem\" };\r\n        } else {\r\n            return { marginBottom: \"1rem\" };\r\n        }\r\n    };\r\n\r\n    const registerButtonStyle = () => {\r\n        if (isDesktop) {\r\n            return { marginLeft: \"1rem\" };\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    if (promiseInProgress) {\r\n        return null;\r\n    }\r\n\r\n    if (user) {\r\n        return <Redirect to=\"/list\" />;\r\n        // return (\r\n        //     <Container style={contStyle}>\r\n        //         <Header as=\"h2\" style={adviceStyle}>Create or select a list. *home*</Header>\r\n        //     </Container>\r\n        // );\r\n    }\r\n\r\n    return (\r\n        <Container style={contStyle}>\r\n            <Header as=\"h2\" style={adviceStyle}>Please login or register to use the site.</Header>\r\n            <Segment basic textAlign={\"center\"}>\r\n                <Button style={loginButtonStyle()} secondary content=\"Login\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} />\r\n                <Button style={registerButtonStyle()} secondary content=\"Register\" onClick={() => dispatch(setOpenModalType(ModalType.RegisterModal))} />\r\n            </Segment>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\nimport { setOpenModalType, useStateValue } from '../../state';\r\nimport { ModalType } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    loginFailed: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = ({ onSubmit, onCancel, loginFailed }) => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={false}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username or email\"\r\n                            placeholder=\"Username / email\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        {loginFailed &&\r\n                            <Message negative>\r\n                                <p>Invalid username or password.</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                            <ButtonLink\r\n                                onClick={() => dispatch(setOpenModalType(ModalType.RecoveryModal))}>\r\n                                Forgot password?\r\n                            </ButtonLink>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, login, setOpenModalType } from '../../state';\r\nimport LoginForm from './LoginForm';\r\nimport { ModalType } from '../../types';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst LoginModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [loginFailed, setLoginFailed] = useState(false);\r\n    const history = useHistory();\r\n\r\n\r\n    const Login = async (values: { name: string; password: string }) => {\r\n        try {\r\n            await login(values.name, values.password, dispatch);\r\n            dispatch(setOpenModalType(ModalType.None));\r\n            setLoginFailed(false);\r\n            history.push('/list');\r\n        } catch (error) {\r\n            setLoginFailed(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={() => dispatch(setOpenModalType(ModalType.None))} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Login</Modal.Header>\r\n            <Modal.Content>\r\n                <LoginForm onSubmit={Login} onCancel={() => dispatch(setOpenModalType(ModalType.None))} loginFailed={loginFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default LoginModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\nimport { setOpenModalType, useStateValue } from '../../state';\r\nimport { ModalType } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; email: string; password: string }, action: FormikHelpers<{ name: string; email: string; password: string }>) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const RegisterForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={true}\r\n            validateOnBlur={true}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = \"Field is required\";\r\n                }\r\n                if (values.name.length < 3) {\r\n                    errors.name = \"Name is too short. Please use at least 3 characters.\";\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = \"Field is required\";\r\n                }\r\n                if (values.password.length < 5) {\r\n                    errors.password = \"Password is too short. Please use at least 5 characters\";\r\n                }\r\n                if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username\"\r\n                            placeholder=\"Username\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Optional email address. Can be added later in account settings\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                        />\r\n                        {/* {registerFailed &&\r\n                            <Message negative>\r\n                                <p>{registerFailed}</p>\r\n                            </Message>} */}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                            <ButtonLink\r\n                                onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))}>\r\n                                Already have an account? Click here to login.\r\n                            </ButtonLink>\r\n                        </div>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, register, setOpenModalType } from '../../state';\r\nimport { ModalType } from '../../types';\r\nimport RegisterForm from './RegisterForm';\r\nimport { FormikHelpers } from \"formik\";\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst RegisterModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    const closeModal = () => {\r\n        dispatch(setOpenModalType(ModalType.None));\r\n    };\r\n\r\n    // const changeName = async (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => {\r\n\r\n    const Register = async (values: { name: string; email: string; password: string }, action: FormikHelpers<{ name: string; email: string; password: string }>) => {\r\n        try {\r\n            await register(values.name, values.email, values.password, dispatch);\r\n            history.push('/list');\r\n            dispatch(setOpenModalType(ModalType.None));\r\n        } catch (error) {\r\n            if (error.response.data.error) {\r\n                if (error.response.data.error.includes('name')) {\r\n                    action.setErrors({ name: error.response.data.error });\r\n                } else if (error.response.data.error.includes('address')) {\r\n                    action.setErrors({ email: error.response.data.error });\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Register</Modal.Header>\r\n            <Modal.Content>\r\n                <RegisterForm onSubmit={Register} onCancel={closeModal} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n\r\n};\r\n\r\nexport default RegisterModal;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { email: string }) => void;\r\n    onCancel: () => void;\r\n    emailFound: boolean;\r\n    emailNotFound: boolean;\r\n    resetMessage: () => void;\r\n}\r\n\r\nexport const RecoveryForm: React.FC<Props> = ({ onSubmit, onCancel, emailFound, emailNotFound, resetMessage }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={true}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.email) {\r\n                    errors.email = \"Field is required\";\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = \"Invalid email address\";\r\n                }\r\n                resetMessage();\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty, resetForm, values }) => {\r\n                if (emailFound && values.email) {\r\n                    resetForm();\r\n                }\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        {emailFound &&\r\n                            <Message info>\r\n                                <p style={{ textAlign: \"center\" }}>Password reset email sent. Please check your mailbox and follow the link provided to reset your password.</p>\r\n                            </Message>}\r\n                        {emailNotFound &&\r\n                            <Message negative>\r\n                                <p>Email is not in use.</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Send\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default RecoveryForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, setOpenModalType } from '../../state';\r\nimport { ModalType } from '../../types';\r\nimport RecoveryForm from './RecoveryForm';\r\nimport userService from '../../services/users';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst RecoveryModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [emailFound, setEmailFound] = useState(false);\r\n    const [emailNotFound, setEmailNotFound] = useState(false);\r\n\r\n    const closeModal = () => {\r\n        setEmailFound(false);\r\n        setEmailNotFound(false);\r\n        dispatch(setOpenModalType(ModalType.None));\r\n    };\r\n\r\n    const sendMail = async (values: { email: string }) => {\r\n        const response = await userService.requestReset(values.email);\r\n        if (response.status === 200) {\r\n            setEmailNotFound(false);\r\n            setEmailFound(true);\r\n        } else {\r\n            setEmailFound(false);\r\n            setEmailNotFound(true);\r\n        }\r\n\r\n    };\r\n\r\n    const resetMessage = () => {\r\n        setEmailFound(false);\r\n        setEmailNotFound(false);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Request a password reset</Modal.Header>\r\n            <Modal.Content>\r\n                <RecoveryForm\r\n                    onSubmit={sendMail}\r\n                    onCancel={closeModal}\r\n                    emailFound={emailFound}\r\n                    emailNotFound={emailNotFound}\r\n                    resetMessage={resetMessage} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default RecoveryModal;\r\n","import React from 'react';\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst LoadingIndicator: React.FC = () => {\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    if (promiseInProgress) {\r\n        return (\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"80\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\"\r\n                }}\r\n            >\r\n                <Loader type=\"ThreeDots\" color=\"#1b1c1d\" height={80} width={80} />\r\n            </div>);\r\n    }\r\n    return null;\r\n\r\n};\r\n\r\nexport default LoadingIndicator;","import React, { useEffect } from 'react';\nimport {\n    BrowserRouter as Router, Switch, Route\n} from \"react-router-dom\";\nimport { useMediaQuery } from 'react-responsive';\nimport NavBar from './components/NavBar';\nimport ActiveList from './components/ActiveList';\nimport AddListModal from './components/AddListModal';\nimport { useStateValue, setDesktop } from './state';\nimport { Container } from 'semantic-ui-react';\nimport ProfilePage from './components/ProfilePage';\nimport ResetPassword from './components/ResetPassword';\nimport Home from './components/Home';\nimport LoginModal from './components/LoginModal';\nimport RegisterModal from './components/RegisterModal';\nimport RecoveryModal from './components/RecoveryModal';\nimport { ModalType } from './types';\nimport LoadingIndicator from './components/LoadingIndicator';\n\nconst App: React.FC = () => {\n    const [{ modalType }, dispatch] = useStateValue();\n\n    const handleMediaQueryChange = (matches: boolean) => {\n        dispatch(setDesktop(matches));\n    };\n\n    const isDesktop = useMediaQuery({ minDeviceWidth: 900 }, undefined, handleMediaQueryChange);\n\n    useEffect(() => {\n        dispatch(setDesktop(isDesktop));\n    }, [dispatch, isDesktop]);\n\n    return (\n        <Router>\n            <div>\n                <NavBar />\n                <LoadingIndicator />\n                <Container>\n                    <Switch>\n                        <Route path=\"/profile\">\n                            <ProfilePage />\n                        </Route>\n                        <Route path=\"/list\">\n                            <ActiveList />\n                        </Route>\n                        <Route path=\"/users/reset-password/:token\">\n                            <ResetPassword />\n                        </Route>\n                        <Route path=\"/users/reset-password/\">\n                            <p>Test</p>\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                    <AddListModal />\n                    <LoginModal open={modalType === ModalType.LoginModal} />\n                    <RegisterModal open={modalType === ModalType.RegisterModal} />\n                    <RecoveryModal open={modalType === ModalType.RecoveryModal} />\n                </Container>\n            </div >\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\nimport './index.css';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}