{"version":3,"sources":["types.ts","services/lists.tsx","constants.ts","services/users.tsx","state/reducer.tsx","state/state.tsx","components/AddNewList.tsx","components/ShoppingLists.tsx","components/FieldForm.tsx","components/LoginModal/LoginForm.tsx","components/LoginModal/index.tsx","components/LogInOut.tsx","components/RegisterModal/RegisterForm.tsx","components/RegisterModal/index.tsx","components/Register.tsx","components/NavBar.tsx","components/EditListModal/DeleteListModal.tsx","components/EditListModal/InviteGuestForm.tsx","components/EditListModal/InvitedGuests.tsx","components/EditListModal/Guests.tsx","components/EditListModal/index.tsx","components/AddItemModal/AddItemForm.tsx","components/AddItemModal/index.tsx","components/EditItemModal/EditItemForm.tsx","components/EditItemModal/index.tsx","components/Item.tsx","components/ActiveList.tsx","components/AddListModal/AddListForm.tsx","components/AddListModal/index.tsx","components/PromptModal/ModalForm.tsx","components/PromptModal/index.tsx","components/ProfilePage/Name.tsx","components/ProfilePage/Email.tsx","components/ProfilePage/ListInvitations.tsx","components/ProfilePage/index.tsx","App.tsx","index.tsx"],"names":["ModalType","token","config","headers","Authorization","getListsByUser","a","axios","get","listsFromApi","data","addList","name","post","addedList","editList","id","items","put","deleteList","listID","delete","addItem","item","addedItem","deleteItem","itemId","editItem","patch","inviteGuest","guestName","editedList","uninviteGuest","guestId","acceptInvitation","user","declineInvitation","leaveList","removeGuest","setToken","newToken","login","password","response","register","email","getUser","listService","setActiveList","userId","listId","clearActiveList","changeName","changeEmail","setDesktop","desktop","type","payload","setLists","lists","dispatch","userService","userFromApi","list","activeList","guests","map","g","includes","changeActiveList","itemName","newName","newItem","editedItem","resetActiveList","editedUser","guest","changeUserName","loggedUserJSON","window","localStorage","getItem","storedUser","JSON","parse","setItem","stringify","changeUserEmail","initialState","profilePageOpen","listModalOpen","modalType","None","isDesktop","StateContext","createContext","StateProvider","reducer","children","useReducer","state","Provider","value","useStateValue","useContext","AddNewList","Menu","Item","as","onClick","Icon","size","ShoppingLists","useEffect","console","error","fetchLists","setActive","length","Dropdown","text","style","minWidth","key","Divider","Header","TextField","field","label","placeholder","autoFocus","Field","color","PasswordField","LoginForm","onSubmit","onCancel","loginFailed","initialValues","validate","values","errors","isValid","dirty","className","component","Message","negative","Grid","Column","floated","width","Button","disabled","LoginModal","open","onClose","useState","setLoginFailed","closeModal","Login","Modal","centered","closeIcon","Content","LogInOut","loginModalOpen","setLoginModalOpen","setUser","removeItem","discardUser","RegisterForm","registerFailed","test","RegisterModal","setRegisterFailed","Register","registerModalOpen","setRegisterModalOpen","NavBar","borderless","inverted","Container","position","header","DeleteListModal","onConfirm","InviteGuestForm","InvitedGuests","removeInvitation","log","contStyle","padding","invitedGuests","fontWeight","fontSize","Segment","verticalAlign","icon","Guests","isGuest","removeGuestUser","normalStyle","boldStyle","EditListModal","deleteModalOpen","setDeleteModalOpen","removeList","addInvitation","action","setErrors","resetForm","leaveGuestList","Actions","AddItemForm","AddItemModal","addNewItem","e","EditItemForm","EditItemModal","EditItem","onRemove","onEdit","index","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","ActiveList","editListModalOpen","setEditListModalOpen","setEditedItem","addItemModalOpen","setAddItemModalOpen","refContainer","useRef","focusAddButton","current","focus","onDragEnd","result","destination","source","droppableId","newItems","draggedItem","find","i","splice","paddingRight","marginBottom","droppableProps","AddListForm","l","AddListModal","addNewList","placeHolder","initialValue","PromptModal","ModalForm","Name","nameModalOpen","setNameModalOpen","Table","Row","Cell","textAlign","undefined","Email","emailModalOpen","setEmailModalOpen","ListInvitations","listInvitations","setListInvitations","acceptListInvitation","horizontal","paddingBottom","Body","inv","positive","ProfilePage","userProp","setUserProp","userToReturn","definition","App","useMediaQuery","minDeviceWidth","matches","adviceStyle","marginTop","ReactDOM","render","filter","push","document","getElementById"],"mappings":"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","file":"static/js/main.90a6e038.chunk.js","sourcesContent":["export interface ItemType extends Document {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface ItemList {\r\n    id: string;\r\n    name: string;\r\n    items: ItemType[];\r\n    user: User;\r\n    invitedGuests: User[];\r\n    guests: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    name: string;\r\n    email: string | null;\r\n    token: string;\r\n    listInvitations: ItemList[];\r\n    activeList: ItemList;\r\n}\r\n\r\nexport enum ModalType {\r\n    None,\r\n    TestModal\r\n}","import { ItemList, ItemType } from '../types';\r\nimport axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\n\r\nlet token: string | null = null;\r\n\r\nconst config = () => ({ headers: { Authorization: token } });\r\n\r\nconst setToken = (newToken: string) => {\r\n    token = `bearer ${newToken}`;\r\n};\r\n\r\nconst getListsByUser = async () => {\r\n    const { data: listsFromApi } = await axios.get<ItemList[]>(\r\n        `${apiBaseUrl}/lists`, config()\r\n    );\r\n\r\n    return listsFromApi;\r\n};\r\n\r\nconst addList = async (name: string) => {\r\n    const { data: addedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists`, { name }, config()\r\n    );\r\n\r\n    return addedList;\r\n};\r\n\r\nconst editList = async (id: string, items: ItemType[]) => {\r\n    return await axios.put<ItemList>(\r\n        `${apiBaseUrl}/lists/${id}/update`, { items }, config()\r\n    );\r\n};\r\n\r\nconst deleteList = async (listID: string) => {\r\n    await axios.delete(`${apiBaseUrl}/lists/${listID}`, config());\r\n};\r\n\r\nconst addItem = async (listID: string, item: string) => {\r\n    const addedItem = await axios.post<ItemType>(\r\n        `${apiBaseUrl}/lists/${listID}/add-item`, { name: item }, config()\r\n    );\r\n    return addedItem;\r\n};\r\n\r\nconst deleteItem = async (listID: string, itemId: string) => {\r\n    await axios.delete<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/delete-item/${itemId}`, config()\r\n    );\r\n};\r\n\r\nconst editItem = async (listID: string, item: ItemType) => {\r\n    await axios.patch<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/edit-item`, { item }, config()\r\n    );\r\n};\r\n\r\nconst inviteGuest = async (listID: string, guestName: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/invite-guest`, { guestName }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst uninviteGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/uninvite-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst acceptInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/accept-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst declineInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/decline-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst leaveList = async (listID: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/leave-list`, {}, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst removeGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/remove-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nexport default {\r\n    config,\r\n    setToken,\r\n    getListsByUser,\r\n    addList,\r\n    addItem,\r\n    deleteItem,\r\n    editItem,\r\n    deleteList,\r\n    editList,\r\n    inviteGuest,\r\n    uninviteGuest,\r\n    acceptInvitation,\r\n    declineInvitation,\r\n    leaveList,\r\n    removeGuest\r\n};","export const apiBaseUrl = '/api';\r\n// export const apiBaseUrl = 'http://localhost:3001/api';","import axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\nimport listService from './lists';\r\n\r\nconst login = async (name: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/login`, { name, password });\r\n    return response.data;\r\n};\r\n\r\nconst register = async (name: string, email: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/users`, { name, email, password });\r\n    return response.data;\r\n};\r\n\r\nconst getUser = async (id: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/${id}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst setActiveList = async (userId: string, listId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/set-active-list`, { listId }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst clearActiveList = async (userId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/clear-active-list`, {}, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeName = async (userId: string, name: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-name`, { name }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeEmail = async (userId: string, email: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-email`, { email }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nexport default { login, register, getUser, setActiveList, clearActiveList, changeName, changeEmail };","import React from 'react';\r\nimport { State } from \"./state\";\r\nimport { ItemList, ItemType, User } from \"../types\";\r\nimport listService from '../services/lists';\r\nimport userService from '../services/users';\r\n\r\nexport type Action =\r\n    | {\r\n        type: \"SET_DEVICE_TO_DESKTOP\";\r\n        payload: boolean;\r\n    }\r\n    | {\r\n        type: \"SET_LISTS\";\r\n        payload: ItemList[];\r\n    }\r\n    | {\r\n        type: \"SET_ACTIVE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"CLEAR_ACTIVE_LIST\";\r\n    }\r\n    | {\r\n        type: \"ADD_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"EDIT_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"DELETE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"OPEN_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"CLOSE_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"ADD_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"DELETE_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"EDIT_ITEM\";\r\n        payload: { list: ItemList; editedItem: ItemType };\r\n    }\r\n    | {\r\n        type: \"SET_USER\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"DISCARD_USER\";\r\n    }\r\n    | {\r\n        type: \"OPEN_PROFILE_PAGE\";\r\n    }\r\n    | {\r\n        type: \"CLOSE_PROFILE_PAGE\";\r\n    }\r\n    | {\r\n        type: \"INVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"UNINVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"ACCEPT_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"DECLINE_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"LEAVE_LIST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"REMOVE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_NAME\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_EMAIL\";\r\n        payload: { user: User };\r\n    };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case \"SET_DEVICE_TO_DESKTOP\":\r\n            return {\r\n                ...state,\r\n                isDesktop: action.payload\r\n            };\r\n        case \"SET_LISTS\":\r\n            return {\r\n                ...state,\r\n                lists: action.payload\r\n            };\r\n        case \"SET_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"CLEAR_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: null\r\n            };\r\n        case \"OPEN_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: true\r\n            };\r\n        case \"CLOSE_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: false\r\n            };\r\n        case \"ADD_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, action.payload]\r\n            };\r\n        case \"EDIT_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"DELETE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(l => l.id !== action.payload.id),\r\n                activeList: null\r\n            };\r\n        case \"ADD_ITEM\":\r\n            action.payload.list.items.push(action.payload.item);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"DELETE_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.filter(i => i.id !== action.payload.item.id);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"EDIT_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.map(i => i.id === action.payload.editedItem.id ? action.payload.editedItem : i);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"SET_USER\":\r\n            window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(action.payload.user));\r\n            listService.setToken(action.payload.user.token);\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"DISCARD_USER\":\r\n            return {\r\n                ...state,\r\n                user: null\r\n            };\r\n        case \"OPEN_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                profilePageOpen: true\r\n            };\r\n        case \"CLOSE_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                profilePageOpen: false\r\n            };\r\n        case \"INVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"UNINVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"ACCEPT_INVITATION\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"DECLINE_INVITATION\":\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"LEAVE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n            };\r\n        case \"REMOVE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                activeList: action.payload.list\r\n            };\r\n        case \"CHANGE_USER_NAME\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"CHANGE_USER_EMAIL\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setDesktop = (desktop: boolean) => {\r\n    return (\r\n        {\r\n            type: \"SET_DEVICE_TO_DESKTOP\" as \"SET_DEVICE_TO_DESKTOP\",\r\n            payload: desktop\r\n        }\r\n    );\r\n};\r\n\r\nexport const setLists = (lists: ItemList[]) => {\r\n    return (\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const setActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    const list = userFromApi.activeList;\r\n\r\n    if (list) {\r\n        if (list.guests.map(g => g.id).includes(userFromApi.id) || list.user.id === userFromApi.id) {\r\n            dispatch(\r\n                {\r\n                    type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n                    payload: list\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport const changeActiveList = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.setActiveList(user.id, list.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: userFromApi.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const openListModal = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_LIST_MODAL\" as \"OPEN_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeListModal = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_LIST_MODAL\" as \"CLOSE_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const addList = async (name: string, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const addedList = await listService.addList(name);\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    await userService.setActiveList(userFromApi.id, addedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"ADD_LIST\" as \"ADD_LIST\",\r\n            payload: addedList\r\n        }\r\n    );\r\n    dispatch({\r\n        type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n        payload: addedList\r\n    });\r\n};\r\n\r\nexport const editList = async (list: ItemList, items: ItemType[], dispatch: React.Dispatch<Action>) => {\r\n    await listService.editList(list.id, items);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_LIST\" as \"EDIT_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteList(list.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_LIST\" as \"DELETE_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const addItem = async (list: ItemList, itemName: string, dispatch: React.Dispatch<Action>) => {\r\n    const item = (await listService.addItem(list.id, itemName)).data;\r\n    dispatch(\r\n        {\r\n            type: \"ADD_ITEM\" as \"ADD_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteItem = async (list: ItemList, item: ItemType, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteItem(list.id, item.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_ITEM\" as \"DELETE_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const editItem = async (list: ItemList, item: ItemType, newName: string, dispatch: React.Dispatch<Action>) => {\r\n    const newItem = { ...item, name: newName };\r\n    await listService.editItem(list.id, newItem);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_ITEM\" as \"EDIT_ITEM\",\r\n            payload: { list, editedItem: newItem }\r\n        }\r\n    );\r\n};\r\n\r\nexport const setUser = (dispatch: React.Dispatch<Action>) => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const user = JSON.parse(loggedUserJSON);\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const discardUser = (dispatch: React.Dispatch<Action>) => {\r\n    window.localStorage.removeItem('loggedShoppingListAppUser');\r\n    listService.setToken(\"\");\r\n    dispatch(\r\n        {\r\n            type: \"DISCARD_USER\" as \"DISCARD_USER\"\r\n        }\r\n    );\r\n\r\n};\r\n\r\nexport const login = async (name: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    const user = await userService.login(name, password);\r\n    if (user) {\r\n        dispatch(\r\n            {\r\n                type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n            }\r\n        );\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const register = async (name: string, email: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    await userService.register(name, email, password);\r\n    const user = await userService.login(name, password);\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_USER\" as \"SET_USER\",\r\n            payload: { user }\r\n        }\r\n    );\r\n};\r\n\r\nexport const openProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_PROFILE_PAGE\" as \"OPEN_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_PROFILE_PAGE\" as \"CLOSE_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const clearActiveList = () => {\r\n    return (\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const resetActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    await userService.clearActiveList(user.id);\r\n    const lists = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const inviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"INVITE_GUEST\" as \"INVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const uninviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"UNINVITE_GUEST\" as \"UNINVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const acceptInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.acceptInvitation(list.id, user.id);\r\n    const editedUser: User = await userService.getUser(user.id);\r\n    const lists: ItemList[] = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"ACCEPT_INVITATION\" as \"ACCEPT_INVITATION\",\r\n            payload: { list: editedList, user: editedUser }\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n    const activeList: ItemList = await userService.setActiveList(editedUser.id, editedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const declineInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.declineInvitation(list.id, user.id);\r\n    const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"DECLINE_INVITATION\" as \"DECLINE_INVITATION\",\r\n            payload: { list: editedList, user: editedUser }\r\n        }\r\n    );\r\n};\r\n\r\nexport const leaveList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.leaveList(list.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"LEAVE_LIST\" as \"LEAVE_LIST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const removeGuest = async (list: ItemList, guest: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.removeGuest(list.id, guest.id);\r\n    dispatch(\r\n        {\r\n            type: \"REMOVE_GUEST\" as \"REMOVE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeUserName = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_NAME\" as \"CHANGE_USER_NAME\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.name = editedUser.name;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const changeUserEmail = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_EMAIL\" as \"CHANGE_USER_EMAIL\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.email = editedUser.email;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { ItemList, User, ModalType } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n    lists: ItemList[];\r\n    activeList: ItemList | null;\r\n    profilePageOpen: boolean;\r\n    listModalOpen: boolean;\r\n    user: null | User;\r\n    modalType: ModalType;\r\n    isDesktop: boolean;\r\n};\r\n\r\nconst initialState: State = {\r\n    lists: [],\r\n    activeList: null,\r\n    profilePageOpen: false,\r\n    listModalOpen: false,\r\n    user: null,\r\n    modalType: ModalType.None,\r\n    isDesktop: true\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n    initialState,\r\n    () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n    reducer: React.Reducer<State, Action>;\r\n    children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n    reducer,\r\n    children\r\n}: StateProviderProps) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react';\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { useStateValue, openListModal } from '../state';\r\n\r\nconst AddNewList: React.FC = () => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Menu.Item name='newList' as='a' onClick={() => dispatch(openListModal())}>\r\n            <Icon name='add' size='tiny' />\r\n        Add List\r\n        </Menu.Item>\r\n    );\r\n};\r\n\r\nexport default AddNewList;","import React, { useEffect, Fragment } from 'react';\r\nimport AddNewList from './AddNewList';\r\nimport { useStateValue, setActiveList, setLists, changeActiveList, closeProfilePage } from '../state';\r\nimport { ItemList } from '../types';\r\nimport { Dropdown, Icon } from 'semantic-ui-react';\r\nimport listService from '../services/lists';\r\n\r\nconst ShoppingLists: React.FC = () => {\r\n    const [{ lists, activeList, user, profilePageOpen, isDesktop }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const fetchLists = async () => {\r\n            try {\r\n                const listsFromApi = await listService.getListsByUser();\r\n                dispatch(setLists(listsFromApi));\r\n                if (user) {\r\n                    setActiveList(user, dispatch);\r\n                }\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n        fetchLists();\r\n    }, [dispatch, user]);\r\n\r\n\r\n\r\n    const setActive = (list: ItemList) => {\r\n        if (user) {\r\n            changeActiveList(list, user, dispatch);\r\n            dispatch(closeProfilePage());\r\n        }\r\n    };\r\n\r\n    if (lists.length === 0) {\r\n        return <AddNewList />;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Dropdown item text={(activeList && !profilePageOpen) ? activeList.name : 'Select list'} style={{ minWidth: \"11rem\" }}>\r\n                <Dropdown.Menu>\r\n                    {lists.map(list => (\r\n                        <Dropdown.Item key={list.id} onClick={() => setActive(list)}>{list.name}</Dropdown.Item>\r\n                    ))}\r\n                    <Dropdown.Divider />\r\n                    <AddNewList />\r\n                </Dropdown.Menu>\r\n            </Dropdown >\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Dropdown.Header text={'Lists'} style={{ minWidth: \"11rem\" }}>Lists</Dropdown.Header>\r\n\r\n                {lists.map(list => (\r\n                    <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                        {activeList && activeList.id === list.id ?\r\n                            <Icon name=\"selected radio\" size=\"mini\" />\r\n                            :\r\n                            <Icon name=\"circle outline\" size=\"mini\" />\r\n                        }\r\n\r\n                        {list.name}\r\n                    </Dropdown.Item>\r\n                ))}\r\n                <AddNewList />\r\n                <Dropdown.Divider />\r\n            </Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ShoppingLists;","import React from \"react\";\r\nimport { Form as UIForm } from \"semantic-ui-react\";\r\nimport { Field, ErrorMessage, FieldProps } from \"formik\";\r\n\r\ninterface TextProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    autoFocus: boolean;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            <Field placeholder={placeholder} {...field} autoFocus={autoFocus} />\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field>\r\n    );\r\n\r\nexport const PasswordField: React.FC<TextProps> = ({\r\n    field,\r\n    label,\r\n    placeholder\r\n}) => (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            <Field type=\"password\" placeholder={placeholder} {...field} autoFocus={false} />\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field>\r\n    );\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    loginFailed: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = ({ onSubmit, onCancel, loginFailed }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username\"\r\n                            placeholder=\"Username\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        {loginFailed &&\r\n                            <Message negative>\r\n                                <p>Invalid username or password.</p>\r\n                            </Message>}\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, login } from '../../state';\r\nimport LoginForm from './LoginForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst LoginModal: React.FC<Props> = ({ open, onClose }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [loginFailed, setLoginFailed] = useState(false);\r\n\r\n    const closeModal = () => {\r\n        onClose();\r\n        setLoginFailed(false);\r\n    };\r\n\r\n    const Login = async (values: { name: string; password: string }) => {\r\n        try {\r\n            await login(values.name, values.password, dispatch);\r\n            closeModal();\r\n        } catch (error) {\r\n            setLoginFailed(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Login</Modal.Header>\r\n            <Modal.Content>\r\n                <LoginForm onSubmit={Login} onCancel={closeModal} loginFailed={loginFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default LoginModal;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useStateValue, setUser, discardUser, closeProfilePage } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nimport LoginModal from './LoginModal';\r\n\r\ninterface Props {\r\n    onLogin: (values: { name: string; password: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nconst LogInOut: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n    const [loginModalOpen, setLoginModalOpen] = useState(false);\r\n\r\n    const Logout = () => {\r\n        discardUser(dispatch);\r\n        dispatch(closeProfilePage());\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUser(dispatch);\r\n\r\n    }, []);// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <Fragment>\r\n            {user ?\r\n                <Menu.Item type=\"button\" onClick={Logout} color=\"grey\">\r\n                    Logout\r\n                </Menu.Item>\r\n                :\r\n                <Menu.Item type=\"button\" onClick={() => setLoginModalOpen(true)} color=\"grey\">\r\n                    Login\r\n                </Menu.Item>\r\n            }\r\n\r\n            <LoginModal open={loginModalOpen} onClose={() => setLoginModalOpen(false)} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default LogInOut;","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; email: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    registerFailed: boolean;\r\n}\r\n\r\nexport const RegisterForm: React.FC<Props> = ({ onSubmit, onCancel, registerFailed }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username\"\r\n                            placeholder=\"Username\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Optional email adress. Can be added later in account settings\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                        />\r\n                        {registerFailed &&\r\n                            <Message negative>\r\n                                <p>Username already taken.</p>\r\n                            </Message>}\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, register } from '../../state';\r\nimport LoginForm from './RegisterForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst RegisterModal: React.FC<Props> = ({ open, onClose }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [registerFailed, setRegisterFailed] = useState(false);\r\n\r\n    const closeModal = () => {\r\n        onClose();\r\n        setRegisterFailed(false);\r\n    };\r\n\r\n    const Register = async (values: { name: string; email: string; password: string }) => {\r\n        try {\r\n            await register(values.name, values.email, values.password, dispatch);\r\n            onClose();\r\n        } catch (error) {\r\n            setRegisterFailed(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Register</Modal.Header>\r\n            <Modal.Content>\r\n                <LoginForm onSubmit={Register} onCancel={closeModal} registerFailed={registerFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default RegisterModal;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { useStateValue } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nimport RegisterModal from './RegisterModal';\r\n\r\nconst Register: React.FC = () => {\r\n    const [{ user }] = useStateValue();\r\n    const [registerModalOpen, setRegisterModalOpen] = useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n            {!user ?\r\n                <Menu.Item type=\"button\" onClick={() => setRegisterModalOpen(true)} color=\"grey\">\r\n                    Register\r\n                </Menu.Item>\r\n                :\r\n                null\r\n            }\r\n\r\n            <RegisterModal open={registerModalOpen} onClose={() => setRegisterModalOpen(false)} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Register;","import React from 'react';\r\nimport ShoppingLists from './ShoppingLists';\r\nimport { Menu, Container, Icon, Dropdown } from 'semantic-ui-react';\r\nimport LogInOut from './LogInOut';\r\nimport Register from './Register';\r\nimport { useStateValue, openProfilePage } from '../state';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const [{ user, isDesktop }, dispatch] = useStateValue();\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Menu borderless inverted size=\"massive\">\r\n                <Container>\r\n                    <Menu.Item position='left' header>\r\n                        <Icon name=\"list alternate outline\" size=\"large\" />\r\n                    Shopping List\r\n                </Menu.Item>\r\n                    <Menu.Menu position='right'>\r\n                        {user && <ShoppingLists />}\r\n                        {user &&\r\n                            <Menu.Item type=\"button\" onClick={() => dispatch(openProfilePage())} color=\"grey\">\r\n                                <Icon name=\"user\" size=\"large\" />\r\n                                {user.name}\r\n                            </Menu.Item>\r\n                        }\r\n                        <LogInOut />\r\n                        <Register />\r\n                    </Menu.Menu>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    } else {\r\n        return (\r\n            <Menu borderless inverted size=\"huge\" >\r\n                <Container>\r\n                    <Menu.Item header className=\"mobile-logo\">\r\n                        <Icon name=\"list alternate outline\" size=\"large\" />\r\n                        Shopping List\r\n                    </Menu.Item>\r\n                    <Dropdown item text=\"Menu\" className=\"mobile-menu\">\r\n                        <Dropdown.Menu>\r\n                            {user && <ShoppingLists />}\r\n                            {user &&\r\n                                <Dropdown.Item type=\"button\" onClick={() => dispatch(openProfilePage())} color=\"grey\">\r\n                                    <Icon name=\"user\" size=\"large\" />\r\n                                    {user.name}\r\n                                </Dropdown.Item>\r\n                            }\r\n                            <LogInOut />\r\n                            <Register />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Container>\r\n            </Menu >\r\n        );\r\n    }\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { Modal, Button, Grid } from 'semantic-ui-react';\r\nimport { ItemList } from '../../types';\r\n\r\nconst DeleteListModal: React.FC<{ open: boolean; list: ItemList; onConfirm: () => void; onClose: () => void }> = ({ open, onConfirm, onClose, list }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Really delete list {list.name}?</Modal.Header>\r\n            <Modal.Content>\r\n                <Grid>\r\n                    <Grid.Column floated=\"left\" width={5}>\r\n                        <Button type=\"button\" onClick={onConfirm} color=\"red\">\r\n                            Yes\r\n                    </Button>\r\n                    </Grid.Column>\r\n                    <Grid.Column floated=\"right\" width={5}>\r\n                        <Button floated=\"right\" type=\"button\" onClick={onClose} color=\"grey\">\r\n                            No\r\n                    </Button>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeleteListModal;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: any;\r\n}\r\n\r\nexport const InviteGuestForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        // validate={values => {\r\n        //     const requiredError = \"Field is required\";\r\n        //     const errors: { [field: string]: string } = {};\r\n        //     if (!values.name) {\r\n        //         errors.name = requiredError;\r\n        //     }\r\n        //     return errors;\r\n        // }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Invite a user\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            {/* <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column> */}\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"left\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Invite\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default InviteGuestForm;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport listService from '../../services/lists';\r\nimport { uninviteGuest, changeActiveList, useStateValue } from '../../state';\r\n\r\nconst InvitedGuests: React.FC<{ list: ItemList }> = ({ list }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeInvitation = async (guest: User) => {\r\n        try {\r\n            const editedList = await listService.uninviteGuest(list.id, guest.id);\r\n            dispatch(uninviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n\r\n    if (list.invitedGuests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n                <p style={normalStyle}>List has no pending invitations.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n            {list.invitedGuests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeInvitation(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default InvitedGuests;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport { removeGuest, useStateValue } from '../../state';\r\n\r\nconst Guests: React.FC<{ list: ItemList; isGuest: boolean }> = ({ list, isGuest }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeGuestUser = async (guest: User) => {\r\n        try {\r\n            removeGuest(list, guest, dispatch);\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n    const boldStyle = {\r\n        fontSize: \"1rem\",\r\n        fontWeight: \"bold\"\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (list.guests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                <p style={normalStyle}>List has no guest users.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    // user is guest on the said list\r\n    if (isGuest) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                {list.guests.map(g =>\r\n                    <Segment size=\"mini\" key={g.id}>\r\n                        <span style={g.id === user.id ? boldStyle : normalStyle}>{g.name}</span>\r\n                    </Segment>\r\n                )\r\n                }\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n            {list.guests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeGuestUser(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Guests;","import React, { useState, Fragment } from 'react';\r\nimport { Modal, Button, Icon, Divider, Segment } from 'semantic-ui-react';\r\nimport { useStateValue, deleteList, inviteGuest, changeActiveList, leaveList, resetActiveList } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport DeleteListModal from './DeleteListModal';\r\nimport InviteGuestForm from './InviteGuestForm';\r\nimport InvitedGuests from './InvitedGuests';\r\nimport Guests from './Guests';\r\nimport listService from '../../services/lists';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditListModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeList = async () => {\r\n        setDeleteModalOpen(false);\r\n        onClose();\r\n        try {\r\n            deleteList(list, dispatch);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const addInvitation = async (values: { name: string }, action: any) => {\r\n        if (list.guests.map(g => g.name).includes(values.name) ||\r\n            list.invitedGuests.map(g => g.name).includes(values.name)) {\r\n            return action.setErrors({ name: \"User is already invited to the list.\" });\r\n        }\r\n        try {\r\n            const editedList = await listService.inviteGuest(list.id, values.name);\r\n            dispatch(inviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n            action.resetForm();\r\n        } catch (error) {\r\n            action.setErrors({ name: \"User does not exist.\" });\r\n        }\r\n    };\r\n    const leaveGuestList = async () => {\r\n        try {\r\n\r\n            if (user) {\r\n                leaveList(list, dispatch);\r\n                resetActiveList(user, dispatch);\r\n                onClose();\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const usersModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: \"bold\" }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\", fontWeight: \"bold\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={false} />\r\n                <Divider />\r\n                <InvitedGuests list={list} />\r\n                <Divider />\r\n                <InviteGuestForm onSubmit={addInvitation} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    const guestsModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={true} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    if (user) {\r\n        if (list.guests.map(g => g.id).includes(user.id)) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {guestsModal()}\r\n                        <Button color=\"orange\" onClick={leaveGuestList}>\r\n                            <Icon name='delete' />Leave list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        } else if (list.user.id === user.id) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {usersModal()}\r\n                        <Button color=\"red\" onClick={() => setDeleteModalOpen(true)}>\r\n                            <Icon name='delete' />Delete list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        }\r\n    }\r\n\r\n    console.log(user);\r\n    console.log(list);\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n            <Modal.Header>Login to edit the list</Modal.Header>\r\n            <Modal.Actions>\r\n                <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                    Cancel\r\n            </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddItemForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Item\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, addItem } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport AddItemForm from './AddItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst AddItemModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const addNewItem = async (values: { name: string }) => {\r\n        try {\r\n            addItem(list, values.name, dispatch);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add item</Modal.Header>\r\n            <Modal.Content>\r\n                <AddItemForm onSubmit={addNewItem} onCancel={onClose} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default AddItemModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { ItemType } from '../../types';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n    item: ItemType | null;\r\n}\r\n\r\nexport const EditItemForm: React.FC<Props> = ({ onSubmit, onCancel, item }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: item ? item.name : \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default EditItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, editItem } from '../../state';\r\nimport { ItemList, ItemType } from '../../types';\r\nimport EditItemForm from './EditItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    item: ItemType | null;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditItemModal: React.FC<Props> = ({ open, onClose, item, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const EditItem = async (values: { name: string }) => {\r\n        try {\r\n            if (item) {\r\n                editItem(list, item, values.name, dispatch);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Edit item</Modal.Header>\r\n            <Modal.Content>\r\n                <EditItemForm onSubmit={EditItem} onCancel={onClose} item={item} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default EditItemModal;\r\n","import React from 'react';\r\nimport { Button, Icon, Segment, Grid } from 'semantic-ui-react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ItemType } from '../types';\r\nimport { useStateValue } from '../state';\r\n\r\ninterface Props {\r\n    item: ItemType;\r\n    onRemove: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    onEdit: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    index: number;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ item, onRemove, onEdit, index }) => {\r\n    const [{ isDesktop }] = useStateValue();\r\n    return (\r\n        <Draggable draggableId={item.id} index={index} >\r\n            {(provided) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}>\r\n                    <Segment>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                                <span>{item.name}</span>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={10} className={!isDesktop ? \"item-button-container-mobile\" : \"\"}>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"red\" onClick={onRemove} icon>\r\n                                    <Icon name=\"delete\" />\r\n                                </Button>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"olive\" onClick={onEdit} icon>\r\n                                    <Icon name=\"edit\" />\r\n                                </Button>\r\n                            </Grid.Column>\r\n\r\n                        </Grid>\r\n\r\n                    </Segment>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Item;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useStateValue, deleteItem, editList } from '../state';\r\nimport { Container, Header, Divider, Button, Icon } from 'semantic-ui-react';\r\nimport EditListModal from './EditListModal';\r\nimport AddItemModal from './AddItemModal';\r\nimport EditItemModal from './EditItemModal';\r\nimport Item from './Item';\r\nimport { ItemType } from '../types';\r\n\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst ActiveList: React.FC = () => {\r\n    const [editListModalOpen, setEditListModalOpen] = useState<boolean>(false);\r\n    const [editedItem, setEditedItem] = useState<ItemType | null>(null);\r\n    const [addItemModalOpen, setAddItemModalOpen] = useState<boolean>(false);\r\n    const [{ activeList, isDesktop }, dispatch] = useStateValue();\r\n    const refContainer = useRef<Button>(null);\r\n\r\n    const focusAddButton = () => {\r\n        if (refContainer && refContainer.current) {\r\n            refContainer.current.focus();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        focusAddButton();\r\n    }, [activeList]);\r\n\r\n    const removeItem = async (item: ItemType) => {\r\n        if (activeList) {\r\n            try {\r\n                deleteItem(activeList, item, dispatch);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDragEnd = async (result: DropResult) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        const items = activeList?.items;\r\n        if (items && activeList) {\r\n            const newItems = [...items];\r\n            const draggedItem = newItems.find(i => i.id === draggableId);\r\n            if (draggedItem) {\r\n                newItems.splice(source.index, 1);\r\n                newItems.splice(destination.index, 0, draggedItem);\r\n                activeList.items = newItems;\r\n            }\r\n\r\n            try {\r\n                editList(activeList, newItems, dispatch);\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    if (!activeList || !activeList.items) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            {<Header as=\"h3\" style={{ paddingRight: \"1rem\", marginBottom: 0 }}>{activeList.name}</Header>}\r\n            <Divider />\r\n            {activeList.items.length === 0 ? 'List has no items' :\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId={activeList.id}>\r\n                        {(provided) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}>\r\n                                {activeList.items.map((item, index) => (\r\n                                    <Item\r\n                                        index={index}\r\n                                        key={item.id}\r\n                                        item={item}\r\n                                        onRemove={() => removeItem(item)}\r\n                                        onEdit={() => setEditedItem(item)}\r\n                                    />))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>}\r\n            <EditListModal open={editListModalOpen} onClose={() => setEditListModalOpen(false)} list={activeList} />\r\n            <AddItemModal open={addItemModalOpen} onClose={() => { setAddItemModalOpen(false); focusAddButton(); }} list={activeList} />\r\n            <EditItemModal open={editedItem ? true : false} onClose={() => setEditedItem(null)} list={activeList} item={editedItem} />\r\n            <Divider />\r\n            <Button floated=\"left\" color='olive' onClick={() => setEditListModalOpen(true)}>\r\n                <Icon name='edit' />Edit\r\n            </Button>\r\n            <Button color=\"green\" floated=\"right\" onClick={() => setAddItemModalOpen(true)} ref={refContainer}>\r\n                <Icon name=\"add\" />Add Item\r\n            </Button>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default ActiveList;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { useStateValue } from '../../state';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddListForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    const [{ lists }] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const uniqueViolationError = 'List with that name already exists';\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (lists.map(l => l.name).includes(values.name)) {\r\n                    errors.name = uniqueViolationError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the list\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddListForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport AddListForm from './AddListForm';\r\nimport { useStateValue, closeListModal, addList } from '../../state';\r\n\r\nconst AddListModal: React.FC = () => {\r\n    const [{ listModalOpen, user }, dispatch] = useStateValue();\r\n\r\n    const addNewList = async (values: { name: string }) => {\r\n        dispatch(closeListModal());\r\n        try {\r\n            if (user) {\r\n                addList(values.name, user, dispatch);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={listModalOpen} onClose={() => dispatch(closeListModal())} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add a new list</Modal.Header>\r\n            <Modal.Content>\r\n                <AddListForm onSubmit={addNewList} onCancel={() => dispatch(closeListModal())} />\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }, action: FormikHelpers<{ name: string }>) => void;\r\n    onCancel: () => void;\r\n    label: string;\r\n    placeHolder: string;\r\n    validate: any;\r\n    initialValue: string;\r\n}\r\n\r\nexport const AddItemForm: React.FC<Props> = ({ onSubmit, onCancel, label, placeHolder, validate, initialValue }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: initialValue,\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={validate}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label={label}\r\n                            placeholder={placeHolder}\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { name: string }, action: FormikHelpers<{ name: string }>) => void;\r\n    onClose: () => void;\r\n    label: string;\r\n    header: string;\r\n    placeHolder: string;\r\n    validate: any;\r\n    initialValue: string;\r\n}\r\n\r\nconst PromptModal: React.FC<Props> = ({ open, onSubmit, onClose, label, header, placeHolder, validate, initialValue }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={onClose} label={label} placeHolder={placeHolder} validate={validate} initialValue={initialValue} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PromptModal;\r\n","import React, { useState } from 'react';\r\nimport { useStateValue, changeUserName } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\n\r\nconst Name: React.FC<Props> = ({ user }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [nameModalOpen, setNameModalOpen] = useState<boolean>(false);\r\n\r\n    const changeName = async (values: { name: string }, action: FormikHelpers<{ name: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeName(user.id, values.name);\r\n                changeUserName(editedUser, dispatch);\r\n\r\n                setNameModalOpen(false);\r\n            } catch (error) {\r\n                action.setErrors({ name: \"Username already taken.\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Table.Row>\r\n            <Table.Cell width={2}>Username</Table.Cell>\r\n            <Table.Cell>{user.name}</Table.Cell>\r\n            <Table.Cell textAlign='right'>\r\n                <Button color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                    <Icon name='edit' />Edit\r\n                </Button>\r\n            </Table.Cell>\r\n            <PromptModal open={nameModalOpen}\r\n                onSubmit={changeName}\r\n                onClose={() => setNameModalOpen(false)}\r\n                label=\"Enter new name\"\r\n                header=\"Change username\"\r\n                placeHolder=\"Name\"\r\n                validate={undefined}\r\n                initialValue={user.name}\r\n            />\r\n        </Table.Row>\r\n    );\r\n};\r\n\r\nexport default Name;","import React, { useState } from 'react';\r\nimport { useStateValue, changeUserEmail } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst Email: React.FC<Props> = ({ user }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [emailModalOpen, setEmailModalOpen] = useState<boolean>(false);\r\n\r\n    const changeEmail = async (values: { name: string }, action: FormikHelpers<{ name: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeEmail(user.id, values.name);\r\n                changeUserEmail(editedUser, dispatch);\r\n\r\n                setEmailModalOpen(false);\r\n            } catch (error) {\r\n                action.setErrors({ name: \"Email adress already in use.\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const validate = (values: { name: string }) => {\r\n        const errors: { [field: string]: string } = {};\r\n        if (values.name && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.name)) {\r\n            errors.name = 'Invalid email address';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Table.Row>\r\n            <Table.Cell width={2}>Email</Table.Cell>\r\n            <Table.Cell>{user.email ? user.email : \"\"}</Table.Cell>\r\n            <Table.Cell textAlign='right'>\r\n                <Button color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                    <Icon name='edit' />Edit\r\n                </Button>\r\n            </Table.Cell>\r\n            <PromptModal\r\n                open={emailModalOpen}\r\n                onSubmit={changeEmail}\r\n                onClose={() => setEmailModalOpen(false)}\r\n                label=\"Email adress\"\r\n                header=\"Change email\"\r\n                placeHolder=\"Email\"\r\n                validate={validate}\r\n                initialValue={user.email ? user.email : \"\"}\r\n            />\r\n        </Table.Row>\r\n    );\r\n};\r\n\r\nexport default Email;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useStateValue, acceptInvitation, declineInvitation, closeProfilePage } from '../../state';\r\nimport { Icon, Table, Button, Divider, Header } from 'semantic-ui-react';\r\nimport { ItemList, User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst ListInvitations: React.FC<Props> = ({ user }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [listInvitations, setListInvitations] = useState<ItemList[]>();\r\n\r\n    useEffect(() => {\r\n        setListInvitations(user.listInvitations);\r\n\r\n    }, [user]);\r\n\r\n    const acceptListInvitation = async (list: ItemList) => {\r\n        if (user) {\r\n            await acceptInvitation(list, user, dispatch);\r\n            dispatch(closeProfilePage());\r\n        }\r\n    };\r\n\r\n    const declineListInvitation = (list: ItemList) => {\r\n        if (user) {\r\n            declineInvitation(list, user, dispatch);\r\n        }\r\n    };\r\n\r\n    if (!user || !listInvitations) {\r\n        return null;\r\n    }\r\n\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Divider style={dividerStyle} horizontal>\r\n                <Header as='h4'>\r\n                    List Invitations\r\n            </Header>\r\n            </Divider>\r\n            {listInvitations && listInvitations.length === 0 ?\r\n                <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                :\r\n                <Table>\r\n                    <Table.Body>\r\n                        {listInvitations && listInvitations.map((inv) =>\r\n                            <Table.Row key={inv.id}>\r\n                                <Table.Cell>{inv.name} by {inv.user.name}</Table.Cell>\r\n                                <Table.Cell textAlign='right'>\r\n                                    <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                        <Icon name='check' />Accept\r\n                                </Button>\r\n                                    <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)}>\r\n                                        <Icon name='delete' />Decline\r\n                                </Button>\r\n                                </Table.Cell>\r\n                            </Table.Row>)}\r\n                    </Table.Body>\r\n                </Table>}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ListInvitations;","import React, { useEffect, useState } from 'react';\r\nimport { useStateValue, clearActiveList } from '../../state';\r\nimport { Container, Header, Divider, Table } from 'semantic-ui-react';\r\nimport Name from './Name';\r\nimport Email from './Email';\r\nimport ListInvitations from './ListInvitations';\r\nimport userService from '../../services/users';\r\nimport { User } from '../../types';\r\n\r\nconst ProfilePage: React.FC = () => {\r\n    const [{ user, profilePageOpen }, dispatch] = useStateValue();\r\n    const [userProp, setUserProp] = useState<User>();\r\n    const contStyle = { padding: \"0 4.6rem\" };\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n\r\n    useEffect(() => {\r\n        if (profilePageOpen) {\r\n            dispatch(clearActiveList());\r\n        }\r\n    }, [dispatch, profilePageOpen]);\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            if (user) {\r\n                const userToReturn: User = await userService.getUser(user.id);\r\n                setUserProp(userToReturn);\r\n            }\r\n        };\r\n        getUser();\r\n    }, [user]);\r\n\r\n    if (!user || !userProp) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Container style={contStyle}>\r\n            <Divider style={dividerStyle} horizontal>\r\n                <Header as='h4'>\r\n                    Account information\r\n                </Header>\r\n            </Divider>\r\n            <Table definition>\r\n                <Table.Body>\r\n                    <Name user={userProp} />\r\n                    <Email user={userProp} />\r\n                </Table.Body>\r\n            </Table>\r\n            <ListInvitations user={userProp} />\r\n\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport NavBar from './components/NavBar';\nimport ActiveList from './components/ActiveList';\nimport AddListModal from './components/AddListModal';\nimport { useStateValue, setDesktop } from './state';\nimport { Container, Header } from 'semantic-ui-react';\nimport ProfilePage from './components/ProfilePage';\n\nconst App: React.FC = () => {\n    const [{ user, profilePageOpen }, dispatch] = useStateValue();\n\n    const handleMediaQueryChange = (matches: boolean) => {\n        dispatch(setDesktop(matches));\n    };\n\n    const isDesktop = useMediaQuery({ minDeviceWidth: 900 }, undefined, handleMediaQueryChange);\n\n    useEffect(() => {\n        dispatch(setDesktop(isDesktop));\n    }, [dispatch, isDesktop]);\n\n    const contStyle = { padding: \"0 4.6rem\" };\n\n    const adviceStyle =\n    {\n        marginTop: \"4rem\",\n        textAlign: \"center\"\n    };\n\n    const pageToRender = () => {\n        if (user) {\n            if (profilePageOpen) {\n                return <ProfilePage />;\n            } else {\n                return <ActiveList />;\n            }\n\n        }\n        return (\n            <Container style={contStyle}>\n                <Header as=\"h2\" style={adviceStyle}>Please login to use the site.</Header>\n            </Container>\n        );\n    };\n\n    return (\n        <div>\n            <NavBar />\n            <Container>\n                {pageToRender()}\n                <AddListModal />\n            </Container>\n        </div >\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\nimport './index.css';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}