{"version":3,"sources":["types.ts","services/lists.tsx","constants.ts","services/users.tsx","state/reducer.tsx","state/state.tsx","components/AddNewList.tsx","components/ShoppingLists.tsx","components/LogInOut.tsx","components/Register.tsx","components/NavBar.tsx","components/EditListModal/DeleteListModal.tsx","components/FieldForm.tsx","components/EditListModal/InviteGuestForm.tsx","components/EditListModal/InvitedGuests.tsx","components/EditListModal/Guests.tsx","components/EditListModal/index.tsx","components/AddItemModal/AddItemForm.tsx","components/AddItemModal/index.tsx","components/EditItemModal/EditItemForm.tsx","components/EditItemModal/index.tsx","components/Item.tsx","components/ActiveList.tsx","components/AddListModal/AddListForm.tsx","components/AddListModal/index.tsx","components/PromptModal/ModalForm.tsx","components/PromptModal/index.tsx","components/ProfilePage/Name.tsx","components/ProfilePage/Email.tsx","components/PasswordChangeModal/ModalForm.tsx","components/PasswordChangeModal/index.tsx","components/ProfilePage/Password.tsx","components/ProfilePage/ListInvitations.tsx","components/ProfilePage/index.tsx","components/ButtonLink.tsx","components/LoginModal/LoginForm.tsx","components/LoginModal/index.tsx","components/RegisterModal/RegisterForm.tsx","components/RegisterModal/index.tsx","components/RecoveryModal/RecoveryForm.tsx","components/RecoveryModal/index.tsx","components/Home.tsx","App.tsx","index.tsx"],"names":["ModalType","token","config","headers","Authorization","getListsByUser","a","axios","get","listsFromApi","data","addList","name","post","addedList","editList","id","items","put","deleteList","listID","delete","addItem","item","addedItem","deleteItem","itemId","editItem","patch","inviteGuest","guestName","editedList","uninviteGuest","guestId","acceptInvitation","user","declineInvitation","leaveList","removeGuest","setToken","newToken","login","password","response","register","email","getUser","listService","getUserByEmail","setActiveList","userId","listId","clearActiveList","changeName","changeEmail","changePassword","oldPassword","newPassword","resetPassword","setDesktop","desktop","type","payload","setLists","lists","dispatch","userService","userFromApi","list","activeList","guests","map","g","includes","changeActiveList","itemName","newName","newItem","editedItem","resetActiveList","editedUser","guest","changeUserName","loggedUserJSON","window","localStorage","getItem","storedUser","JSON","parse","setItem","stringify","changeUserEmail","setOpenModalType","modalType","modal","initialState","listModalOpen","None","isDesktop","StateContext","createContext","StateProvider","reducer","children","useReducer","state","Provider","value","useStateValue","useContext","AddNewList","Menu","Item","as","onClick","Icon","size","ShoppingLists","history","useHistory","location","useLocation","useEffect","console","error","fetchLists","setActive","push","length","Dropdown","text","pathname","style","minWidth","key","Divider","Header","LogInOut","setUser","removeItem","discardUser","color","LoginModal","Register","RegisterModal","NavBar","borderless","inverted","Container","position","header","className","DeleteListModal","open","onConfirm","onClose","Modal","centered","closeIcon","Content","Grid","Column","floated","width","Button","TextField","field","label","placeholder","autoFocus","Field","PasswordField","Checkbox","checked","onChange","InviteGuestForm","onSubmit","initialValues","isValid","dirty","component","disabled","InvitedGuests","removeInvitation","log","contStyle","padding","invitedGuests","fontWeight","fontSize","Segment","verticalAlign","icon","Guests","isGuest","removeGuestUser","normalStyle","boldStyle","EditListModal","useState","deleteModalOpen","setDeleteModalOpen","removeList","addInvitation","values","action","setErrors","resetForm","leaveGuestList","Actions","AddItemForm","onCancel","validate","errors","AddItemModal","addNewItem","e","EditItemForm","EditItemModal","EditItem","onRemove","onEdit","index","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","ActiveList","editListModalOpen","setEditListModalOpen","setEditedItem","addItemModalOpen","setAddItemModalOpen","refContainer","useRef","focusAddButton","current","focus","onDragEnd","result","destination","source","droppableId","newItems","draggedItem","find","i","splice","paddingRight","marginBottom","droppableProps","marginTop","textAlign","AddListForm","l","AddListModal","addNewList","ModalForm","placeHolder","initialValue","validateOnChange","PromptModal","Name","nameModalOpen","setNameModalOpen","Table","Row","Cell","undefined","paddingTop","paddingBottom","display","gridTemplateColumns","textJustify","lineHeight","justifySelf","Email","emailModalOpen","setEmailModalOpen","test","showPassword","toggleShowPassword","validateOnBlur","PasswordChangeModal","setShowPassword","Password","passwordModalOpen","setPasswordModalOpen","validatePassword","ListInvitations","listInvitations","setListInvitations","acceptListInvitation","declineListInvitation","dividerStyle","horizontal","Body","inv","positive","negative","ProfilePage","userProp","setUserProp","userToReturn","definition","ButtonLink","props","basic","join","LoginForm","loginFailed","Message","RecoveryModal","setLoginFailed","Login","RegisterForm","registerFailed","setRegisterFailed","closeModal","RecoveryForm","onOpenLoginModal","emailFound","emailNotFound","resetMessage","info","setEmailFound","setEmailNotFound","sendMail","Home","adviceStyle","marginRight","secondary","content","marginLeft","App","useMediaQuery","minDeviceWidth","matches","path","ReactDOM","render","filter","document","getElementById"],"mappings":"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","file":"static/js/main.c9720e09.chunk.js","sourcesContent":["export interface ItemType extends Document {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface ItemList {\r\n    id: string;\r\n    name: string;\r\n    items: ItemType[];\r\n    user: User;\r\n    invitedGuests: User[];\r\n    guests: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    name: string;\r\n    email: string | null;\r\n    token: string;\r\n    listInvitations: ItemList[];\r\n    activeList: ItemList;\r\n}\r\n\r\nexport enum ModalType {\r\n    None,\r\n    TestModal,\r\n    LoginModal,\r\n    RegisterModal,\r\n    RecoveryModal\r\n}","import { ItemList, ItemType } from '../types';\r\nimport axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\n\r\nlet token: string | null = null;\r\n\r\nconst config = () => ({ headers: { Authorization: token } });\r\n\r\nconst setToken = (newToken: string) => {\r\n    token = `bearer ${newToken}`;\r\n};\r\n\r\nconst getListsByUser = async () => {\r\n    const { data: listsFromApi } = await axios.get<ItemList[]>(\r\n        `${apiBaseUrl}/lists`, config()\r\n    );\r\n\r\n    return listsFromApi;\r\n};\r\n\r\nconst addList = async (name: string) => {\r\n    const { data: addedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists`, { name }, config()\r\n    );\r\n\r\n    return addedList;\r\n};\r\n\r\nconst editList = async (id: string, items: ItemType[]) => {\r\n    return await axios.put<ItemList>(\r\n        `${apiBaseUrl}/lists/${id}/update`, { items }, config()\r\n    );\r\n};\r\n\r\nconst deleteList = async (listID: string) => {\r\n    await axios.delete(`${apiBaseUrl}/lists/${listID}`, config());\r\n};\r\n\r\nconst addItem = async (listID: string, item: string) => {\r\n    const addedItem = await axios.post<ItemType>(\r\n        `${apiBaseUrl}/lists/${listID}/add-item`, { name: item }, config()\r\n    );\r\n    return addedItem;\r\n};\r\n\r\nconst deleteItem = async (listID: string, itemId: string) => {\r\n    await axios.delete<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/delete-item/${itemId}`, config()\r\n    );\r\n};\r\n\r\nconst editItem = async (listID: string, item: ItemType) => {\r\n    await axios.patch<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/edit-item`, { item }, config()\r\n    );\r\n};\r\n\r\nconst inviteGuest = async (listID: string, guestName: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/invite-guest`, { guestName }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst uninviteGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/uninvite-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst acceptInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/accept-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst declineInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/decline-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst leaveList = async (listID: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/leave-list`, {}, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst removeGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/remove-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nexport default {\r\n    config,\r\n    setToken,\r\n    getListsByUser,\r\n    addList,\r\n    addItem,\r\n    deleteItem,\r\n    editItem,\r\n    deleteList,\r\n    editList,\r\n    inviteGuest,\r\n    uninviteGuest,\r\n    acceptInvitation,\r\n    declineInvitation,\r\n    leaveList,\r\n    removeGuest\r\n};","export const apiBaseUrl = '/api';\r\n// export const apiBaseUrl = 'http://localhost:3001/api';","import axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\nimport listService from './lists';\r\n\r\nconst login = async (name: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/login`, { name, password });\r\n    return response.data;\r\n};\r\n\r\nconst register = async (name: string, email: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/users`, { name, email, password });\r\n    return response.data;\r\n};\r\n\r\nconst getUser = async (id: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/${id}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst getUserByEmail = async (email: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/find-email/${email}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst setActiveList = async (userId: string, listId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/set-active-list`, { listId }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst clearActiveList = async (userId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/clear-active-list`, {}, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeName = async (userId: string, name: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-name`, { name }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeEmail = async (userId: string, email: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-email`, { email }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changePassword = async (userId: string, oldPassword: string, newPassword: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-password`, { oldPassword, newPassword }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst resetPassword = async (email: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/reset-password`, { email }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nexport default { login, register, getUser, getUserByEmail, setActiveList, clearActiveList, changeName, changeEmail, changePassword, resetPassword };","import React from 'react';\r\nimport { State } from \"./state\";\r\nimport { ItemList, ItemType, User } from \"../types\";\r\nimport listService from '../services/lists';\r\nimport userService from '../services/users';\r\nimport { ModalType } from '../types';\r\n\r\nexport type Action =\r\n    | {\r\n        type: \"SET_DEVICE_TO_DESKTOP\";\r\n        payload: boolean;\r\n    }\r\n    | {\r\n        type: \"SET_LISTS\";\r\n        payload: ItemList[];\r\n    }\r\n    | {\r\n        type: \"SET_ACTIVE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"CLEAR_ACTIVE_LIST\";\r\n    }\r\n    | {\r\n        type: \"ADD_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"EDIT_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"DELETE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"OPEN_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"CLOSE_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"ADD_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"DELETE_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"EDIT_ITEM\";\r\n        payload: { list: ItemList; editedItem: ItemType };\r\n    }\r\n    | {\r\n        type: \"SET_USER\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"DISCARD_USER\";\r\n    }\r\n    | {\r\n        type: \"INVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"UNINVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"ACCEPT_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"DECLINE_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"LEAVE_LIST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"REMOVE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_NAME\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_EMAIL\";\r\n        payload: { user: User };\r\n    } | {\r\n        type: \"SET_OPEN_MODAL_TYPE\";\r\n        payload: { modal: ModalType };\r\n    };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case \"SET_DEVICE_TO_DESKTOP\":\r\n            return {\r\n                ...state,\r\n                isDesktop: action.payload\r\n            };\r\n        case \"SET_LISTS\":\r\n            return {\r\n                ...state,\r\n                lists: action.payload\r\n            };\r\n        case \"SET_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"CLEAR_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: null\r\n            };\r\n        case \"OPEN_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: true\r\n            };\r\n        case \"CLOSE_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: false\r\n            };\r\n        case \"ADD_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, action.payload]\r\n            };\r\n        case \"EDIT_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"DELETE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(l => l.id !== action.payload.id),\r\n                activeList: null\r\n            };\r\n        case \"ADD_ITEM\":\r\n            action.payload.list.items.push(action.payload.item);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"DELETE_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.filter(i => i.id !== action.payload.item.id);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"EDIT_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.map(i => i.id === action.payload.editedItem.id ? action.payload.editedItem : i);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"SET_USER\":\r\n            window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(action.payload.user));\r\n            listService.setToken(action.payload.user.token);\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"DISCARD_USER\":\r\n            return {\r\n                ...state,\r\n                user: null\r\n            };\r\n        case \"INVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"UNINVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"ACCEPT_INVITATION\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"DECLINE_INVITATION\":\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"LEAVE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n            };\r\n        case \"REMOVE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                activeList: action.payload.list\r\n            };\r\n        case \"CHANGE_USER_NAME\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"CHANGE_USER_EMAIL\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"SET_OPEN_MODAL_TYPE\":\r\n            return {\r\n                ...state,\r\n                modalType: action.payload.modal\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setDesktop = (desktop: boolean) => {\r\n    return (\r\n        {\r\n            type: \"SET_DEVICE_TO_DESKTOP\" as \"SET_DEVICE_TO_DESKTOP\",\r\n            payload: desktop\r\n        }\r\n    );\r\n};\r\n\r\nexport const setLists = (lists: ItemList[]) => {\r\n    return (\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const setActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    const list = userFromApi.activeList;\r\n\r\n    if (list) {\r\n        if (list.guests.map(g => g.id).includes(userFromApi.id) || list.user.id === userFromApi.id) {\r\n            dispatch(\r\n                {\r\n                    type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n                    payload: list\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport const changeActiveList = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.setActiveList(user.id, list.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: userFromApi.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const openListModal = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_LIST_MODAL\" as \"OPEN_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeListModal = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_LIST_MODAL\" as \"CLOSE_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const addList = async (name: string, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const addedList = await listService.addList(name);\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    await userService.setActiveList(userFromApi.id, addedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"ADD_LIST\" as \"ADD_LIST\",\r\n            payload: addedList\r\n        }\r\n    );\r\n    dispatch({\r\n        type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n        payload: addedList\r\n    });\r\n};\r\n\r\nexport const editList = async (list: ItemList, items: ItemType[], dispatch: React.Dispatch<Action>) => {\r\n    await listService.editList(list.id, items);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_LIST\" as \"EDIT_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteList(list.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_LIST\" as \"DELETE_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const addItem = async (list: ItemList, itemName: string, dispatch: React.Dispatch<Action>) => {\r\n    const item = (await listService.addItem(list.id, itemName)).data;\r\n    dispatch(\r\n        {\r\n            type: \"ADD_ITEM\" as \"ADD_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteItem = async (list: ItemList, item: ItemType, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteItem(list.id, item.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_ITEM\" as \"DELETE_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const editItem = async (list: ItemList, item: ItemType, newName: string, dispatch: React.Dispatch<Action>) => {\r\n    const newItem = { ...item, name: newName };\r\n    await listService.editItem(list.id, newItem);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_ITEM\" as \"EDIT_ITEM\",\r\n            payload: { list, editedItem: newItem }\r\n        }\r\n    );\r\n};\r\n\r\nexport const setUser = (dispatch: React.Dispatch<Action>) => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const user = JSON.parse(loggedUserJSON);\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const discardUser = (dispatch: React.Dispatch<Action>) => {\r\n    window.localStorage.removeItem('loggedShoppingListAppUser');\r\n    listService.setToken(\"\");\r\n    dispatch(\r\n        {\r\n            type: \"DISCARD_USER\" as \"DISCARD_USER\"\r\n        }\r\n    );\r\n\r\n};\r\n\r\nexport const login = async (name: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    const user = await userService.login(name, password);\r\n    if (user) {\r\n        dispatch(\r\n            {\r\n                type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n            }\r\n        );\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const register = async (name: string, email: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    await userService.register(name, email, password);\r\n    const user = await userService.login(name, password);\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_USER\" as \"SET_USER\",\r\n            payload: { user }\r\n        }\r\n    );\r\n};\r\n\r\nexport const openProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_PROFILE_PAGE\" as \"OPEN_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_PROFILE_PAGE\" as \"CLOSE_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const clearActiveList = () => {\r\n    return (\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const resetActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    await userService.clearActiveList(user.id);\r\n    const lists = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const inviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"INVITE_GUEST\" as \"INVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const uninviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"UNINVITE_GUEST\" as \"UNINVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const acceptInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.acceptInvitation(list.id, user.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    const lists: ItemList[] = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"ACCEPT_INVITATION\" as \"ACCEPT_INVITATION\",\r\n            payload: { list: editedList, user }\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n    const editedUser: User = await userService.setActiveList(user.id, editedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: editedUser.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const declineInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.declineInvitation(list.id, user.id);\r\n    const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"DECLINE_INVITATION\" as \"DECLINE_INVITATION\",\r\n            payload: { list: editedList, user: editedUser }\r\n        }\r\n    );\r\n};\r\n\r\nexport const leaveList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.leaveList(list.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"LEAVE_LIST\" as \"LEAVE_LIST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const removeGuest = async (list: ItemList, guest: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.removeGuest(list.id, guest.id);\r\n    dispatch(\r\n        {\r\n            type: \"REMOVE_GUEST\" as \"REMOVE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeUserName = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_NAME\" as \"CHANGE_USER_NAME\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.name = editedUser.name;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const changeUserEmail = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_EMAIL\" as \"CHANGE_USER_EMAIL\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.email = editedUser.email;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const setOpenModalType = (modalType: ModalType) => {\r\n    return (\r\n        {\r\n            type: \"SET_OPEN_MODAL_TYPE\" as \"SET_OPEN_MODAL_TYPE\",\r\n            payload: { modal: modalType }\r\n        }\r\n    );\r\n};\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { ItemList, User, ModalType } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n    lists: ItemList[];\r\n    activeList: ItemList | null;\r\n    listModalOpen: boolean;\r\n    user: null | User;\r\n    modalType: ModalType;\r\n    isDesktop: boolean;\r\n};\r\n\r\nconst initialState: State = {\r\n    lists: [],\r\n    activeList: null,\r\n    listModalOpen: false,\r\n    user: null,\r\n    modalType: ModalType.None,\r\n    isDesktop: true\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n    initialState,\r\n    () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n    reducer: React.Reducer<State, Action>;\r\n    children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n    reducer,\r\n    children\r\n}: StateProviderProps) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react';\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { useStateValue, openListModal } from '../state';\r\n\r\nconst AddNewList: React.FC = () => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Menu.Item name='newList' as='a' onClick={() => dispatch(openListModal())}>\r\n            <Icon name='add' size='tiny' />\r\n        Add List\r\n        </Menu.Item>\r\n    );\r\n};\r\n\r\nexport default AddNewList;","import React, { useEffect, Fragment } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport AddNewList from './AddNewList';\r\nimport { useStateValue, setActiveList, setLists, changeActiveList } from '../state';\r\nimport { ItemList } from '../types';\r\nimport { Dropdown, Icon } from 'semantic-ui-react';\r\nimport listService from '../services/lists';\r\n\r\nconst ShoppingLists: React.FC = () => {\r\n    const [{ lists, activeList, user, isDesktop }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const fetchLists = async () => {\r\n            try {\r\n                const listsFromApi = await listService.getListsByUser();\r\n                dispatch(setLists(listsFromApi));\r\n                if (user) {\r\n                    setActiveList(user, dispatch);\r\n                }\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n        fetchLists();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    const setActive = (list: ItemList) => {\r\n        if (user) {\r\n            changeActiveList(list, user, dispatch);\r\n            history.push('/list');\r\n        }\r\n    };\r\n\r\n    if (lists.length === 0) {\r\n        return <AddNewList />;\r\n    }\r\n\r\n    const showActiveList = () => {\r\n        if (location.pathname === '/profile' || !activeList) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Dropdown item text={(showActiveList()) ? activeList?.name : 'Select list'} style={{ minWidth: \"11rem\" }}>\r\n                <Dropdown.Menu>\r\n                    {lists.map(list => (\r\n                        <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                            {activeList && activeList.id === list.id ?\r\n                                <Icon name=\"selected radio\" size=\"mini\" />\r\n                                :\r\n                                <Icon name=\"circle outline\" size=\"mini\" />\r\n                            }\r\n\r\n                            {list.name}\r\n                        </Dropdown.Item>\r\n                    ))}\r\n                    <Dropdown.Divider />\r\n                    <AddNewList />\r\n                </Dropdown.Menu>\r\n            </Dropdown >\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Dropdown.Header text={'Lists'} style={{ minWidth: \"11rem\" }}>Lists</Dropdown.Header>\r\n\r\n                {lists.map(list => (\r\n                    <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                        {activeList && activeList.id === list.id ?\r\n                            <Icon name=\"selected radio\" size=\"mini\" />\r\n                            :\r\n                            <Icon name=\"circle outline\" size=\"mini\" />\r\n                        }\r\n\r\n                        {list.name}\r\n                    </Dropdown.Item>\r\n                ))}\r\n                <AddNewList />\r\n                <Dropdown.Divider />\r\n            </Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ShoppingLists;","import React, { Fragment, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStateValue, setUser, discardUser, setOpenModalType } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nimport { ModalType } from '../types';\r\n\r\nconst LogInOut: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    const Logout = () => {\r\n        discardUser(dispatch);\r\n        dispatch(setOpenModalType(ModalType.None));\r\n        history.push('/');\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUser(dispatch);\r\n\r\n    }, []);// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <Fragment>\r\n            {user ?\r\n                <Menu.Item type=\"button\" onClick={Logout} color=\"grey\">\r\n                    Logout\r\n                </Menu.Item>\r\n                :\r\n                <Menu.Item type=\"button\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} color=\"grey\">\r\n                    Login\r\n                </Menu.Item>\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default LogInOut;","import React, { Fragment } from 'react';\r\nimport { useStateValue, setOpenModalType } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { ModalType } from '../types';\r\n\r\nconst Register: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    return (\r\n        <Fragment>\r\n            {!user ?\r\n                <Menu.Item type=\"button\" onClick={() => dispatch(setOpenModalType(ModalType.RegisterModal))} color=\"grey\">\r\n                    Register\r\n                </Menu.Item>\r\n                :\r\n                null\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Register;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ShoppingLists from './ShoppingLists';\r\nimport { Menu, Container, Icon, Dropdown } from 'semantic-ui-react';\r\nimport LogInOut from './LogInOut';\r\nimport Register from './Register';\r\nimport { useStateValue } from '../state';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const [{ user, isDesktop }] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Menu borderless inverted size=\"massive\">\r\n                <Container>\r\n                    <Menu.Item position='left' header>\r\n                        <Icon name=\"list alternate outline\" size=\"large\" />\r\n                    Shopping List\r\n                </Menu.Item>\r\n                    <Menu.Menu position='right'>\r\n                        {user && <ShoppingLists />}\r\n                        {user &&\r\n                            <Menu.Item type=\"button\" onClick={() => history.push('/profile')} color=\"grey\">\r\n                                <Icon name=\"user\" size=\"large\" />\r\n                                {user.name}\r\n                            </Menu.Item>\r\n                        }\r\n                        <LogInOut />\r\n                        <Register />\r\n                    </Menu.Menu>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    } else {\r\n        return (\r\n            <Menu borderless inverted size=\"huge\" >\r\n                <Container>\r\n                    <Menu.Item header className=\"mobile-logo\">\r\n                        <Icon name=\"list alternate outline\" size=\"large\" />\r\n                        Shopping List\r\n                    </Menu.Item>\r\n                    <Dropdown item text=\"Menu\" className=\"mobile-menu\">\r\n                        <Dropdown.Menu>\r\n                            {user && <ShoppingLists />}\r\n                            {user &&\r\n                                <Dropdown.Item type=\"button\" onClick={() => history.push('/profile')} color=\"grey\">\r\n                                    <Icon name=\"user\" size=\"large\" />\r\n                                    {user.name}\r\n                                </Dropdown.Item>\r\n                            }\r\n                            <LogInOut />\r\n                            <Register />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Container>\r\n            </Menu >\r\n        );\r\n    }\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { Modal, Button, Grid } from 'semantic-ui-react';\r\nimport { ItemList } from '../../types';\r\n\r\nconst DeleteListModal: React.FC<{ open: boolean; list: ItemList; onConfirm: () => void; onClose: () => void }> = ({ open, onConfirm, onClose, list }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Really delete list {list.name}?</Modal.Header>\r\n            <Modal.Content>\r\n                <Grid>\r\n                    <Grid.Column floated=\"left\" width={5}>\r\n                        <Button type=\"button\" onClick={onConfirm} color=\"red\">\r\n                            Yes\r\n                    </Button>\r\n                    </Grid.Column>\r\n                    <Grid.Column floated=\"right\" width={5}>\r\n                        <Button floated=\"right\" type=\"button\" onClick={onClose} color=\"grey\">\r\n                            No\r\n                    </Button>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeleteListModal;","import React from \"react\";\r\nimport { Form as UIForm } from \"semantic-ui-react\";\r\nimport { Field, ErrorMessage, FieldProps } from \"formik\";\r\n\r\ninterface TextProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    autoFocus: boolean;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            <Field placeholder={placeholder} {...field} autoFocus={autoFocus} />\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field>\r\n    );\r\n\r\nexport const PasswordField: React.FC<TextProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            <Field type=\"password\" placeholder={placeholder} {...field} autoFocus={autoFocus} />\r\n            {/* <div style={{ color: 'red', minHeight: \"1.3571rem\" }}></div> */}\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field>\r\n    );\r\n\r\ninterface CheckboxProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    type: string;\r\n    checked: boolean;\r\n    onChange: () => void;\r\n}\r\n\r\nexport const Checkbox: React.FC<CheckboxProps> = ({ field, type, checked, onChange }) => {\r\n    return (\r\n        <label>\r\n            {/* remove {...field} to see changes not propagated */}\r\n            <input {...field} type={type} checked={checked} onChange={onChange} />\r\n            {field.name}\r\n        </label>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: any;\r\n}\r\n\r\nexport const InviteGuestForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        // validate={values => {\r\n        //     const requiredError = \"Field is required\";\r\n        //     const errors: { [field: string]: string } = {};\r\n        //     if (!values.name) {\r\n        //         errors.name = requiredError;\r\n        //     }\r\n        //     return errors;\r\n        // }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Invite a user\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            {/* <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column> */}\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"left\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Invite\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default InviteGuestForm;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport listService from '../../services/lists';\r\nimport { uninviteGuest, changeActiveList, useStateValue } from '../../state';\r\n\r\nconst InvitedGuests: React.FC<{ list: ItemList }> = ({ list }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeInvitation = async (guest: User) => {\r\n        try {\r\n            const editedList = await listService.uninviteGuest(list.id, guest.id);\r\n            dispatch(uninviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n\r\n    if (list.invitedGuests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n                <p style={normalStyle}>List has no pending invitations.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n            {list.invitedGuests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeInvitation(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default InvitedGuests;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport { removeGuest, useStateValue } from '../../state';\r\n\r\nconst Guests: React.FC<{ list: ItemList; isGuest: boolean }> = ({ list, isGuest }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeGuestUser = async (guest: User) => {\r\n        try {\r\n            removeGuest(list, guest, dispatch);\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n    const boldStyle = {\r\n        fontSize: \"1rem\",\r\n        fontWeight: \"bold\"\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (list.guests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                <p style={normalStyle}>List has no guest users.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    // user is guest on the said list\r\n    if (isGuest) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                {list.guests.map(g =>\r\n                    <Segment size=\"mini\" key={g.id}>\r\n                        <span style={g.id === user.id ? boldStyle : normalStyle}>{g.name}</span>\r\n                    </Segment>\r\n                )\r\n                }\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n            {list.guests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeGuestUser(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Guests;","import React, { useState, Fragment } from 'react';\r\nimport { Modal, Button, Icon, Divider, Segment } from 'semantic-ui-react';\r\nimport { useStateValue, deleteList, inviteGuest, changeActiveList, leaveList, resetActiveList } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport DeleteListModal from './DeleteListModal';\r\nimport InviteGuestForm from './InviteGuestForm';\r\nimport InvitedGuests from './InvitedGuests';\r\nimport Guests from './Guests';\r\nimport listService from '../../services/lists';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditListModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeList = async () => {\r\n        setDeleteModalOpen(false);\r\n        onClose();\r\n        try {\r\n            deleteList(list, dispatch);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const addInvitation = async (values: { name: string }, action: any) => {\r\n        if (list.guests.map(g => g.name).includes(values.name) ||\r\n            list.invitedGuests.map(g => g.name).includes(values.name)) {\r\n            return action.setErrors({ name: \"User is already invited to the list.\" });\r\n        }\r\n        try {\r\n            const editedList = await listService.inviteGuest(list.id, values.name);\r\n            dispatch(inviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n            action.resetForm();\r\n        } catch (error) {\r\n            action.setErrors({ name: \"User does not exist.\" });\r\n        }\r\n    };\r\n    const leaveGuestList = async () => {\r\n        try {\r\n\r\n            if (user) {\r\n                leaveList(list, dispatch);\r\n                resetActiveList(user, dispatch);\r\n                onClose();\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const usersModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: \"bold\" }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\", fontWeight: \"bold\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={false} />\r\n                <Divider />\r\n                <InvitedGuests list={list} />\r\n                <Divider />\r\n                <InviteGuestForm onSubmit={addInvitation} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    const guestsModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={true} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    if (user) {\r\n        if (list.guests.map(g => g.id).includes(user.id)) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {guestsModal()}\r\n                        <Button color=\"orange\" onClick={leaveGuestList}>\r\n                            <Icon name='delete' />Leave list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        } else if (list.user.id === user.id) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {usersModal()}\r\n                        <Button color=\"red\" onClick={() => setDeleteModalOpen(true)}>\r\n                            <Icon name='delete' />Delete list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n            <Modal.Header>Login to edit the list</Modal.Header>\r\n            <Modal.Actions>\r\n                <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                    Cancel\r\n            </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddItemForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Item\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, addItem } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport AddItemForm from './AddItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst AddItemModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const addNewItem = async (values: { name: string }) => {\r\n        try {\r\n            addItem(list, values.name, dispatch);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add item</Modal.Header>\r\n            <Modal.Content>\r\n                <AddItemForm onSubmit={addNewItem} onCancel={onClose} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default AddItemModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { ItemType } from '../../types';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n    item: ItemType | null;\r\n}\r\n\r\nexport const EditItemForm: React.FC<Props> = ({ onSubmit, onCancel, item }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: item ? item.name : \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default EditItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, editItem } from '../../state';\r\nimport { ItemList, ItemType } from '../../types';\r\nimport EditItemForm from './EditItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    item: ItemType | null;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditItemModal: React.FC<Props> = ({ open, onClose, item, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const EditItem = async (values: { name: string }) => {\r\n        try {\r\n            if (item) {\r\n                editItem(list, item, values.name, dispatch);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Edit item</Modal.Header>\r\n            <Modal.Content>\r\n                <EditItemForm onSubmit={EditItem} onCancel={onClose} item={item} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default EditItemModal;\r\n","import React from 'react';\r\nimport { Button, Icon, Segment, Grid } from 'semantic-ui-react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ItemType } from '../types';\r\nimport { useStateValue } from '../state';\r\n\r\ninterface Props {\r\n    item: ItemType;\r\n    onRemove: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    onEdit: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    index: number;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ item, onRemove, onEdit, index }) => {\r\n    const [{ isDesktop }] = useStateValue();\r\n    return (\r\n        <Draggable draggableId={item.id} index={index} >\r\n            {(provided) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}>\r\n                    <Segment>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                                <span>{item.name}</span>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={10} className={!isDesktop ? \"item-button-container-mobile\" : \"\"}>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"red\" onClick={onRemove} icon>\r\n                                    <Icon name=\"delete\" />\r\n                                </Button>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"olive\" onClick={onEdit} icon>\r\n                                    <Icon name=\"edit\" />\r\n                                </Button>\r\n                            </Grid.Column>\r\n\r\n                        </Grid>\r\n\r\n                    </Segment>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Item;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useStateValue, deleteItem, editList } from '../state';\r\nimport { Container, Header, Divider, Button, Icon } from 'semantic-ui-react';\r\nimport EditListModal from './EditListModal';\r\nimport AddItemModal from './AddItemModal';\r\nimport EditItemModal from './EditItemModal';\r\nimport Item from './Item';\r\nimport { ItemType } from '../types';\r\n\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst ActiveList: React.FC = () => {\r\n    const [editListModalOpen, setEditListModalOpen] = useState<boolean>(false);\r\n    const [editedItem, setEditedItem] = useState<ItemType | null>(null);\r\n    const [addItemModalOpen, setAddItemModalOpen] = useState<boolean>(false);\r\n    const [{ activeList, isDesktop }, dispatch] = useStateValue();\r\n    const refContainer = useRef<Button>(null);\r\n\r\n    const focusAddButton = () => {\r\n        if (refContainer && refContainer.current) {\r\n            refContainer.current.focus();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        focusAddButton();\r\n    }, [activeList]);\r\n\r\n    const removeItem = async (item: ItemType) => {\r\n        if (activeList) {\r\n            try {\r\n                deleteItem(activeList, item, dispatch);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDragEnd = async (result: DropResult) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        const items = activeList?.items;\r\n        if (items && activeList) {\r\n            const newItems = [...items];\r\n            const draggedItem = newItems.find(i => i.id === draggableId);\r\n            if (draggedItem) {\r\n                newItems.splice(source.index, 1);\r\n                newItems.splice(destination.index, 0, draggedItem);\r\n                activeList.items = newItems;\r\n            }\r\n\r\n            try {\r\n                editList(activeList, newItems, dispatch);\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    const contStyle = { padding: \"0 4.6rem\" };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"4rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    if (!activeList) {\r\n        return (\r\n            <Container style={contStyle}>\r\n                <Header as=\"h2\" style={adviceStyle}>Create or select a list at the top to start using the app.</Header>\r\n            </Container>\r\n        );\r\n    } else if ((!activeList.items)) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            {<Header as=\"h3\" style={{ paddingRight: \"1rem\", marginBottom: 0 }}>{activeList.name}</Header>}\r\n            <Divider />\r\n            {activeList.items.length === 0 ? 'List has no items' :\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId={activeList.id}>\r\n                        {(provided) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}>\r\n                                {activeList.items.map((item, index) => (\r\n                                    <Item\r\n                                        index={index}\r\n                                        key={item.id}\r\n                                        item={item}\r\n                                        onRemove={() => removeItem(item)}\r\n                                        onEdit={() => setEditedItem(item)}\r\n                                    />))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>}\r\n            <EditListModal open={editListModalOpen} onClose={() => setEditListModalOpen(false)} list={activeList} />\r\n            <AddItemModal open={addItemModalOpen} onClose={() => { setAddItemModalOpen(false); focusAddButton(); }} list={activeList} />\r\n            <EditItemModal open={editedItem ? true : false} onClose={() => setEditedItem(null)} list={activeList} item={editedItem} />\r\n            <Divider />\r\n            <Button style={{ marginBottom: \"1rem\" }} floated=\"left\" color='olive' onClick={() => setEditListModalOpen(true)}>\r\n                <Icon name='edit' />Edit\r\n            </Button>\r\n            <Button style={{ marginBottom: \"1rem\" }} color=\"green\" floated=\"right\" onClick={() => setAddItemModalOpen(true)} ref={refContainer}>\r\n                <Icon name=\"add\" />Add Item\r\n            </Button>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default ActiveList;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { useStateValue } from '../../state';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddListForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    const [{ lists }] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const uniqueViolationError = 'List with that name already exists';\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (lists.map(l => l.name).includes(values.name)) {\r\n                    errors.name = uniqueViolationError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the list\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddListForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport AddListForm from './AddListForm';\r\nimport { useStateValue, closeListModal, addList } from '../../state';\r\n\r\nconst AddListModal: React.FC = () => {\r\n    const [{ listModalOpen, user }, dispatch] = useStateValue();\r\n\r\n    const addNewList = async (values: { name: string }) => {\r\n        dispatch(closeListModal());\r\n        try {\r\n            if (user) {\r\n                addList(values.name, user, dispatch);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={listModalOpen} onClose={() => dispatch(closeListModal())} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add a new list</Modal.Header>\r\n            <Modal.Content>\r\n                <AddListForm onSubmit={addNewList} onCancel={() => dispatch(closeListModal())} />\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }, action: FormikHelpers<{ name: string }>) => void;\r\n    onCancel: () => void;\r\n    label: string;\r\n    placeHolder: string;\r\n    validate: any;\r\n    initialValue: string;\r\n    type: string;\r\n}\r\n\r\nexport const ModalForm: React.FC<Props> = ({ onSubmit, onCancel, label, placeHolder, validate, initialValue, type }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: initialValue,\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={validate}\r\n            validateOnChange={true}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label={label}\r\n                            placeholder={placeHolder}\r\n                            name=\"name\"\r\n                            type={type}\r\n                            component={type === 'password' ? PasswordField : TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { name: string }, action: FormikHelpers<{ name: string }>) => void;\r\n    onClose: () => void;\r\n    label: string;\r\n    header: string;\r\n    placeHolder: string;\r\n    validate: any;\r\n    initialValue: string;\r\n    type: string;\r\n}\r\n\r\nconst PromptModal: React.FC<Props> = ({ open, onSubmit, onClose, label, header, placeHolder, validate, initialValue, type }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={onClose} label={label} type={type} placeHolder={placeHolder} validate={validate} initialValue={initialValue} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PromptModal;\r\n","import React, { useState } from 'react';\r\nimport { useStateValue, changeUserName } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\n\r\nconst Name: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [nameModalOpen, setNameModalOpen] = useState<boolean>(false);\r\n\r\n    const changeName = async (values: { name: string }, action: FormikHelpers<{ name: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeName(user.id, values.name);\r\n                changeUserName(editedUser, dispatch);\r\n\r\n                setNameModalOpen(false);\r\n            } catch (error) {\r\n                action.setErrors({ name: \"Username already taken.\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Username</Table.Cell>\r\n                <Table.Cell>{user.name}</Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PromptModal open={nameModalOpen}\r\n                    onSubmit={changeName}\r\n                    onClose={() => setNameModalOpen(false)}\r\n                    label=\"Enter new name\"\r\n                    header=\"Change username\"\r\n                    placeHolder=\"Name\"\r\n                    type=\"name\"\r\n                    validate={undefined}\r\n                    initialValue={user.name}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell>Username</Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}> {user.name}</p>\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n                <PromptModal open={nameModalOpen}\r\n                    onSubmit={changeName}\r\n                    onClose={() => setNameModalOpen(false)}\r\n                    label=\"Enter new name\"\r\n                    header=\"Change username\"\r\n                    placeHolder=\"Name\"\r\n                    type=\"name\"\r\n                    validate={undefined}\r\n                    initialValue={user.name}\r\n                />\r\n            </Table.Row >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Name;","import React, { useState } from 'react';\r\nimport { useStateValue, changeUserEmail } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst Email: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [emailModalOpen, setEmailModalOpen] = useState<boolean>(false);\r\n\r\n    const changeEmail = async (values: { name: string }, action: FormikHelpers<{ name: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeEmail(user.id, values.name);\r\n                changeUserEmail(editedUser, dispatch);\r\n\r\n                setEmailModalOpen(false);\r\n            } catch (error) {\r\n                action.setErrors({ name: \"Email adress already in use.\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const validate = (values: { name: string }) => {\r\n        const errors: { [field: string]: string } = {};\r\n        if (values.name && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.name)) {\r\n            errors.name = 'Invalid email address';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Email</Table.Cell>\r\n                <Table.Cell>{user.email ? user.email : \"\"}</Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PromptModal\r\n                    open={emailModalOpen}\r\n                    onSubmit={changeEmail}\r\n                    onClose={() => setEmailModalOpen(false)}\r\n                    label=\"Email adress\"\r\n                    type=\"email\"\r\n                    header=\"Change email\"\r\n                    placeHolder=\"Email\"\r\n                    validate={validate}\r\n                    initialValue={user.email ? user.email : \"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell width={1}>Email</Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}>{user.email ? user.email : \"\"}</p>\r\n\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n\r\n                <PromptModal\r\n                    open={emailModalOpen}\r\n                    onSubmit={changeEmail}\r\n                    onClose={() => setEmailModalOpen(false)}\r\n                    label=\"Email adress\"\r\n                    type=\"email\"\r\n                    header=\"Change email\"\r\n                    placeHolder=\"Email\"\r\n                    validate={validate}\r\n                    initialValue={user.email ? user.email : \"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Email;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { TextField, PasswordField, Checkbox } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => void;\r\n    onCancel: () => void;\r\n    showPassword: boolean;\r\n    toggleShowPassword: () => void;\r\n    validate: any;\r\n}\r\n\r\nexport const ModalForm: React.FC<Props> = ({ onSubmit, onCancel, showPassword, toggleShowPassword, validate }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                oldPassword: \"\",\r\n                newPassword: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Current password\"\r\n                            placeholder=\"Current password\"\r\n                            name=\"oldPassword\"\r\n                            component={PasswordField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"New password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"newPassword\"\r\n                            component={showPassword ? TextField : PasswordField}\r\n                            autoFocus={false}\r\n                            validate={validate}\r\n                            validateOnChange={true}\r\n                            validateOnBlur={true}\r\n                        />\r\n                        <Field\r\n                            name=\"Show password\"\r\n                            type=\"checkbox\"\r\n                            checked={showPassword}\r\n                            component={Checkbox}\r\n                            onChange={toggleShowPassword}\r\n                        />\r\n                        <Grid style={{ paddingTop: \"1rem\" }}>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ModalForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => void;\r\n    onClose: () => void;\r\n    header: string;\r\n    validate: any;\r\n    initialValue: string;\r\n}\r\n\r\nconst PasswordChangeModal: React.FC<Props> = ({ open, onSubmit, onClose, header, validate }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const toggleShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={() => { onClose(); { setShowPassword(false); } }} showPassword={showPassword} toggleShowPassword={toggleShowPassword} validate={validate} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PasswordChangeModal;\r\n","import React, { useState } from 'react';\r\nimport { useStateValue } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PasswordChangeModal from '../PasswordChangeModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\n\r\nconst Password: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [passwordModalOpen, setPasswordModalOpen] = useState<boolean>(false);\r\n\r\n    const changePassword = async (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => {\r\n\r\n        if (user) {\r\n            try {\r\n                await userService.changePassword(user.id, values.oldPassword, values.newPassword);\r\n                // const editedUser = await userService.changePassword(user.id, values.name);\r\n                // changeUserName(editedUser, dispatch);\r\n\r\n                setPasswordModalOpen(false);\r\n            } catch (error) {\r\n                action.setErrors({ newPassword: \"Password is too short. Please use at least 5 characters.\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    // const validatePassword = (values: { newPassword0: string; newPassword: string }) => {\r\n    //     const errors: { [field: string]: string } = {};\r\n    //     console.log(errors);\r\n    //     // if (values.newPassword.length < 5) {\r\n    //     //     errors.newPassword = \"Password is too short. Please use at least 5 characters.\";\r\n    //     // }\r\n    //     return errors;\r\n    // };\r\n\r\n    const validatePassword = (password: string) => {\r\n        console.log(password);\r\n        if (password.length < 5) {\r\n            return \"Password is too short. Please use at least 5 characters.\";\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Password</Table.Cell>\r\n                <Table.Cell>{\"********\"}</Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setPasswordModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PasswordChangeModal open={passwordModalOpen}\r\n                    onSubmit={changePassword}\r\n                    onClose={() => setPasswordModalOpen(false)}\r\n                    header=\"Change password\"\r\n                    validate={validatePassword}\r\n                    initialValue={\"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell>Password</Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}> {\"********\"}</p>\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setPasswordModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n                <PasswordChangeModal open={passwordModalOpen}\r\n                    onSubmit={changePassword}\r\n                    onClose={() => setPasswordModalOpen(false)}\r\n                    header=\"Change password\"\r\n                    validate={validatePassword}\r\n                    initialValue={\"\"}\r\n                />\r\n            </Table.Row >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Password;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStateValue, acceptInvitation, declineInvitation } from '../../state';\r\nimport { Icon, Table, Button, Divider, Header } from 'semantic-ui-react';\r\nimport { ItemList, User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst ListInvitations: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [listInvitations, setListInvitations] = useState<ItemList[]>();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        setListInvitations(user.listInvitations);\r\n\r\n    }, [user]);\r\n\r\n    const acceptListInvitation = async (list: ItemList) => {\r\n        if (user) {\r\n            await acceptInvitation(list, user, dispatch);\r\n            history.push('/list');\r\n        }\r\n    };\r\n\r\n    const declineListInvitation = (list: ItemList) => {\r\n        if (user) {\r\n            declineInvitation(list, user, dispatch);\r\n        }\r\n    };\r\n\r\n    if (!user || !listInvitations) {\r\n        return null;\r\n    }\r\n\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Fragment>\r\n                <Divider style={dividerStyle} horizontal>\r\n                    <Header as='h4'>\r\n                        List Invitations\r\n            </Header>\r\n                </Divider>\r\n                {listInvitations && listInvitations.length === 0 ?\r\n                    <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                    :\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {listInvitations && listInvitations.map((inv) =>\r\n                                <Table.Row key={inv.id}>\r\n                                    <Table.Cell>{inv.name} by {inv.user.name}</Table.Cell>\r\n                                    <Table.Cell textAlign='right'>\r\n                                        <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                            <Icon name='check' />Accept\r\n                                        </Button>\r\n                                        <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)}>\r\n                                            <Icon name='delete' />Decline\r\n                                        </Button>\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>}\r\n            </Fragment>\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Divider style={dividerStyle} horizontal>\r\n                    <Header as='h4'>\r\n                        List Invitations\r\n            </Header>\r\n                </Divider>\r\n                {listInvitations && listInvitations.length === 0 ?\r\n                    <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                    :\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {listInvitations && listInvitations.map((inv) =>\r\n                                <Table.Row key={inv.id}>\r\n                                    <Table.Cell>\r\n                                        <p>{inv.name} by {inv.user.name}</p>\r\n                                        <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                            <Icon name='check' />Accept\r\n                                        </Button>\r\n                                        <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)} floated=\"right\">\r\n                                            <Icon name='delete' />Decline\r\n                                        </Button>\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default ListInvitations;","import React, { useEffect, useState } from 'react';\r\nimport { useStateValue, clearActiveList } from '../../state';\r\nimport { Container, Header, Divider, Table } from 'semantic-ui-react';\r\nimport Name from './Name';\r\nimport Email from './Email';\r\nimport Password from './Password';\r\nimport ListInvitations from './ListInvitations';\r\nimport userService from '../../services/users';\r\nimport { User } from '../../types';\r\n\r\nconst ProfilePage: React.FC = () => {\r\n    const [{ user, isDesktop }, dispatch] = useStateValue();\r\n    const [userProp, setUserProp] = useState<User>();\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n\r\n    useEffect(() => {\r\n        dispatch(clearActiveList());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, user?.listInvitations]);\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            if (user) {\r\n                const userToReturn: User = await userService.getUser(user.id);\r\n                setUserProp(userToReturn);\r\n            }\r\n        };\r\n        getUser();\r\n    }, [user]);\r\n\r\n    if (!user || !userProp) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            <Divider style={dividerStyle} horizontal>\r\n                <Header as='h4'>\r\n                    Account information\r\n                </Header>\r\n            </Divider>\r\n            <Table definition>\r\n                <Table.Body>\r\n                    <Name user={userProp} />\r\n                    <Email user={userProp} />\r\n                    <Password user={userProp} />\r\n                </Table.Body>\r\n            </Table>\r\n            <ListInvitations user={userProp} />\r\n\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ButtonLink = ({\r\n    className = '',\r\n    ...props\r\n}) => <Button\r\n        basic\r\n        color='blue'\r\n        className={['link', className].join(' ')}\r\n        type=\"button\"\r\n        {...props}\r\n    />;\r\n\r\nButtonLink.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default ButtonLink;","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\nimport { setOpenModalType, useStateValue } from '../../state';\r\nimport { ModalType } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    loginFailed: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = ({ onSubmit, onCancel, loginFailed }) => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={false}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username or email\"\r\n                            placeholder=\"Username / email\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        {loginFailed &&\r\n                            <Message negative>\r\n                                <p>Invalid username or password.</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                            <ButtonLink\r\n                                onClick={() => dispatch(setOpenModalType(ModalType.RecoveryModal))}>\r\n                                Forgot password?\r\n                            </ButtonLink>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, login, setOpenModalType } from '../../state';\r\nimport LoginForm from './LoginForm';\r\nimport { ModalType } from '../../types';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst LoginModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [loginFailed, setLoginFailed] = useState(false);\r\n    const history = useHistory();\r\n\r\n\r\n    const Login = async (values: { name: string; password: string }) => {\r\n        try {\r\n            await login(values.name, values.password, dispatch);\r\n            history.push('/list');\r\n        } catch (error) {\r\n            setLoginFailed(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={() => dispatch(setOpenModalType(ModalType.None))} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Login</Modal.Header>\r\n            <Modal.Content>\r\n                <LoginForm onSubmit={Login} onCancel={() => dispatch(setOpenModalType(ModalType.None))} loginFailed={loginFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default LoginModal;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\nimport { setOpenModalType, useStateValue } from '../../state';\r\nimport { ModalType } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; email: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    registerFailed: string;\r\n}\r\n\r\nexport const RegisterForm: React.FC<Props> = ({ onSubmit, onCancel, registerFailed }) => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={false}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username\"\r\n                            placeholder=\"Username\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Optional email adress. Can be added later in account settings\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                        />\r\n                        {registerFailed &&\r\n                            <Message negative>\r\n                                <p>{registerFailed}</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                            <ButtonLink\r\n                                onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))}>\r\n                                Already have an account? Click here to login.\r\n                            </ButtonLink>\r\n                        </div>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, register, setOpenModalType } from '../../state';\r\nimport { ModalType } from '../../types';\r\nimport RegisterForm from './RegisterForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst RegisterModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [registerFailed, setRegisterFailed] = useState('');\r\n    const history = useHistory();\r\n\r\n    const closeModal = () => {\r\n        setRegisterFailed('');\r\n        dispatch(setOpenModalType(ModalType.None));\r\n    };\r\n\r\n    const Register = async (values: { name: string; email: string; password: string }) => {\r\n        try {\r\n            await register(values.name, values.email, values.password, dispatch);\r\n            history.push('/list');\r\n        } catch (error) {\r\n            setRegisterFailed(error.response.data);\r\n        }\r\n    };\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Register</Modal.Header>\r\n            <Modal.Content>\r\n                <RegisterForm onSubmit={Register} onCancel={closeModal} registerFailed={registerFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n\r\n};\r\n\r\nexport default RegisterModal;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { email: string }) => void;\r\n    onCancel: () => void;\r\n    onOpenLoginModal: () => void;\r\n    emailFound: boolean;\r\n    emailNotFound: boolean;\r\n    resetMessage: () => void;\r\n}\r\n\r\nexport const RecoveryForm: React.FC<Props> = ({ onSubmit, onCancel, onOpenLoginModal, emailFound, emailNotFound, resetMessage }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={true}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.email) {\r\n                    errors.email = \"Field is required\";\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = \"Invalid email address\";\r\n                }\r\n                resetMessage();\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        {emailFound &&\r\n                            <Message info>\r\n                                <p style={{ textAlign: \"center\" }}>Password reset email successfully sent.</p>\r\n                                <div className=\"center-container\">\r\n                                    <ButtonLink\r\n                                        onClick={onOpenLoginModal}>\r\n                                        Click here to login.\r\n                                    </ButtonLink>\r\n                                </div>\r\n                            </Message>}\r\n                        {emailNotFound &&\r\n                            <Message negative>\r\n                                <p>Email is not in use.</p>\r\n                                {/* <div className=\"center-container\">\r\n                                    <ButtonLink\r\n                                        onClick={onOpenLogin}>\r\n                                        Click here to login.\r\n                                    </ButtonLink>\r\n                                </div> */}\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default RecoveryForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, setOpenModalType } from '../../state';\r\nimport { ModalType } from '../../types';\r\nimport RecoveryForm from './RecoveryForm';\r\nimport userService from '../../services/users';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst RecoveryModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [emailFound, setEmailFound] = useState(false);\r\n    const [emailNotFound, setEmailNotFound] = useState(false);\r\n\r\n    const closeModal = () => {\r\n        setEmailNotFound(false);\r\n        dispatch(setOpenModalType(ModalType.None));\r\n    };\r\n\r\n    const openLoginModal = () => {\r\n        closeModal();\r\n        dispatch(setOpenModalType(ModalType.LoginModal));\r\n    };\r\n\r\n    const sendMail = async (values: { email: string }) => {\r\n        try {\r\n            const response = await userService.getUserByEmail(values.email);\r\n            console.log(response);\r\n            if (response) {\r\n                setEmailNotFound(false);\r\n                setEmailFound(true);\r\n            } else {\r\n                setEmailFound(false);\r\n                setEmailNotFound(true);\r\n            }\r\n        } catch (error) {\r\n            setEmailNotFound(true);\r\n        }\r\n    };\r\n\r\n    const resetMessage = () => {\r\n        setEmailFound(false);\r\n        setEmailNotFound(false);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Request a password reset</Modal.Header>\r\n            <Modal.Content>\r\n                <RecoveryForm\r\n                    onSubmit={sendMail}\r\n                    onCancel={closeModal}\r\n                    onOpenLoginModal={openLoginModal}\r\n                    emailFound={emailFound}\r\n                    emailNotFound={emailNotFound}\r\n                    resetMessage={resetMessage} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default RecoveryModal;\r\n","import React from 'react';\r\nimport { useStateValue, setOpenModalType } from '../state';\r\nimport { Container, Header, Button, Segment } from 'semantic-ui-react';\r\nimport LoginModal from './LoginModal';\r\nimport RegisterModal from './RegisterModal';\r\nimport RecoveryModal from './RecoveryModal';\r\nimport { ModalType } from '../types';\r\n\r\nconst Home: React.FC = () => {\r\n    const [{ user, isDesktop, modalType }, dispatch] = useStateValue();\r\n\r\n    const contStyle = { padding: \"0 4.6rem\" };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"4rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    const loginButtonStyle = () => {\r\n        if (isDesktop) {\r\n            return { marginRight: \"1rem\" };\r\n        } else {\r\n            return { marginBottom: \"1rem\" };\r\n        }\r\n    };\r\n\r\n    const registerButtonStyle = () => {\r\n        if (isDesktop) {\r\n            return { marginLeft: \"1rem\" };\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    if (user) {\r\n\r\n        return (\r\n            <Container style={contStyle}>\r\n                <Header as=\"h2\" style={adviceStyle}>Create or select a list.</Header>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <Container style={contStyle}>\r\n            <Header as=\"h2\" style={adviceStyle}>Please login or register to use the site.</Header>\r\n            <Segment basic textAlign={\"center\"}>\r\n                <Button style={loginButtonStyle()} secondary content=\"Login\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} />\r\n                <Button style={registerButtonStyle()} secondary content=\"Register\" onClick={() => dispatch(setOpenModalType(ModalType.RegisterModal))} />\r\n            </Segment>\r\n\r\n            <LoginModal open={modalType === ModalType.LoginModal} />\r\n            <RegisterModal open={modalType === ModalType.RegisterModal} />\r\n            <RecoveryModal open={modalType === ModalType.RecoveryModal} />\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect } from 'react';\nimport {\n    BrowserRouter as Router, Switch, Route\n} from \"react-router-dom\";\nimport { useMediaQuery } from 'react-responsive';\nimport NavBar from './components/NavBar';\nimport ActiveList from './components/ActiveList';\nimport AddListModal from './components/AddListModal';\nimport { useStateValue, setDesktop } from './state';\nimport { Container } from 'semantic-ui-react';\nimport ProfilePage from './components/ProfilePage';\nimport Home from './components/Home';\n\nconst App: React.FC = () => {\n    const [, dispatch] = useStateValue();\n\n    const handleMediaQueryChange = (matches: boolean) => {\n        dispatch(setDesktop(matches));\n    };\n\n    const isDesktop = useMediaQuery({ minDeviceWidth: 900 }, undefined, handleMediaQueryChange);\n\n    useEffect(() => {\n        dispatch(setDesktop(isDesktop));\n    }, [dispatch, isDesktop]);\n\n    // const pageToRender = () => {\n    //     if (user) {\n    //         if (profilePageOpen) {\n    //             return <ProfilePage />;\n    //         } else {\n    //             return <ActiveList />;\n    //         }\n    //     }\n\n    //     return (\n    //         <Home />\n    //     );\n    // };\n\n    return (\n        <Router>\n            <div>\n                <NavBar />\n                <Container>\n                    <Switch>\n                        <Route path=\"/profile\">\n                            <ProfilePage />\n                        </Route>\n                        <Route path=\"/list\">\n                            <ActiveList />\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                    <AddListModal />\n                </Container>\n            </div >\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\nimport './index.css';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}