{"version":3,"sources":["types.ts","services/lists.tsx","constants.ts","services/users.tsx","state/reducer.tsx","state/state.tsx","components/AddNewList.tsx","components/ShoppingLists.tsx","components/LogInOut.tsx","components/Register.tsx","components/NavBar.tsx","components/EditListModal/DeleteListModal.tsx","components/FieldForm.tsx","components/EditListModal/InviteGuestForm.tsx","components/EditListModal/InvitedGuests.tsx","components/EditListModal/Guests.tsx","components/EditListModal/index.tsx","components/AddItemModal/AddItemForm.tsx","components/AddItemModal/index.tsx","components/EditItemModal/EditItemForm.tsx","components/EditItemModal/index.tsx","components/Item.tsx","components/ActiveList.tsx","components/AddListModal/AddListForm.tsx","components/AddListModal/index.tsx","components/PromptModal/ModalForm.tsx","components/PromptModal/index.tsx","components/ProfilePage/Name.tsx","components/ProfilePage/Email.tsx","components/PasswordChangeModal/ModalForm.tsx","components/PasswordChangeModal/index.tsx","components/ProfilePage/Password.tsx","components/ProfilePage/ListInvitations.tsx","components/ProfilePage/index.tsx","components/ResetPassword/ResetForm.tsx","components/ButtonLink.tsx","components/ResetPassword/index.tsx","components/Home.tsx","components/LoginModal/LoginForm.tsx","components/LoginModal/index.tsx","components/RegisterModal/RegisterForm.tsx","components/RegisterModal/index.tsx","components/RecoveryModal/RecoveryForm.tsx","components/RecoveryModal/index.tsx","components/LoadingIndicator.tsx","App.tsx","index.tsx"],"names":["ModalType","token","config","headers","Authorization","getListsByUser","a","axios","get","listsFromApi","data","addList","name","post","addedList","editList","id","items","put","deleteList","listID","delete","addItem","item","addedItem","deleteItem","itemId","editItem","patch","inviteGuest","guestName","editedList","uninviteGuest","guestId","acceptInvitation","user","declineInvitation","leaveList","removeGuest","setToken","newToken","login","password","response","register","email","getUser","listService","getUserByEmail","setActiveList","userId","listId","clearActiveList","changeName","changeEmail","changePassword","oldPassword","newPassword","validateToken","requestReset","resetPassword","setDesktop","desktop","type","payload","setLists","lists","dispatch","userService","userFromApi","list","activeList","guests","map","g","includes","changeActiveList","itemName","newName","newItem","editedItem","resetActiveList","editedUser","guest","changeUserName","loggedUserJSON","window","localStorage","getItem","storedUser","JSON","parse","setItem","stringify","changeUserEmail","setOpenModalType","modalType","modal","initialState","listModalOpen","None","isDesktop","StateContext","createContext","StateProvider","reducer","children","useReducer","state","Provider","value","useStateValue","useContext","AddNewList","Menu","Item","as","onClick","Icon","size","ShoppingLists","history","useHistory","location","useLocation","promiseInProgress","usePromiseTracker","useEffect","fetchLists","trackPromise","console","error","setActive","push","showActiveList","pathname","Dropdown","text","style","minWidth","length","key","Divider","Header","LogInOut","setUser","removeItem","discardUser","color","LoginModal","Register","RegisterModal","NavBar","borderless","inverted","Container","position","header","className","DeleteListModal","open","onConfirm","onClose","Modal","centered","closeIcon","Content","Grid","Column","floated","width","Button","TextField","field","label","placeholder","autoFocus","Field","PasswordField","useState","showPassword","setShowPassword","Input","icon","link","InviteGuestForm","onSubmit","initialValues","isValid","dirty","component","disabled","InvitedGuests","removeInvitation","log","contStyle","padding","invitedGuests","fontWeight","fontSize","Segment","verticalAlign","Guests","isGuest","removeGuestUser","normalStyle","boldStyle","EditListModal","deleteModalOpen","setDeleteModalOpen","removeList","addInvitation","values","action","setErrors","resetForm","leaveGuestList","Actions","AddItemForm","onCancel","validate","errors","AddItemModal","addNewItem","e","EditItemForm","EditItemModal","EditItem","onRemove","onEdit","index","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","ActiveList","editListModalOpen","setEditListModalOpen","setEditedItem","addItemModalOpen","setAddItemModalOpen","refContainer","useRef","focusAddButton","current","focus","onDragEnd","result","destination","source","droppableId","newItems","draggedItem","find","i","splice","paddingRight","marginBottom","droppableProps","marginTop","textAlign","to","AddListForm","l","AddListModal","addNewList","ModalForm","placeHolder","initialValue","test","validateOnChange","PromptModal","Name","nameModalOpen","setNameModalOpen","nameChanged","setNameChanged","showSuccess","setShowSuccess","nameChangedTimer","setTimeout","clearTimeout","status","Table","Row","Cell","marginLeft","paddingTop","paddingBottom","display","gridTemplateColumns","textJustify","lineHeight","justifySelf","Email","emailModalOpen","setEmailModalOpen","emailChanged","setEmailChanged","toggleShowPassword","PasswordChangeModal","Password","passwordModalOpen","setPasswordModalOpen","passwordChanged","setPasswordChanged","validatePassword","ListInvitations","listInvitations","setListInvitations","acceptListInvitation","declineListInvitation","dividerStyle","horizontal","Body","inv","positive","negative","ProfilePage","userProp","setUserProp","userToReturn","definition","ResetForm","validateOnBlur","ButtonLink","props","basic","join","ResetPassword","useParams","undefined","validatedUserId","setValidatedUser","resetSuccessful","setResetSuccessful","validateUser","adviceStyle","RecoveryModal","secondary","content","Home","marginRight","LoginForm","loginFailed","Message","setLoginFailed","Login","RegisterForm","registerFailed","setRegisterFailed","closeModal","RecoveryForm","emailFound","emailNotFound","resetMessage","info","setEmailFound","setEmailNotFound","sendMail","LoadingIndicator","height","justifyContent","alignItems","App","useMediaQuery","minDeviceWidth","matches","path","ReactDOM","render","filter","document","getElementById"],"mappings":"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","file":"static/js/main.e640c188.chunk.js","sourcesContent":["export interface ItemType extends Document {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface ItemList {\r\n    id: string;\r\n    name: string;\r\n    items: ItemType[];\r\n    user: User;\r\n    invitedGuests: User[];\r\n    guests: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    name: string;\r\n    email: string | null;\r\n    token: string;\r\n    listInvitations: ItemList[];\r\n    activeList: ItemList;\r\n}\r\n\r\nexport enum ModalType {\r\n    None,\r\n    TestModal,\r\n    LoginModal,\r\n    RegisterModal,\r\n    RecoveryModal\r\n}","import { ItemList, ItemType } from '../types';\r\nimport axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\n\r\nlet token: string | null = null;\r\n\r\nconst config = () => ({ headers: { Authorization: token } });\r\n\r\nconst setToken = (newToken: string) => {\r\n    token = `bearer ${newToken}`;\r\n};\r\n\r\nconst getListsByUser = async () => {\r\n    const { data: listsFromApi } = await axios.get<ItemList[]>(\r\n        `${apiBaseUrl}/lists`, config()\r\n    );\r\n\r\n    return listsFromApi;\r\n};\r\n\r\nconst addList = async (name: string) => {\r\n    const { data: addedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists`, { name }, config()\r\n    );\r\n\r\n    return addedList;\r\n};\r\n\r\nconst editList = async (id: string, items: ItemType[]) => {\r\n    return await axios.put<ItemList>(\r\n        `${apiBaseUrl}/lists/${id}/update`, { items }, config()\r\n    );\r\n};\r\n\r\nconst deleteList = async (listID: string) => {\r\n    await axios.delete(`${apiBaseUrl}/lists/${listID}`, config());\r\n};\r\n\r\nconst addItem = async (listID: string, item: string) => {\r\n    const addedItem = await axios.post<ItemType>(\r\n        `${apiBaseUrl}/lists/${listID}/add-item`, { name: item }, config()\r\n    );\r\n    return addedItem;\r\n};\r\n\r\nconst deleteItem = async (listID: string, itemId: string) => {\r\n    await axios.delete<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/delete-item/${itemId}`, config()\r\n    );\r\n};\r\n\r\nconst editItem = async (listID: string, item: ItemType) => {\r\n    await axios.patch<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/edit-item`, { item }, config()\r\n    );\r\n};\r\n\r\nconst inviteGuest = async (listID: string, guestName: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/invite-guest`, { guestName }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst uninviteGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/uninvite-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst acceptInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/accept-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst declineInvitation = async (listID: string, user: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/decline-invite`, { user }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst leaveList = async (listID: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/leave-list`, {}, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nconst removeGuest = async (listID: string, guestId: string) => {\r\n    const { data: editedList } = await axios.post<ItemList>(\r\n        `${apiBaseUrl}/lists/${listID}/remove-guest`, { guestId }, config()\r\n    );\r\n\r\n    return editedList;\r\n};\r\n\r\nexport default {\r\n    config,\r\n    setToken,\r\n    getListsByUser,\r\n    addList,\r\n    addItem,\r\n    deleteItem,\r\n    editItem,\r\n    deleteList,\r\n    editList,\r\n    inviteGuest,\r\n    uninviteGuest,\r\n    acceptInvitation,\r\n    declineInvitation,\r\n    leaveList,\r\n    removeGuest\r\n};","export const apiBaseUrl = '/api';\r\n// export const apiBaseUrl = 'http://localhost:3001/api';","import axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\nimport listService from './lists';\r\n\r\nconst login = async (name: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/login`, { name, password });\r\n    return response.data;\r\n};\r\n\r\nconst register = async (name: string, email: string, password: string) => {\r\n    const response = await axios.post(`${apiBaseUrl}/users`, { name, email, password });\r\n    return response.data;\r\n};\r\n\r\nconst getUser = async (id: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/${id}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst getUserByEmail = async (email: string) => {\r\n    const response = await axios.get(`${apiBaseUrl}/users/find-email/${email}`, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst setActiveList = async (userId: string, listId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/set-active-list`, { listId }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst clearActiveList = async (userId: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/clear-active-list`, {}, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeName = async (userId: string, name: string, password: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-name`, { name, password }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changeEmail = async (userId: string, email: string, password: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-email`, { email, password }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst changePassword = async (userId: string, oldPassword: string, newPassword: string) => {\r\n    const response = await axios.patch(`${apiBaseUrl}/users/${userId}/change-password`, { oldPassword, newPassword }, listService.config());\r\n    return response.data;\r\n};\r\n\r\nconst validateToken = async (token: string) => {\r\n    try {\r\n        const response = await axios.post(`${apiBaseUrl}/users/validate-token`, { token }, listService.config());\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n\r\nconst requestReset = async (email: string) => {\r\n    try {\r\n        const response = await axios.post(`${apiBaseUrl}/users/send-reset-email`, { email }, listService.config());\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n\r\nconst resetPassword = async (email: string, password: string) => {\r\n    try {\r\n        const response = await axios.post(`${apiBaseUrl}/users/reset-password`, { email, password }, listService.config());\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n\r\nexport default { login, register, getUser, getUserByEmail, setActiveList, clearActiveList, changeName, changeEmail, changePassword, requestReset, validateToken, resetPassword };","import React from 'react';\r\nimport { State } from \"./state\";\r\nimport { ItemList, ItemType, User } from \"../types\";\r\nimport listService from '../services/lists';\r\nimport userService from '../services/users';\r\nimport { ModalType } from '../types';\r\n\r\nexport type Action =\r\n    | {\r\n        type: \"SET_DEVICE_TO_DESKTOP\";\r\n        payload: boolean;\r\n    }\r\n    | {\r\n        type: \"SET_IS_LOADING_LIST\";\r\n        payload: boolean;\r\n    }\r\n    | {\r\n        type: \"SET_LISTS\";\r\n        payload: ItemList[];\r\n    }\r\n    | {\r\n        type: \"SET_ACTIVE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"CLEAR_ACTIVE_LIST\";\r\n    }\r\n    | {\r\n        type: \"ADD_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"EDIT_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"DELETE_LIST\";\r\n        payload: ItemList;\r\n    }\r\n    | {\r\n        type: \"OPEN_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"CLOSE_LIST_MODAL\";\r\n    }\r\n    | {\r\n        type: \"ADD_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"DELETE_ITEM\";\r\n        payload: { list: ItemList; item: ItemType };\r\n    }\r\n    | {\r\n        type: \"EDIT_ITEM\";\r\n        payload: { list: ItemList; editedItem: ItemType };\r\n    }\r\n    | {\r\n        type: \"SET_USER\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"DISCARD_USER\";\r\n    }\r\n    | {\r\n        type: \"INVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"UNINVITE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"ACCEPT_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"DECLINE_INVITATION\";\r\n        payload: { list: ItemList; user: User };\r\n    }\r\n    | {\r\n        type: \"LEAVE_LIST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"REMOVE_GUEST\";\r\n        payload: { list: ItemList };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_NAME\";\r\n        payload: { user: User };\r\n    }\r\n    | {\r\n        type: \"CHANGE_USER_EMAIL\";\r\n        payload: { user: User };\r\n    } | {\r\n        type: \"SET_OPEN_MODAL_TYPE\";\r\n        payload: { modal: ModalType };\r\n    };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case \"SET_DEVICE_TO_DESKTOP\":\r\n            return {\r\n                ...state,\r\n                isDesktop: action.payload\r\n            };\r\n        case \"SET_LISTS\":\r\n            return {\r\n                ...state,\r\n                lists: action.payload\r\n            };\r\n        case \"SET_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"CLEAR_ACTIVE_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: null\r\n            };\r\n        case \"OPEN_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: true\r\n            };\r\n        case \"CLOSE_LIST_MODAL\":\r\n            return {\r\n                ...state,\r\n                listModalOpen: false\r\n            };\r\n        case \"ADD_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, action.payload]\r\n            };\r\n        case \"EDIT_LIST\":\r\n            return {\r\n                ...state,\r\n                activeList: action.payload\r\n            };\r\n        case \"DELETE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(l => l.id !== action.payload.id),\r\n                activeList: null\r\n            };\r\n        case \"ADD_ITEM\":\r\n            action.payload.list.items.push(action.payload.item);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"DELETE_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.filter(i => i.id !== action.payload.item.id);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"EDIT_ITEM\":\r\n            action.payload.list.items = action.payload.list.items.map(i => i.id === action.payload.editedItem.id ? action.payload.editedItem : i);\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"SET_USER\":\r\n            window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(action.payload.user));\r\n            listService.setToken(action.payload.user.token);\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"DISCARD_USER\":\r\n            return {\r\n                ...state,\r\n                user: null\r\n            };\r\n        case \"INVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"UNINVITE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l)\r\n            };\r\n        case \"ACCEPT_INVITATION\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"DECLINE_INVITATION\":\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user as User,\r\n                    listInvitations: action.payload.user.listInvitations\r\n                }\r\n            };\r\n        case \"LEAVE_LIST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n            };\r\n        case \"REMOVE_GUEST\":\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(l => l.id === action.payload.list.id ? action.payload.list : l),\r\n                activeList: action.payload.list\r\n            };\r\n        case \"CHANGE_USER_NAME\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"CHANGE_USER_EMAIL\":\r\n            return {\r\n                ...state,\r\n                user: action.payload.user\r\n            };\r\n        case \"SET_OPEN_MODAL_TYPE\":\r\n            return {\r\n                ...state,\r\n                modalType: action.payload.modal\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setDesktop = (desktop: boolean) => {\r\n    return (\r\n        {\r\n            type: \"SET_DEVICE_TO_DESKTOP\" as \"SET_DEVICE_TO_DESKTOP\",\r\n            payload: desktop\r\n        }\r\n    );\r\n};\r\n\r\nexport const setLists = (lists: ItemList[]) => {\r\n    return (\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const setActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    const list = userFromApi.activeList;\r\n\r\n    if (list) {\r\n        if (list.guests.map(g => g.id).includes(userFromApi.id) || list.user.id === userFromApi.id) {\r\n            dispatch(\r\n                {\r\n                    type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n                    payload: list\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    dispatch(\r\n        {\r\n            type: \"SET_IS_LOADING_LIST\" as \"SET_IS_LOADING_LIST\",\r\n            payload: false\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeActiveList = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const userFromApi: User = await userService.setActiveList(user.id, list.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: userFromApi.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const openListModal = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_LIST_MODAL\" as \"OPEN_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeListModal = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_LIST_MODAL\" as \"CLOSE_LIST_MODAL\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const addList = async (name: string, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const addedList = await listService.addList(name);\r\n    const userFromApi: User = await userService.getUser(user.id);\r\n    await userService.setActiveList(userFromApi.id, addedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"ADD_LIST\" as \"ADD_LIST\",\r\n            payload: addedList\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: addedList\r\n        }\r\n    );\r\n};\r\n\r\nexport const editList = async (list: ItemList, items: ItemType[], dispatch: React.Dispatch<Action>) => {\r\n    await listService.editList(list.id, items);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_LIST\" as \"EDIT_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteList(list.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_LIST\" as \"DELETE_LIST\",\r\n            payload: list\r\n        }\r\n    );\r\n};\r\n\r\nexport const addItem = async (list: ItemList, itemName: string, dispatch: React.Dispatch<Action>) => {\r\n    const item = (await listService.addItem(list.id, itemName)).data;\r\n    dispatch(\r\n        {\r\n            type: \"ADD_ITEM\" as \"ADD_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteItem = async (list: ItemList, item: ItemType, dispatch: React.Dispatch<Action>) => {\r\n    await listService.deleteItem(list.id, item.id);\r\n    dispatch(\r\n        {\r\n            type: \"DELETE_ITEM\" as \"DELETE_ITEM\",\r\n            payload: { list, item }\r\n        }\r\n    );\r\n};\r\n\r\nexport const editItem = async (list: ItemList, item: ItemType, newName: string, dispatch: React.Dispatch<Action>) => {\r\n    const newItem = { ...item, name: newName };\r\n    await listService.editItem(list.id, newItem);\r\n    dispatch(\r\n        {\r\n            type: \"EDIT_ITEM\" as \"EDIT_ITEM\",\r\n            payload: { list, editedItem: newItem }\r\n        }\r\n    );\r\n};\r\n\r\nexport const setUser = (dispatch: React.Dispatch<Action>) => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const user = JSON.parse(loggedUserJSON);\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport const discardUser = (dispatch: React.Dispatch<Action>) => {\r\n    window.localStorage.removeItem('loggedShoppingListAppUser');\r\n    listService.setToken(\"\");\r\n    dispatch(\r\n        {\r\n            type: \"DISCARD_USER\" as \"DISCARD_USER\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_IS_LOADING_LIST\" as \"SET_IS_LOADING_LIST\",\r\n            payload: true\r\n        }\r\n    );\r\n};\r\n\r\nexport const login = async (name: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    const user = await userService.login(name, password);\r\n    if (user) {\r\n        dispatch(\r\n            {\r\n                type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n            }\r\n        );\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user }\r\n            }\r\n        );\r\n        // dispatch(\r\n        //     {\r\n        //         type: \"SET_IS_LOADING_LIST\" as \"SET_IS_LOADING_LIST\",\r\n        //         payload: false\r\n        //     }\r\n        // );\r\n    }\r\n};\r\n\r\nexport const register = async (name: string, email: string, password: string, dispatch: React.Dispatch<Action>) => {\r\n    await userService.register(name, email, password);\r\n    const user = await userService.login(name, password);\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_USER\" as \"SET_USER\",\r\n            payload: { user }\r\n        }\r\n    );\r\n};\r\n\r\nexport const openProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"OPEN_PROFILE_PAGE\" as \"OPEN_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const closeProfilePage = () => {\r\n    return (\r\n        {\r\n            type: \"CLOSE_PROFILE_PAGE\" as \"CLOSE_PROFILE_PAGE\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const clearActiveList = () => {\r\n    return (\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n};\r\n\r\nexport const resetActiveList = async (user: User, dispatch: React.Dispatch<Action>) => {\r\n    await userService.clearActiveList(user.id);\r\n    const lists = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"CLEAR_ACTIVE_LIST\" as \"CLEAR_ACTIVE_LIST\"\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n};\r\n\r\nexport const inviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"INVITE_GUEST\" as \"INVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const uninviteGuest = (editedList: ItemList) => {\r\n    return (\r\n        {\r\n            type: \"UNINVITE_GUEST\" as \"UNINVITE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const acceptInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.acceptInvitation(list.id, user.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    const lists: ItemList[] = await listService.getListsByUser();\r\n    dispatch(\r\n        {\r\n            type: \"ACCEPT_INVITATION\" as \"ACCEPT_INVITATION\",\r\n            payload: { list: editedList, user }\r\n        }\r\n    );\r\n    dispatch(\r\n        {\r\n            type: \"SET_LISTS\" as \"SET_LISTS\",\r\n            payload: lists\r\n        }\r\n    );\r\n    const editedUser: User = await userService.setActiveList(user.id, editedList.id);\r\n    dispatch(\r\n        {\r\n            type: \"SET_ACTIVE_LIST\" as \"SET_ACTIVE_LIST\",\r\n            payload: editedUser.activeList\r\n        }\r\n    );\r\n};\r\n\r\nexport const declineInvitation = async (list: ItemList, user: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.declineInvitation(list.id, user.id);\r\n    const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"DECLINE_INVITATION\" as \"DECLINE_INVITATION\",\r\n            payload: { list: editedList, user: editedUser }\r\n        }\r\n    );\r\n};\r\n\r\nexport const leaveList = async (list: ItemList, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.leaveList(list.id);\r\n    // const editedUser: User = await userService.getUser(user.id);\r\n    dispatch(\r\n        {\r\n            type: \"LEAVE_LIST\" as \"LEAVE_LIST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const removeGuest = async (list: ItemList, guest: User, dispatch: React.Dispatch<Action>) => {\r\n    const editedList = await listService.removeGuest(list.id, guest.id);\r\n    dispatch(\r\n        {\r\n            type: \"REMOVE_GUEST\" as \"REMOVE_GUEST\",\r\n            payload: { list: editedList }\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeUserName = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_NAME\" as \"CHANGE_USER_NAME\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.name = editedUser.name;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const changeUserEmail = async (editedUser: User, dispatch: React.Dispatch<Action>) => {\r\n    dispatch(\r\n        {\r\n            type: \"CHANGE_USER_EMAIL\" as \"CHANGE_USER_EMAIL\",\r\n            payload: { user: editedUser }\r\n        }\r\n    );\r\n\r\n    const loggedUserJSON = window.localStorage.getItem('loggedShoppingListAppUser');\r\n    if (loggedUserJSON) {\r\n        const storedUser = JSON.parse(loggedUserJSON);\r\n        storedUser.email = editedUser.email;\r\n        window.localStorage.setItem('loggedShoppingListAppUser', JSON.stringify(storedUser));\r\n        dispatch(\r\n            {\r\n                type: \"SET_USER\" as \"SET_USER\",\r\n                payload: { user: storedUser }\r\n            }\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport const setOpenModalType = (modalType: ModalType) => {\r\n    return (\r\n        {\r\n            type: \"SET_OPEN_MODAL_TYPE\" as \"SET_OPEN_MODAL_TYPE\",\r\n            payload: { modal: modalType }\r\n        }\r\n    );\r\n};\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { ItemList, User, ModalType } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n    lists: ItemList[];\r\n    activeList: ItemList | null;\r\n    listModalOpen: boolean;\r\n    user: null | User;\r\n    modalType: ModalType;\r\n    isDesktop: boolean;\r\n};\r\n\r\nconst initialState: State = {\r\n    lists: [],\r\n    activeList: null,\r\n    listModalOpen: false,\r\n    user: null,\r\n    modalType: ModalType.None,\r\n    isDesktop: true,\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n    initialState,\r\n    () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n    reducer: React.Reducer<State, Action>;\r\n    children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n    reducer,\r\n    children\r\n}: StateProviderProps) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react';\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { useStateValue, openListModal } from '../state';\r\n\r\nconst AddNewList: React.FC = () => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Menu.Item name='newList' as='a' onClick={() => dispatch(openListModal())}>\r\n            <Icon name='add' size='tiny' />\r\n        Add List\r\n        </Menu.Item>\r\n    );\r\n};\r\n\r\nexport default AddNewList;","import React, { useEffect, Fragment } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport AddNewList from './AddNewList';\r\nimport { useStateValue, setActiveList, setLists, changeActiveList } from '../state';\r\nimport { ItemList } from '../types';\r\nimport { Dropdown, Icon } from 'semantic-ui-react';\r\nimport listService from '../services/lists';\r\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker';\r\n\r\nconst ShoppingLists: React.FC = () => {\r\n    const [{ lists, activeList, user, isDesktop }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    useEffect(() => {\r\n        const fetchLists = async () => {\r\n            // const waitFor = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\r\n            // await waitFor(2000);\r\n            try {\r\n                const listsFromApi = await listService.getListsByUser();\r\n                dispatch(setLists(listsFromApi));\r\n                if (user) {\r\n                    trackPromise(setActiveList(user, dispatch));\r\n                }\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n        trackPromise(fetchLists());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    const setActive = (list: ItemList) => {\r\n        if (user) {\r\n            trackPromise(changeActiveList(list, user, dispatch));\r\n            history.push('/list');\r\n        }\r\n    };\r\n\r\n    const showActiveList = () => {\r\n        if (location.pathname === '/profile' || !activeList) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    if (promiseInProgress) {\r\n        return (\r\n            <Dropdown item text={(showActiveList()) ? activeList?.name : 'Select list'} style={{ minWidth: \"11rem\" }}></Dropdown >\r\n        );\r\n    }\r\n\r\n    if (lists.length === 0) {\r\n        return <AddNewList />;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Dropdown item text={(showActiveList()) ? activeList?.name : 'Select list'} style={{ minWidth: \"11rem\" }}>\r\n                <Dropdown.Menu>\r\n                    {lists.map(list => (\r\n                        <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                            {activeList && activeList.id === list.id ?\r\n                                <Icon name=\"selected radio\" size=\"mini\" />\r\n                                :\r\n                                <Icon name=\"circle outline\" size=\"mini\" />\r\n                            }\r\n\r\n                            {list.name}\r\n                        </Dropdown.Item>\r\n                    ))}\r\n                    <Dropdown.Divider />\r\n                    <AddNewList />\r\n                </Dropdown.Menu>\r\n            </Dropdown >\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Dropdown.Header text={'Lists'} style={{ minWidth: \"11rem\" }}>Lists</Dropdown.Header>\r\n\r\n                {lists.map(list => (\r\n                    <Dropdown.Item key={list.id} onClick={() => setActive(list)}>\r\n\r\n                        {activeList && activeList.id === list.id ?\r\n                            <Icon name=\"selected radio\" size=\"mini\" />\r\n                            :\r\n                            <Icon name=\"circle outline\" size=\"mini\" />\r\n                        }\r\n\r\n                        {list.name}\r\n                    </Dropdown.Item>\r\n                ))}\r\n                <AddNewList />\r\n                <Dropdown.Divider />\r\n            </Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ShoppingLists;","import React, { Fragment, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStateValue, setUser, discardUser, setOpenModalType } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nimport { ModalType } from '../types';\r\n\r\nconst LogInOut: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    const Logout = () => {\r\n        discardUser(dispatch);\r\n        dispatch(setOpenModalType(ModalType.None));\r\n        history.push('/');\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUser(dispatch);\r\n\r\n    }, []);// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <Fragment>\r\n            {user ?\r\n                <Menu.Item type=\"button\" onClick={Logout} color=\"grey\">\r\n                    Logout\r\n                </Menu.Item>\r\n                :\r\n                <Menu.Item type=\"button\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} color=\"grey\">\r\n                    Login\r\n                </Menu.Item>\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default LogInOut;","import React, { Fragment } from 'react';\r\nimport { useStateValue, setOpenModalType } from '../state';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { ModalType } from '../types';\r\n\r\nconst Register: React.FC = () => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    return (\r\n        <Fragment>\r\n            {!user ?\r\n                <Menu.Item type=\"button\" onClick={() => dispatch(setOpenModalType(ModalType.RegisterModal))} color=\"grey\">\r\n                    Register\r\n                </Menu.Item>\r\n                :\r\n                null\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Register;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ShoppingLists from './ShoppingLists';\r\nimport { Menu, Container, Icon, Dropdown } from 'semantic-ui-react';\r\nimport LogInOut from './LogInOut';\r\nimport Register from './Register';\r\nimport { useStateValue } from '../state';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const [{ user, isDesktop }] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Menu borderless inverted size=\"massive\">\r\n                <Container>\r\n                    <Menu.Item position='left' header>\r\n                        <Icon name=\"list alternate outline\" size=\"large\" />\r\n                    Shopping List\r\n                </Menu.Item>\r\n                    <Menu.Menu position='right'>\r\n                        {user && <ShoppingLists />}\r\n                        {user &&\r\n                            <Menu.Item type=\"button\" onClick={() => history.push('/profile')} color=\"grey\">\r\n                                <Icon name=\"user\" size=\"large\" />\r\n                                {user.name}\r\n                            </Menu.Item>\r\n                        }\r\n                        <LogInOut />\r\n                        <Register />\r\n                    </Menu.Menu>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    } else {\r\n        return (\r\n            <Menu borderless inverted size=\"huge\" >\r\n                <Container>\r\n                    <Menu.Item header className=\"mobile-logo\">\r\n                        <Icon name=\"list alternate outline\" size=\"large\" />\r\n                        Shopping List\r\n                    </Menu.Item>\r\n                    <Dropdown item text=\"Menu\" className=\"mobile-menu\">\r\n                        <Dropdown.Menu>\r\n                            {user && <ShoppingLists />}\r\n                            {user &&\r\n                                <Dropdown.Item type=\"button\" onClick={() => history.push('/profile')} color=\"grey\">\r\n                                    <Icon name=\"user\" size=\"large\" />\r\n                                    {user.name}\r\n                                </Dropdown.Item>\r\n                            }\r\n                            <LogInOut />\r\n                            <Register />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Container>\r\n            </Menu >\r\n        );\r\n    }\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { Modal, Button, Grid } from 'semantic-ui-react';\r\nimport { ItemList } from '../../types';\r\n\r\nconst DeleteListModal: React.FC<{ open: boolean; list: ItemList; onConfirm: () => void; onClose: () => void }> = ({ open, onConfirm, onClose, list }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Really delete list {list.name}?</Modal.Header>\r\n            <Modal.Content>\r\n                <Grid>\r\n                    <Grid.Column floated=\"left\" width={5}>\r\n                        <Button type=\"button\" onClick={onConfirm} color=\"red\">\r\n                            Yes\r\n                    </Button>\r\n                    </Grid.Column>\r\n                    <Grid.Column floated=\"right\" width={5}>\r\n                        <Button floated=\"right\" type=\"button\" onClick={onClose} color=\"grey\">\r\n                            No\r\n                    </Button>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeleteListModal;","import React, { useState } from \"react\";\r\nimport { Form as UIForm, Input, Icon } from \"semantic-ui-react\";\r\nimport { Field, ErrorMessage, FieldProps } from \"formik\";\r\n\r\ninterface TextProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    autoFocus: boolean;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            <Field placeholder={placeholder} {...field} autoFocus={autoFocus} />\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field>\r\n    );\r\n\r\ninterface PasswordProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    autoFocus: boolean;\r\n    type: string;\r\n}\r\n\r\nexport const PasswordField: React.FC<PasswordProps> = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    autoFocus\r\n}) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    return (\r\n        <UIForm.Field>\r\n            <label>{label}</label>\r\n            {/* <Field type={type} placeholder={placeholder} {...field} autoFocus={autoFocus} /> */}\r\n            <Input\r\n                autoFocus={autoFocus}\r\n                placeholder={placeholder}\r\n                type={showPassword ? 'text' : 'password'}\r\n                {...field}\r\n                icon={\r\n                    <Icon name={showPassword ? 'eye slash' : 'eye'} size=\"large\" link onClick={() => setShowPassword(!showPassword)} />}\r\n            />\r\n            {/* <div style={{ color: 'red', minHeight: \"1.3571rem\" }}></div> */}\r\n            <div style={{ color: 'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </UIForm.Field >);\r\n};\r\n\r\ninterface CheckboxProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    type: string;\r\n    checked: boolean;\r\n    onChange: () => void;\r\n}\r\n\r\nexport const Checkbox: React.FC<CheckboxProps> = ({ field, type, checked, onChange }) => {\r\n    return (\r\n        <label>\r\n            {/* remove {...field} to see changes not propagated */}\r\n            <input {...field} type={type} checked={checked} onChange={onChange} />\r\n            {field.name}\r\n        </label>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: any;\r\n}\r\n\r\nexport const InviteGuestForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        // validate={values => {\r\n        //     const requiredError = \"Field is required\";\r\n        //     const errors: { [field: string]: string } = {};\r\n        //     if (!values.name) {\r\n        //         errors.name = requiredError;\r\n        //     }\r\n        //     return errors;\r\n        // }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Invite a user\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            {/* <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column> */}\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"left\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Invite\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default InviteGuestForm;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport listService from '../../services/lists';\r\nimport { uninviteGuest, changeActiveList, useStateValue } from '../../state';\r\n\r\nconst InvitedGuests: React.FC<{ list: ItemList }> = ({ list }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeInvitation = async (guest: User) => {\r\n        try {\r\n            const editedList = await listService.uninviteGuest(list.id, guest.id);\r\n            dispatch(uninviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n\r\n    if (list.invitedGuests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n                <p style={normalStyle}>List has no pending invitations.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Invitations</label>\r\n            {list.invitedGuests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeInvitation(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default InvitedGuests;","import React, { Fragment } from 'react';\r\nimport { ItemList } from '../../types';\r\nimport { Button, Segment, Grid } from \"semantic-ui-react\";\r\nimport { User } from '../../types';\r\nimport { removeGuest, useStateValue } from '../../state';\r\n\r\nconst Guests: React.FC<{ list: ItemList; isGuest: boolean }> = ({ list, isGuest }) => {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeGuestUser = async (guest: User) => {\r\n        try {\r\n            removeGuest(list, guest, dispatch);\r\n        } catch (error) {\r\n            // action.setErrors({ name: \"User does not exist.\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    if (!list) {\r\n        return null;\r\n    }\r\n\r\n    const contStyle = {\r\n        padding: \"7px 7px 7px 14px\",\r\n    };\r\n\r\n    const normalStyle = {\r\n        fontSize: \"1rem\"\r\n    };\r\n    const boldStyle = {\r\n        fontSize: \"1rem\",\r\n        fontWeight: \"bold\"\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (list.guests.length === 0) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                <p style={normalStyle}>List has no guest users.</p>\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    // user is guest on the said list\r\n    if (isGuest) {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n                {list.guests.map(g =>\r\n                    <Segment size=\"mini\" key={g.id}>\r\n                        <span style={g.id === user.id ? boldStyle : normalStyle}>{g.name}</span>\r\n                    </Segment>\r\n                )\r\n                }\r\n            </Fragment >\r\n\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <label style={{ fontWeight: 'bold' }}>Guests</label>\r\n            {list.guests.map(g =>\r\n\r\n                <Segment key={g.id}>\r\n                    <Grid>\r\n                        <Grid.Column style={contStyle} floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                            <span>{g.name}</span>\r\n                        </Grid.Column>\r\n                        <Grid.Column style={contStyle} floated=\"right\" width={5}>\r\n                            <Button floated=\"right\" size=\"mini\" color=\"red\" onClick={() => removeGuestUser(g)} icon=\"delete\" />\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n\r\n                </Segment>\r\n            )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Guests;","import React, { useState, Fragment } from 'react';\r\nimport { Modal, Button, Icon, Divider, Segment } from 'semantic-ui-react';\r\nimport { useStateValue, deleteList, inviteGuest, changeActiveList, leaveList, resetActiveList } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport DeleteListModal from './DeleteListModal';\r\nimport InviteGuestForm from './InviteGuestForm';\r\nimport InvitedGuests from './InvitedGuests';\r\nimport Guests from './Guests';\r\nimport listService from '../../services/lists';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditListModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const removeList = async () => {\r\n        setDeleteModalOpen(false);\r\n        onClose();\r\n        try {\r\n            deleteList(list, dispatch);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const addInvitation = async (values: { name: string }, action: any) => {\r\n        if (list.guests.map(g => g.name).includes(values.name) ||\r\n            list.invitedGuests.map(g => g.name).includes(values.name)) {\r\n            return action.setErrors({ name: \"User is already invited to the list.\" });\r\n        }\r\n        try {\r\n            const editedList = await listService.inviteGuest(list.id, values.name);\r\n            dispatch(inviteGuest(editedList));\r\n            if (user) {\r\n                changeActiveList(editedList, user, dispatch);\r\n            }\r\n            action.resetForm();\r\n        } catch (error) {\r\n            action.setErrors({ name: \"User does not exist.\" });\r\n        }\r\n    };\r\n    const leaveGuestList = async () => {\r\n        try {\r\n\r\n            if (user) {\r\n                leaveList(list, dispatch);\r\n                resetActiveList(user, dispatch);\r\n                onClose();\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const usersModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: \"bold\" }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\", fontWeight: \"bold\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={false} />\r\n                <Divider />\r\n                <InvitedGuests list={list} />\r\n                <Divider />\r\n                <InviteGuestForm onSubmit={addInvitation} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    const guestsModal = () => {\r\n        return (\r\n            <Fragment>\r\n                <label style={{ fontWeight: 'bold' }}>Owner of the list</label>\r\n                <Segment size=\"mini\">\r\n                    <span style={{ fontSize: \"1rem\" }}>{list.user.name}</span>\r\n                </Segment>\r\n                <Divider />\r\n                <Guests list={list} isGuest={true} />\r\n                <Divider />\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    if (user) {\r\n        if (list.guests.map(g => g.id).includes(user.id)) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {guestsModal()}\r\n                        <Button color=\"orange\" onClick={leaveGuestList}>\r\n                            <Icon name='delete' />Leave list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        } else if (list.user.id === user.id) {\r\n            return (\r\n                <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n                    <Modal.Header>Configure list {list.name}</Modal.Header>\r\n                    <Modal.Content>\r\n                        {usersModal()}\r\n                        <Button color=\"red\" onClick={() => setDeleteModalOpen(true)}>\r\n                            <Icon name='delete' />Delete list\r\n                        </Button>\r\n                        <DeleteListModal open={deleteModalOpen} list={list} onConfirm={removeList} onClose={() => setDeleteModalOpen(false)} />\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"small\" closeIcon>\r\n            <Modal.Header>Login to edit the list</Modal.Header>\r\n            <Modal.Actions>\r\n                <Button type=\"button\" onClick={onClose} color=\"grey\">\r\n                    Cancel\r\n            </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddItemForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Item\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, addItem } from '../../state';\r\nimport { ItemList } from '../../types';\r\nimport AddItemForm from './AddItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    list: ItemList;\r\n}\r\n\r\nconst AddItemModal: React.FC<Props> = ({ open, onClose, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const addNewItem = async (values: { name: string }) => {\r\n        try {\r\n            addItem(list, values.name, dispatch);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add item</Modal.Header>\r\n            <Modal.Content>\r\n                <AddItemForm onSubmit={addNewItem} onCancel={onClose} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default AddItemModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { ItemType } from '../../types';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n    item: ItemType | null;\r\n}\r\n\r\nexport const EditItemForm: React.FC<Props> = ({ onSubmit, onCancel, item }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: item ? item.name : \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the item\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default EditItemForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, editItem } from '../../state';\r\nimport { ItemList, ItemType } from '../../types';\r\nimport EditItemForm from './EditItemForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    item: ItemType | null;\r\n    list: ItemList;\r\n}\r\n\r\nconst EditItemModal: React.FC<Props> = ({ open, onClose, item, list }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const EditItem = async (values: { name: string }) => {\r\n        try {\r\n            if (item) {\r\n                editItem(list, item, values.name, dispatch);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Edit item</Modal.Header>\r\n            <Modal.Content>\r\n                <EditItemForm onSubmit={EditItem} onCancel={onClose} item={item} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default EditItemModal;\r\n","import React from 'react';\r\nimport { Button, Icon, Segment, Grid } from 'semantic-ui-react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ItemType } from '../types';\r\nimport { useStateValue } from '../state';\r\n\r\ninterface Props {\r\n    item: ItemType;\r\n    onRemove: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    onEdit: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    index: number;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ item, onRemove, onEdit, index }) => {\r\n    const [{ isDesktop }] = useStateValue();\r\n    return (\r\n        <Draggable draggableId={item.id} index={index} >\r\n            {(provided) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}>\r\n                    <Segment>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" verticalAlign=\"middle\" width={5}>\r\n                                <span>{item.name}</span>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={10} className={!isDesktop ? \"item-button-container-mobile\" : \"\"}>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"red\" onClick={onRemove} icon>\r\n                                    <Icon name=\"delete\" />\r\n                                </Button>\r\n                                <Button floated=\"right\" size=\"tiny\" color=\"olive\" onClick={onEdit} icon>\r\n                                    <Icon name=\"edit\" />\r\n                                </Button>\r\n                            </Grid.Column>\r\n\r\n                        </Grid>\r\n\r\n                    </Segment>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Item;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useStateValue, deleteItem, editList } from '../state';\r\nimport { Container, Header, Divider, Button, Icon } from 'semantic-ui-react';\r\nimport EditListModal from './EditListModal';\r\nimport AddItemModal from './AddItemModal';\r\nimport EditItemModal from './EditItemModal';\r\nimport Item from './Item';\r\nimport { ItemType } from '../types';\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst ActiveList: React.FC = () => {\r\n    const [editListModalOpen, setEditListModalOpen] = useState<boolean>(false);\r\n    const [editedItem, setEditedItem] = useState<ItemType | null>(null);\r\n    const [addItemModalOpen, setAddItemModalOpen] = useState<boolean>(false);\r\n    const [{ activeList, isDesktop, user }, dispatch] = useStateValue();\r\n    const refContainer = useRef<Button>(null);\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const focusAddButton = () => {\r\n        if (refContainer && refContainer.current) {\r\n            refContainer.current.focus();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        focusAddButton();\r\n    }, [activeList]);\r\n\r\n    const removeItem = async (item: ItemType) => {\r\n        if (activeList) {\r\n            try {\r\n                deleteItem(activeList, item, dispatch);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDragEnd = async (result: DropResult) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        const items = activeList?.items;\r\n        if (items && activeList) {\r\n            const newItems = [...items];\r\n            const draggedItem = newItems.find(i => i.id === draggableId);\r\n            if (draggedItem) {\r\n                newItems.splice(source.index, 1);\r\n                newItems.splice(destination.index, 0, draggedItem);\r\n                activeList.items = newItems;\r\n            }\r\n\r\n            try {\r\n                editList(activeList, newItems, dispatch);\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"4rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    if (!user) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if (promiseInProgress) {\r\n        return null;\r\n    }\r\n\r\n    if (!activeList) {\r\n        return (\r\n            <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n                <Header as=\"h2\" style={adviceStyle}>Create or select a list.</Header>\r\n            </Container>\r\n        );\r\n        // } else if ((!activeList.items)) {\r\n        //     return null;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            {<Header as=\"h3\" style={{ paddingRight: \"1rem\", marginBottom: 0 }}>{activeList.name}</Header>}\r\n            <Divider />\r\n            {activeList.items.length === 0 ? 'List has no items' :\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId={activeList.id}>\r\n                        {(provided) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}>\r\n                                {activeList.items.map((item, index) => (\r\n                                    <Item\r\n                                        index={index}\r\n                                        key={item.id}\r\n                                        item={item}\r\n                                        onRemove={() => removeItem(item)}\r\n                                        onEdit={() => setEditedItem(item)}\r\n                                    />))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>}\r\n            <EditListModal open={editListModalOpen} onClose={() => setEditListModalOpen(false)} list={activeList} />\r\n            <AddItemModal open={addItemModalOpen} onClose={() => { setAddItemModalOpen(false); focusAddButton(); }} list={activeList} />\r\n            <EditItemModal open={editedItem ? true : false} onClose={() => setEditedItem(null)} list={activeList} item={editedItem} />\r\n            <Divider />\r\n            <Button style={{ marginBottom: \"1rem\" }} floated=\"left\" color='olive' onClick={() => setEditListModalOpen(true)}>\r\n                <Icon name='edit' />Edit\r\n            </Button>\r\n            <Button style={{ marginBottom: \"1rem\" }} color=\"green\" floated=\"right\" onClick={() => setAddItemModalOpen(true)} ref={refContainer}>\r\n                <Icon name=\"add\" />Add Item\r\n            </Button>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default ActiveList;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\nimport { useStateValue } from '../../state';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string }) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const AddListForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    const [{ lists }] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const uniqueViolationError = 'List with that name already exists';\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (lists.map(l => l.name).includes(values.name)) {\r\n                    errors.name = uniqueViolationError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Name of the list\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddListForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport AddListForm from './AddListForm';\r\nimport { useStateValue, closeListModal, addList } from '../../state';\r\nimport { trackPromise } from 'react-promise-tracker';\r\n\r\nconst AddListModal: React.FC = () => {\r\n    const [{ listModalOpen, user }, dispatch] = useStateValue();\r\n\r\n    const addNewList = async (values: { name: string }) => {\r\n        dispatch(closeListModal());\r\n        try {\r\n            if (user) {\r\n                trackPromise(addList(values.name, user, dispatch));\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={listModalOpen} onClose={() => dispatch(closeListModal())} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Add a new list</Modal.Header>\r\n            <Modal.Content>\r\n                <AddListForm onSubmit={addNewList} onCancel={() => dispatch(closeListModal())} />\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddListModal;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => void;\r\n    onCancel: () => void;\r\n    label: string;\r\n    placeHolder: string;\r\n    initialValue: string;\r\n    type: string;\r\n}\r\n\r\nexport const ModalForm: React.FC<Props> = ({ onSubmit, onCancel, label, placeHolder, initialValue, type }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: initialValue,\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = \"Field is required\";\r\n                }\r\n\r\n                if (values.name === initialValue) {\r\n                    if (type === 'text') {\r\n                        errors.name = \"Choose a new name.\";\r\n                    } else if (type === 'email') {\r\n                        errors.name = \"Choose another email address.\";\r\n                    }\r\n                }\r\n\r\n                if (!values.password) {\r\n                    errors.password = \"Field is required.\";\r\n                }\r\n\r\n                if (type === 'email' && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.name)) {\r\n                    errors.name = \"Invalid email address.\";\r\n                }\r\n                // resetMessage();\r\n                return errors;\r\n\r\n            }}\r\n            validateOnChange={true}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label={label}\r\n                            placeholder={placeHolder}\r\n                            name=\"name\"\r\n                            type={type}\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                            autoFocus={false}\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => void;\r\n    onClose: () => void;\r\n    label: string;\r\n    header: string;\r\n    placeHolder: string;\r\n    initialValue: string;\r\n    type: string;\r\n}\r\n\r\nconst PromptModal: React.FC<Props> = ({ open, onSubmit, onClose, label, header, placeHolder, initialValue, type }) => {\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={onClose} label={label} type={type} placeHolder={placeHolder} initialValue={initialValue} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PromptModal;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useStateValue, changeUserName } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst Name: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [nameModalOpen, setNameModalOpen] = useState<boolean>(false);\r\n    const [nameChanged, setNameChanged] = useState<boolean>(false);\r\n    const [showSuccess, setShowSuccess] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        let nameChangedTimer: ReturnType<typeof setTimeout>;\r\n        if (nameChanged) {\r\n            setShowSuccess(true);\r\n            nameChangedTimer = setTimeout(() => {\r\n                setShowSuccess(false);\r\n                setNameChanged(false);\r\n            }, 5000);\r\n        }\r\n        return () => clearTimeout(nameChangedTimer);\r\n    }, [nameChanged]);\r\n\r\n    const changeName = async (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeName(user.id, values.name, values.password);\r\n                changeUserName(editedUser, dispatch);\r\n\r\n                setNameModalOpen(false);\r\n                setNameChanged(true);\r\n            } catch (error) {\r\n                if (error.response.status === 400) {\r\n                    action.setErrors({ name: \"Username already taken.\" });\r\n                } else {\r\n                    action.setErrors({ password: \"Invalid password.\" });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Username</Table.Cell>\r\n                <Table.Cell>\r\n                    {user.name}\r\n                    {showSuccess &&\r\n                        <Fragment>\r\n                            <Icon style={{ marginLeft: \"1rem\" }} name=\"check\" color=\"green\" />\r\n                            <span style={{ color: \"#21ba45\" }}>Name changed!</span>\r\n                        </Fragment>\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PromptModal open={nameModalOpen}\r\n                    onSubmit={changeName}\r\n                    onClose={() => setNameModalOpen(false)}\r\n                    label=\"Enter new name\"\r\n                    header=\"Change username\"\r\n                    placeHolder=\"Name\"\r\n                    type=\"text\"\r\n                    initialValue={user.name}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell>Username</Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}> {user.name}</p>\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setNameModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n                <PromptModal open={nameModalOpen}\r\n                    onSubmit={changeName}\r\n                    onClose={() => setNameModalOpen(false)}\r\n                    label=\"Enter new name\"\r\n                    header=\"Change username\"\r\n                    placeHolder=\"Name\"\r\n                    type=\"text\"\r\n                    initialValue={user.name}\r\n                />\r\n            </Table.Row >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Name;","import React, { useState, Fragment, useEffect } from 'react';\r\nimport { useStateValue, changeUserEmail } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PromptModal from '../PromptModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst Email: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [emailModalOpen, setEmailModalOpen] = useState<boolean>(false);\r\n    const [emailChanged, setEmailChanged] = useState<boolean>(false);\r\n    const [showSuccess, setShowSuccess] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        let nameChangedTimer: ReturnType<typeof setTimeout>;\r\n        if (emailChanged) {\r\n            setShowSuccess(true);\r\n            nameChangedTimer = setTimeout(() => {\r\n                setShowSuccess(false);\r\n                setEmailChanged(false);\r\n            }, 5000);\r\n        }\r\n        return () => clearTimeout(nameChangedTimer);\r\n    }, [emailChanged]);\r\n\r\n    const changeEmail = async (values: { name: string; password: string }, action: FormikHelpers<{ name: string; password: string }>) => {\r\n        if (user) {\r\n            try {\r\n                const editedUser = await userService.changeEmail(user.id, values.name, values.password);\r\n                changeUserEmail(editedUser, dispatch);\r\n\r\n                setEmailModalOpen(false);\r\n                setEmailChanged(true);\r\n            } catch (error) {\r\n                if (error.response.status === 400) {\r\n                    action.setErrors({ name: error.response.data });\r\n                } else {\r\n                    action.setErrors({ password: \"Invalid password.\" });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Email</Table.Cell>\r\n                <Table.Cell>{user.email ? user.email : \"\"}\r\n                    {showSuccess &&\r\n                        <Fragment>\r\n                            <Icon style={{ marginLeft: \"1rem\" }} name=\"check\" color=\"green\" />\r\n                            <span style={{ color: \"#21ba45\" }}>Email changed!</span>\r\n                        </Fragment>\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PromptModal\r\n                    open={emailModalOpen}\r\n                    onSubmit={changeEmail}\r\n                    onClose={() => setEmailModalOpen(false)}\r\n                    label=\"Email adress\"\r\n                    type=\"email\"\r\n                    header=\"Change email\"\r\n                    placeHolder=\"Email\"\r\n                    initialValue={user.email ? user.email : \"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell width={1}>Email</Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}>{user.email ? user.email : \"\"}</p>\r\n\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setEmailModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n\r\n                <PromptModal\r\n                    open={emailModalOpen}\r\n                    onSubmit={changeEmail}\r\n                    onClose={() => setEmailModalOpen(false)}\r\n                    label=\"Email address\"\r\n                    type=\"email\"\r\n                    header=\"Change email\"\r\n                    placeHolder=\"Email\"\r\n                    initialValue={user.email ? user.email : \"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Email;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => void;\r\n    onCancel: () => void;\r\n    showPassword: boolean;\r\n    toggleShowPassword: () => void;\r\n    validate: any;\r\n}\r\n\r\nexport const ModalForm: React.FC<Props> = ({ onSubmit, onCancel, showPassword, toggleShowPassword, validate }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                oldPassword: \"\",\r\n                newPassword: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Current password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"oldPassword\"\r\n                            component={PasswordField}\r\n                            autoFocus={true}\r\n\r\n                        />\r\n                        <Field\r\n                            label=\"New password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"newPassword\"\r\n                            component={PasswordField}\r\n                            autoFocus={false}\r\n                            validate={validate}\r\n                        />\r\n\r\n                        {/* <Field\r\n                            name=\"Show password\"\r\n                            type=\"checkbox\"\r\n                            checked={showPassword}\r\n                            component={Checkbox}\r\n                            onChange={toggleShowPassword}\r\n                        /> */}\r\n                        <Grid style={{ paddingTop: \"1rem\" }}>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ModalForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport ModalForm from './ModalForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onSubmit: (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => void;\r\n    onClose: () => void;\r\n    header: string;\r\n    validate: any;\r\n    initialValue: string;\r\n}\r\n\r\nconst PasswordChangeModal: React.FC<Props> = ({ open, onSubmit, onClose, header, validate }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const toggleShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>{header}</Modal.Header>\r\n            <Modal.Content>\r\n                <ModalForm onSubmit={onSubmit} onCancel={() => { onClose(); setShowPassword(false); }} showPassword={showPassword} toggleShowPassword={toggleShowPassword} validate={validate} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default PasswordChangeModal;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useStateValue } from '../../state';\r\nimport { Icon, Table, Button } from 'semantic-ui-react';\r\nimport { FormikHelpers } from \"formik\";\r\nimport userService from '../../services/users';\r\nimport PasswordChangeModal from '../PasswordChangeModal';\r\nimport { User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\n\r\nconst Password: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }] = useStateValue();\r\n    const [passwordModalOpen, setPasswordModalOpen] = useState<boolean>(false);\r\n    const [passwordChanged, setPasswordChanged] = useState<boolean>(false);\r\n    const [showSuccess, setShowSuccess] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        let nameChangedTimer: ReturnType<typeof setTimeout>;\r\n        if (passwordChanged) {\r\n            setShowSuccess(true);\r\n            nameChangedTimer = setTimeout(() => {\r\n                setShowSuccess(false);\r\n                setPasswordChanged(false);\r\n            }, 5000);\r\n        }\r\n        return () => clearTimeout(nameChangedTimer);\r\n    }, [passwordChanged]);\r\n\r\n    const changePassword = async (values: { oldPassword: string; newPassword: string },\r\n        action: FormikHelpers<{ oldPassword: string; newPassword: string }>) => {\r\n\r\n        if (user) {\r\n            try {\r\n                await userService.changePassword(user.id, values.oldPassword, values.newPassword);\r\n\r\n                setPasswordModalOpen(false);\r\n                setPasswordChanged(true);\r\n            } catch (error) {\r\n                if (error.response.status === 401) {\r\n                    action.setErrors({ oldPassword: \"Invalid password.\" });\r\n                } else {\r\n                    action.setErrors({ newPassword: \"Password is too short. Please use at least 5 characters.\" });\r\n                }\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    const validatePassword = (password: string) => {\r\n        if (password.length < 5) {\r\n            return \"Password is too short. Please use at least 5 characters.\";\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell width={2}>Password</Table.Cell>\r\n                <Table.Cell>{\"********\"}\r\n                    {showSuccess &&\r\n                        <Fragment>\r\n                            <Icon style={{ marginLeft: \"1rem\" }} name=\"check\" color=\"green\" />\r\n                            <span style={{ color: \"#21ba45\" }}>Password changed!</span>\r\n                        </Fragment>\r\n                    }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='right'>\r\n                    <Button color=\"olive\" size=\"mini\" onClick={() => setPasswordModalOpen(true)}>\r\n                        <Icon name='edit' />Edit\r\n                </Button>\r\n                </Table.Cell>\r\n                <PasswordChangeModal open={passwordModalOpen}\r\n                    onSubmit={changePassword}\r\n                    onClose={() => setPasswordModalOpen(false)}\r\n                    header=\"Change password\"\r\n                    validate={validatePassword}\r\n                    initialValue={\"\"}\r\n                />\r\n            </Table.Row>\r\n        );\r\n    } else {\r\n        return (\r\n            <Table.Row style={{ paddingTop: 0 }}>\r\n                <Table.Cell>Password</Table.Cell>\r\n                <Table.Cell style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, 1fr)\", textAlign: \"justify\", textJustify: \"inter-word\", marginTop: \"1rem\" }}>\r\n                        <p style={{ lineHeight: \"2rem\", marginBottom: 0 }}> {\"********\"}</p>\r\n                        <Button style={{ justifySelf: \"end\" }} color=\"olive\" size=\"mini\" onClick={() => setPasswordModalOpen(true)}>\r\n                            <Icon name='edit' />Edit\r\n                    </Button>\r\n                    </div>\r\n                </Table.Cell>\r\n                <PasswordChangeModal open={passwordModalOpen}\r\n                    onSubmit={changePassword}\r\n                    onClose={() => setPasswordModalOpen(false)}\r\n                    header=\"Change password\"\r\n                    validate={validatePassword}\r\n                    initialValue={\"\"}\r\n                />\r\n            </Table.Row >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Password;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStateValue, acceptInvitation, declineInvitation } from '../../state';\r\nimport { Icon, Table, Button, Divider, Header } from 'semantic-ui-react';\r\nimport { ItemList, User } from '../../types';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nconst ListInvitations: React.FC<Props> = ({ user }) => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const [listInvitations, setListInvitations] = useState<ItemList[]>();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        setListInvitations(user.listInvitations);\r\n\r\n    }, [user]);\r\n\r\n    const acceptListInvitation = async (list: ItemList) => {\r\n        if (user) {\r\n            await acceptInvitation(list, user, dispatch);\r\n            history.push('/list');\r\n        }\r\n    };\r\n\r\n    const declineListInvitation = (list: ItemList) => {\r\n        if (user) {\r\n            declineInvitation(list, user, dispatch);\r\n        }\r\n    };\r\n\r\n    if (!user || !listInvitations) {\r\n        return null;\r\n    }\r\n\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n\r\n    if (isDesktop) {\r\n        return (\r\n            <Fragment>\r\n                <Divider style={dividerStyle} horizontal>\r\n                    <Header as='h4'>\r\n                        List Invitations\r\n            </Header>\r\n                </Divider>\r\n                {listInvitations && listInvitations.length === 0 ?\r\n                    <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                    :\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {listInvitations && listInvitations.map((inv) =>\r\n                                <Table.Row key={inv.id}>\r\n                                    <Table.Cell>{inv.name} by {inv.user.name}</Table.Cell>\r\n                                    <Table.Cell textAlign='right'>\r\n                                        <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                            <Icon name='check' />Accept\r\n                                        </Button>\r\n                                        <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)}>\r\n                                            <Icon name='delete' />Decline\r\n                                        </Button>\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>}\r\n            </Fragment>\r\n        );\r\n    } else {\r\n        return (\r\n            <Fragment>\r\n                <Divider style={dividerStyle} horizontal>\r\n                    <Header as='h4'>\r\n                        List Invitations\r\n            </Header>\r\n                </Divider>\r\n                {listInvitations && listInvitations.length === 0 ?\r\n                    <p style={{ paddingBottom: \"1.3rem\" }}>No new invitations.</p>\r\n                    :\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {listInvitations && listInvitations.map((inv) =>\r\n                                <Table.Row key={inv.id}>\r\n                                    <Table.Cell>\r\n                                        <p>{inv.name} by {inv.user.name}</p>\r\n                                        <Button positive size=\"mini\" onClick={() => acceptListInvitation(inv)}>\r\n                                            <Icon name='check' />Accept\r\n                                        </Button>\r\n                                        <Button negative size=\"mini\" onClick={() => declineListInvitation(inv)} floated=\"right\">\r\n                                            <Icon name='delete' />Decline\r\n                                        </Button>\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default ListInvitations;","import React, { useEffect, useState } from 'react';\r\nimport { useStateValue, clearActiveList } from '../../state';\r\nimport { Container, Header, Divider, Table } from 'semantic-ui-react';\r\nimport Name from './Name';\r\nimport Email from './Email';\r\nimport Password from './Password';\r\nimport ListInvitations from './ListInvitations';\r\nimport userService from '../../services/users';\r\nimport { User } from '../../types';\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst ProfilePage: React.FC = () => {\r\n    const [{ user, isDesktop, activeList }, dispatch] = useStateValue();\r\n    const [userProp, setUserProp] = useState<User>();\r\n    const dividerStyle = { padding: \"1rem 0 1rem 0\" };\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    useEffect(() => {\r\n        dispatch(clearActiveList());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, user?.listInvitations]);\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            if (user) {\r\n                const userToReturn: User = await userService.getUser(user.id);\r\n                setUserProp(userToReturn);\r\n            }\r\n        };\r\n        getUser();\r\n    }, [user]);\r\n\r\n    if (!user || !userProp || promiseInProgress) {\r\n        return null;\r\n    }\r\n\r\n    if (activeList) {\r\n        return <Redirect to=\"/list\" />;\r\n    }\r\n\r\n    return (\r\n        <Container className={isDesktop ? \"cont-style\" : \"cont-style-mobile\"}>\r\n            <Divider style={dividerStyle} horizontal>\r\n                <Header as='h4'>\r\n                    Account information\r\n                </Header>\r\n            </Divider>\r\n            <Table definition>\r\n                <Table.Body>\r\n                    <Name user={userProp} />\r\n                    <Email user={userProp} />\r\n                    <Password user={userProp} />\r\n                </Table.Body>\r\n            </Table>\r\n            <ListInvitations user={userProp} />\r\n\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { email: string; password: string }) => void;\r\n}\r\n\r\nexport const ResetForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={true}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.password) {\r\n                    errors.password = \"Field is required.\";\r\n                } else if (values.password.length < 5) {\r\n                    errors.password = \"Password is too short. Please use at least 5 characters.\";\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                            autoFocus={false}\r\n                        />\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                {/* <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button> */}\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default ResetForm;\r\n","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ButtonLink = ({\r\n    className = '',\r\n    ...props\r\n}) => <Button\r\n        basic\r\n        color='blue'\r\n        className={['link', className].join(' ')}\r\n        type=\"button\"\r\n        {...props}\r\n    />;\r\n\r\nButtonLink.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default ButtonLink;","import React, { useState, useEffect } from 'react';\r\nimport { useStateValue, setOpenModalType } from '../../state';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ModalType } from '../../types';\r\nimport ResetForm from './ResetForm';\r\nimport userService from '../../services/users';\r\nimport { Container, Header, Button } from 'semantic-ui-react';\r\nimport ButtonLink from '../ButtonLink';\r\n\r\nconst ResetPassword: React.FC<{}> = () => {\r\n    const [{ isDesktop }, dispatch] = useStateValue();\r\n    const { token } = useParams<{ token: string }>();\r\n    const [validatedUserId, setValidatedUser] = useState<string | undefined>(undefined);\r\n    const [resetSuccessful, setResetSuccessful] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        const validateUser = async () => {\r\n            const response = await userService.validateToken(token);\r\n            setValidatedUser(response.data);\r\n        };\r\n\r\n        validateUser();\r\n    }, [token]);\r\n\r\n    const resetPassword = async (values: { email: string; password: string }) => {\r\n        if (validatedUserId) {\r\n            userService.resetPassword(values.email, values.password);\r\n            setResetSuccessful(true);\r\n        } else {\r\n            // Add error telling about no user found\r\n        }\r\n\r\n    };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"2rem\",\r\n        marginBottom: \"1rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    if (validatedUserId === \"\") {\r\n        return <Container className={isDesktop ? \"cont-style\" : 'cont-style-mobile'} style={isDesktop ? { width: \"60%\" } : {}}>\r\n            <Header as=\"h2\" style={adviceStyle}>Password reset link expired.</Header>\r\n            <div className=\"center-container\">\r\n                <ButtonLink\r\n                    onClick={() => dispatch(setOpenModalType(ModalType.RecoveryModal))}>\r\n                    Click here to request a new one.\r\n                </ButtonLink>\r\n            </div>\r\n        </Container>;\r\n    }\r\n\r\n    if (resetSuccessful) {\r\n        return <Container className={isDesktop ? \"cont-style\" : 'cont-style-mobile'} style={isDesktop ? { width: \"60%\" } : {}}>\r\n            <Header as=\"h2\" style={adviceStyle}>Password changed.</Header>\r\n            <div className=\"center-container\">\r\n                <Button secondary content=\"Login\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} />\r\n            </div>\r\n        </Container>;\r\n    }\r\n\r\n    return <Container className={isDesktop ? \"cont-style\" : 'cont-style-mobile'} style={isDesktop ? { width: \"60%\" } : {}}>\r\n        <Header as=\"h2\" style={adviceStyle}>Set new password</Header>\r\n        <ResetForm\r\n            onSubmit={resetPassword}\r\n        />\r\n    </Container>;\r\n};\r\n\r\n\r\nexport default ResetPassword;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useStateValue, setOpenModalType } from '../state';\r\nimport { Container, Header, Button, Segment } from 'semantic-ui-react';\r\n\r\nimport { ModalType } from '../types';\r\n\r\nconst Home: React.FC = () => {\r\n    const [{ user, isDesktop }, dispatch] = useStateValue();\r\n    const contStyle = { padding: \"0 4.6rem\" };\r\n\r\n    const adviceStyle =\r\n    {\r\n        marginTop: \"4rem\",\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    const loginButtonStyle = () => {\r\n        if (isDesktop) {\r\n            return { marginRight: \"1rem\" };\r\n        } else {\r\n            return { marginBottom: \"1rem\" };\r\n        }\r\n    };\r\n\r\n    const registerButtonStyle = () => {\r\n        if (isDesktop) {\r\n            return { marginLeft: \"1rem\" };\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    if (user) {\r\n        return <Redirect to=\"/list\" />;\r\n        // return (\r\n        //     <Container style={contStyle}>\r\n        //         <Header as=\"h2\" style={adviceStyle}>Create or select a list. *home*</Header>\r\n        //     </Container>\r\n        // );\r\n    }\r\n\r\n    return (\r\n        <Container style={contStyle}>\r\n            <Header as=\"h2\" style={adviceStyle}>Please login or register to use the site.</Header>\r\n            <Segment basic textAlign={\"center\"}>\r\n                <Button style={loginButtonStyle()} secondary content=\"Login\" onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))} />\r\n                <Button style={registerButtonStyle()} secondary content=\"Register\" onClick={() => dispatch(setOpenModalType(ModalType.RegisterModal))} />\r\n            </Segment>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\nimport { setOpenModalType, useStateValue } from '../../state';\r\nimport { ModalType } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    loginFailed: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = ({ onSubmit, onCancel, loginFailed }) => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={false}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username or email\"\r\n                            placeholder=\"Username / email\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        {loginFailed &&\r\n                            <Message negative>\r\n                                <p>Invalid username or password.</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                            <ButtonLink\r\n                                onClick={() => dispatch(setOpenModalType(ModalType.RecoveryModal))}>\r\n                                Forgot password?\r\n                            </ButtonLink>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, login, setOpenModalType } from '../../state';\r\nimport LoginForm from './LoginForm';\r\nimport { ModalType } from '../../types';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst LoginModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [loginFailed, setLoginFailed] = useState(false);\r\n    const history = useHistory();\r\n\r\n\r\n    const Login = async (values: { name: string; password: string }) => {\r\n        try {\r\n            await login(values.name, values.password, dispatch);\r\n            dispatch(setOpenModalType(ModalType.None));\r\n            setLoginFailed(false);\r\n            history.push('/list');\r\n        } catch (error) {\r\n            setLoginFailed(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={() => dispatch(setOpenModalType(ModalType.None))} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Login</Modal.Header>\r\n            <Modal.Content>\r\n                <LoginForm onSubmit={Login} onCancel={() => dispatch(setOpenModalType(ModalType.None))} loginFailed={loginFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default LoginModal;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, } from \"formik\";\r\nimport { TextField, PasswordField } from '../FieldForm';\r\nimport ButtonLink from '../ButtonLink';\r\nimport { setOpenModalType, useStateValue } from '../../state';\r\nimport { ModalType } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: { name: string; email: string; password: string }) => void;\r\n    onCancel: () => void;\r\n    registerFailed: string;\r\n}\r\n\r\nexport const RegisterForm: React.FC<Props> = ({ onSubmit, onCancel, registerFailed }) => {\r\n    const [, dispatch] = useStateValue();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n                email: \"\",\r\n                password: \"\"\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={false}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.name) {\r\n                    errors.name = requiredError;\r\n                }\r\n                if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = requiredError;\r\n                }\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Username\"\r\n                            placeholder=\"Username\"\r\n                            name=\"name\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        <Field\r\n                            label=\"Password\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            component={PasswordField}\r\n                        />\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Optional email address. Can be added later in account settings\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                        />\r\n                        {registerFailed &&\r\n                            <Message negative>\r\n                                <p>{registerFailed}</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                            <ButtonLink\r\n                                onClick={() => dispatch(setOpenModalType(ModalType.LoginModal))}>\r\n                                Already have an account? Click here to login.\r\n                            </ButtonLink>\r\n                        </div>\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Confirm\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, register, setOpenModalType } from '../../state';\r\nimport { ModalType } from '../../types';\r\nimport RegisterForm from './RegisterForm';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst RegisterModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [registerFailed, setRegisterFailed] = useState('');\r\n    const history = useHistory();\r\n\r\n    const closeModal = () => {\r\n        setRegisterFailed('');\r\n        dispatch(setOpenModalType(ModalType.None));\r\n    };\r\n\r\n    const Register = async (values: { name: string; email: string; password: string }) => {\r\n        try {\r\n            await register(values.name, values.email, values.password, dispatch);\r\n            history.push('/list');\r\n            dispatch(setOpenModalType(ModalType.None));\r\n        } catch (error) {\r\n            setRegisterFailed(error.response.data);\r\n        }\r\n    };\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Register</Modal.Header>\r\n            <Modal.Content>\r\n                <RegisterForm onSubmit={Register} onCancel={closeModal} registerFailed={registerFailed} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n\r\n};\r\n\r\nexport default RegisterModal;\r\n","import React from \"react\";\r\nimport { Grid, Button, Message } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FieldForm';\r\n\r\ninterface Props {\r\n    onSubmit: (values: { email: string }) => void;\r\n    onCancel: () => void;\r\n    emailFound: boolean;\r\n    emailNotFound: boolean;\r\n    resetMessage: () => void;\r\n}\r\n\r\nexport const RecoveryForm: React.FC<Props> = ({ onSubmit, onCancel, emailFound, emailNotFound, resetMessage }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: \"\",\r\n            }}\r\n            onSubmit={onSubmit}\r\n            validateOnChange={true}\r\n            validateOnBlur={false}\r\n            validate={values => {\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.email) {\r\n                    errors.email = \"Field is required\";\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = \"Invalid email address\";\r\n                }\r\n                resetMessage();\r\n                return errors;\r\n            }}\r\n        >\r\n            {({ isValid, dirty, resetForm, values }) => {\r\n                if (emailFound && values.email) {\r\n                    resetForm();\r\n                }\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <Field\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            component={TextField}\r\n                            autoFocus={true}\r\n                        />\r\n                        {emailFound &&\r\n                            <Message info>\r\n                                <p style={{ textAlign: \"center\" }}>Password reset email sent. Please check your mailbox and follow the link provided to reset your password.</p>\r\n                            </Message>}\r\n                        {emailNotFound &&\r\n                            <Message negative>\r\n                                <p>Email is not in use.</p>\r\n                            </Message>}\r\n                        <div style={{ marginBottom: \"1rem\" }}>\r\n                        </div>\r\n\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Send\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default RecoveryForm;\r\n","import React, { useState } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStateValue, setOpenModalType } from '../../state';\r\nimport { ModalType } from '../../types';\r\nimport RecoveryForm from './RecoveryForm';\r\nimport userService from '../../services/users';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n}\r\n\r\nconst RecoveryModal: React.FC<Props> = ({ open }) => {\r\n    const [, dispatch] = useStateValue();\r\n    const [emailFound, setEmailFound] = useState(false);\r\n    const [emailNotFound, setEmailNotFound] = useState(false);\r\n\r\n    const closeModal = () => {\r\n        setEmailFound(false);\r\n        setEmailNotFound(false);\r\n        dispatch(setOpenModalType(ModalType.None));\r\n    };\r\n\r\n    const sendMail = async (values: { email: string }) => {\r\n        const response = await userService.requestReset(values.email);\r\n        if (response.status === 200) {\r\n            setEmailNotFound(false);\r\n            setEmailFound(true);\r\n        } else {\r\n            setEmailFound(false);\r\n            setEmailNotFound(true);\r\n        }\r\n\r\n    };\r\n\r\n    const resetMessage = () => {\r\n        setEmailFound(false);\r\n        setEmailNotFound(false);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={closeModal} centered={false} size=\"tiny\" closeIcon>\r\n            <Modal.Header>Request a password reset</Modal.Header>\r\n            <Modal.Content>\r\n                <RecoveryForm\r\n                    onSubmit={sendMail}\r\n                    onCancel={closeModal}\r\n                    emailFound={emailFound}\r\n                    emailNotFound={emailNotFound}\r\n                    resetMessage={resetMessage} />\r\n            </Modal.Content>\r\n        </Modal >\r\n    );\r\n};\r\n\r\nexport default RecoveryModal;\r\n","import React from 'react';\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst LoadingIndicator: React.FC = () => {\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    if (promiseInProgress) {\r\n        return (\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"80\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\"\r\n                }}\r\n            >\r\n                <Loader type=\"ThreeDots\" color=\"#1b1c1d\" height={80} width={80} />\r\n            </div>);\r\n    }\r\n    return null;\r\n\r\n};\r\n\r\nexport default LoadingIndicator;","import React, { useEffect } from 'react';\nimport {\n    BrowserRouter as Router, Switch, Route\n} from \"react-router-dom\";\nimport { useMediaQuery } from 'react-responsive';\nimport NavBar from './components/NavBar';\nimport ActiveList from './components/ActiveList';\nimport AddListModal from './components/AddListModal';\nimport { useStateValue, setDesktop } from './state';\nimport { Container } from 'semantic-ui-react';\nimport ProfilePage from './components/ProfilePage';\nimport ResetPassword from './components/ResetPassword';\nimport Home from './components/Home';\nimport LoginModal from './components/LoginModal';\nimport RegisterModal from './components/RegisterModal';\nimport RecoveryModal from './components/RecoveryModal';\nimport { ModalType } from './types';\nimport LoadingIndicator from './components/LoadingIndicator';\n\nconst App: React.FC = () => {\n    const [{ modalType }, dispatch] = useStateValue();\n\n    const handleMediaQueryChange = (matches: boolean) => {\n        dispatch(setDesktop(matches));\n    };\n\n    const isDesktop = useMediaQuery({ minDeviceWidth: 900 }, undefined, handleMediaQueryChange);\n\n    useEffect(() => {\n        dispatch(setDesktop(isDesktop));\n    }, [dispatch, isDesktop]);\n\n    return (\n        <Router>\n            <div>\n                <NavBar />\n                <LoadingIndicator />\n                <Container>\n                    <Switch>\n                        <Route path=\"/profile\">\n                            <ProfilePage />\n                        </Route>\n                        <Route path=\"/list\">\n                            <ActiveList />\n                        </Route>\n                        <Route path=\"/users/reset-password/:token\">\n                            <ResetPassword />\n                        </Route>\n                        <Route path=\"/users/reset-password/\">\n                            <p>Test</p>\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                    <AddListModal />\n                    <LoginModal open={modalType === ModalType.LoginModal} />\n                    <RegisterModal open={modalType === ModalType.RegisterModal} />\n                    <RecoveryModal open={modalType === ModalType.RecoveryModal} />\n                </Container>\n            </div >\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\nimport './index.css';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}